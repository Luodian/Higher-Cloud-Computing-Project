<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Apache.Ignite.Core</name>
    </assembly>
    <members>
        <member name="T:Apache.Ignite.Core.Binary.BinaryBasicNameMapper">
            <summary>
            Base binary name mapper implementation.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Binary.IBinaryNameMapper">
            <summary>
            Maps type and field names to different names.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryNameMapper.GetTypeName(System.String)">
            <summary>
            Gets the type name.
            </summary>
            <param name="name">The name.</param>
            <returns>Type name.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryNameMapper.GetFieldName(System.String)">
            <summary>
            Gets the field name.
            </summary>
            <param name="name">The name.</param>
            <returns>Field name.</returns>
        </member>
        <member name="F:Apache.Ignite.Core.Binary.BinaryBasicNameMapper.SimpleNameInstance">
            <summary>
            The simple name instance.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Binary.BinaryBasicNameMapper.FullNameInstance">
            <summary>
            The full name instance.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.BinaryBasicNameMapper.GetTypeName(System.String)">
            <summary>
            Gets the type name.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.BinaryBasicNameMapper.GetFieldName(System.String)">
            <summary>
            Gets the field name.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.BinaryBasicNameMapper.BuildTypeName(Apache.Ignite.Core.Impl.Binary.TypeNameParser,System.Text.StringBuilder,System.Func{Apache.Ignite.Core.Impl.Binary.TypeNameParser,System.String})">
            <summary>
            Builds the type name.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Binary.BinaryBasicNameMapper.IsSimpleName">
            <summary>
            Gets or sets a value indicating whether this instance maps to simple type names.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Binary.TimestampAttribute">
            <summary>
            Instructs the serializer to write DateTime fields and properties in Timestamp format,
            which is interoperable with other platforms and works in SQL,
            but does not allow non-UTC values.
            <para/>
            When applied to a struct or a class, changes behavior for all fields and properties.
            <para/>
            Normally serializer uses <see cref="M:Apache.Ignite.Core.Binary.IBinaryWriter.WriteObject``1(System.String,``0)"/> for DateTime fields.
            This attribute changes the behavior to <see cref="M:Apache.Ignite.Core.Binary.IBinaryWriter.WriteTimestamp(System.String,System.Nullable{System.DateTime})"/>.
            <para/>
            See also <see cref="P:Apache.Ignite.Core.Binary.BinaryReflectiveSerializer.ForceTimestamp"/>.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Cache.Configuration.DataPageEvictionMode">
            <summary>
            Memory page eviction mode.
            Only data pages, that store key-value entries, are eligible for eviction.
            The other types of pages, like index or system pages, are not evictable.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Cache.Configuration.DataPageEvictionMode.Disabled">
            <summary>
            Eviction is disabled.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Cache.Configuration.DataPageEvictionMode.RandomLru">
            <summary>
            Random-LRU algorithm.
            <para/>
            Once a memory region defined by a memory policy is configured, an off-heap array is allocated to track
            last usage timestamp for every individual data page. The size of the array equals to
            <see cref="P:Apache.Ignite.Core.Cache.Configuration.MemoryPolicyConfiguration.MaxSize"/> / <see cref="P:Apache.Ignite.Core.Cache.Configuration.MemoryConfiguration.PageSize"/>.
            <para/>
            When a data page is accessed, its timestamp gets updated in the tracking array. The page index in the
            tracking array equals to pageAddress / <see cref="P:Apache.Ignite.Core.Cache.Configuration.MemoryPolicyConfiguration.MaxSize"/>.
            <para/>
            When some pages need to be evicted, the algorithm randomly chooses 5 indexes from the tracking array and
            evicts a page with the latest timestamp. If some of the indexes point to non-data pages
            (index or system pages) then the algorithm picks other pages.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Cache.Configuration.DataPageEvictionMode.Random2Lru">
            <summary>
            Activates Random-2-LRU algorithm which is a scan resistant version of Random-LRU.
            <para />
            This algorithm differs from Random-LRU only in a way that two latest access timestamps are stored for every
            data page. At the eviction time, a minimum between two latest timestamps is taken for further
            comparison with minimums of other pages that might be evicted. LRU-2 outperforms LRU by
            resolving "one-hit wonder" problem - if a data page is accessed rarely, but accidentally accessed once,
            its protected from eviction for a long time.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Configuration.CheckpointWriteOrder">
            <summary>
            Defines checkpoint pages order on disk.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Configuration.CheckpointWriteOrder.Random">
            <summary>
            Pages are written in order provided by checkpoint pages collection iterator
            (which is basically a hashtable).
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Configuration.CheckpointWriteOrder.Sequential">
            <summary>
            All checkpoint pages are collected into single list and sorted by page index.
            Provides almost sequential disk writes, which can be much faster on some SSD models.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Configuration.DataPageEvictionMode">
            <summary>
            Memory page eviction mode.
            Only data pages, that store key-value entries, are eligible for eviction.
            The other types of pages, like index or system pages, are not evictable.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Configuration.DataPageEvictionMode.Disabled">
            <summary>
            Eviction is disabled.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Configuration.DataPageEvictionMode.RandomLru">
            <summary>
            Random-LRU algorithm.
            <para/>
            Once a memory region defined by a memory policy is configured, an off-heap array is allocated to track
            last usage timestamp for every individual data page. The size of the array equals to
            <see cref="P:Apache.Ignite.Core.Configuration.DataRegionConfiguration.MaxSize"/> / <see cref="P:Apache.Ignite.Core.Configuration.DataStorageConfiguration.PageSize"/>.
            <para/>
            When a data page is accessed, its timestamp gets updated in the tracking array. The page index in the
            tracking array equals to pageAddress / <see cref="P:Apache.Ignite.Core.Configuration.DataRegionConfiguration.MaxSize"/>.
            <para/>
            When some pages need to be evicted, the algorithm randomly chooses 5 indexes from the tracking array and
            evicts a page with the latest timestamp. If some of the indexes point to non-data pages
            (index or system pages) then the algorithm picks other pages.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Configuration.DataPageEvictionMode.Random2Lru">
            <summary>
            Activates Random-2-LRU algorithm which is a scan resistant version of Random-LRU.
            <para />
            This algorithm differs from Random-LRU only in a way that two latest access timestamps are stored for every
            data page. At the eviction time, a minimum between two latest timestamps is taken for further
            comparison with minimums of other pages that might be evicted. LRU-2 outperforms LRU by
            resolving "one-hit wonder" problem - if a data page is accessed rarely, but accidentally accessed once,
            its protected from eviction for a long time.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Configuration.DataRegionConfiguration">
            <summary>
            Defines custom data region configuration for Apache Ignite page memory
            (see <see cref="T:Apache.Ignite.Core.Configuration.DataStorageConfiguration"/>). 
            <para/>
            For each configured data region Apache Ignite instantiates respective memory regions with different
            parameters like maximum size, eviction policy, swapping options, etc.
            An Apache Ignite cache can be mapped to a particular region using
            <see cref="P:Apache.Ignite.Core.Cache.Configuration.CacheConfiguration.DataRegionName"/> method.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Configuration.DataRegionConfiguration.DefaultPersistenceEnabled">
            <summary>
            Default value for <see cref="P:Apache.Ignite.Core.Configuration.DataRegionConfiguration.PersistenceEnabled"/>.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Configuration.DataRegionConfiguration.DefaultEvictionThreshold">
            <summary>
            The default eviction threshold.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Configuration.DataRegionConfiguration.DefaultEmptyPagesPoolSize">
            <summary>
            The default empty pages pool size.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Configuration.DataRegionConfiguration.DefaultInitialSize">
            <summary>
            The default initial size.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Configuration.DataRegionConfiguration.DefaultMetricsSubIntervalCount">
            <summary>
            The default sub intervals.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Configuration.DataRegionConfiguration.DefaultMaxSize">
            <summary>
            The default maximum size, equals to 20% of total RAM.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Configuration.DataRegionConfiguration.DefaultMetricsRateTimeInterval">
            <summary>
            The default rate time interval.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Configuration.DataRegionConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Configuration.DataRegionConfiguration"/> class.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Configuration.DataRegionConfiguration.#ctor(Apache.Ignite.Core.Binary.IBinaryRawReader)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Configuration.DataRegionConfiguration"/> class.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Configuration.DataRegionConfiguration.Write(Apache.Ignite.Core.Binary.IBinaryRawWriter)">
            <summary>
            Writes this instance to a writer.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Configuration.DataRegionConfiguration.Name">
            <summary>
            Gets or sets the data region name.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Configuration.DataRegionConfiguration.PersistenceEnabled">
            <summary>
            Gets or sets a value indicating whether disk persistence is enabled for this region.
            Default is <see cref="F:Apache.Ignite.Core.Configuration.DataRegionConfiguration.DefaultPersistenceEnabled"/>.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Configuration.DataRegionConfiguration.InitialSize">
            <summary>
            Gets or sets initial memory region size.
            When the used memory size exceeds this value, new chunks of memory will be allocated.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Configuration.DataRegionConfiguration.MaxSize">
            <summary>
            Sets maximum memory region size. The total size should not be less
            than 10 MB due to internal data structures overhead.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Configuration.DataRegionConfiguration.SwapPath">
            <summary>
            Gets or sets the the path to the directory for memory-mapped files.
            <para />
            Null for no swap.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Configuration.DataRegionConfiguration.PageEvictionMode">
            <summary>
            Gets or sets the page eviction mode. If <see cref="F:Apache.Ignite.Core.Configuration.DataPageEvictionMode.Disabled"/> is used (default)
            then an out of memory exception will be thrown if the memory region usage 
            goes beyond <see cref="P:Apache.Ignite.Core.Configuration.DataRegionConfiguration.MaxSize"/>.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Configuration.DataRegionConfiguration.EvictionThreshold">
            <summary>
            Gets or sets the threshold for memory pages eviction initiation. For instance, if the threshold is 0.9
            it means that the page memory will start the eviction only after 90% of the memory region is occupied.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Configuration.DataRegionConfiguration.EmptyPagesPoolSize">
            <summary>
            Gets or sets the minimal number of empty pages to be present in reuse lists for this data region.
            This parameter ensures that Ignite will be able to successfully evict old data entries when the size of
            (key, value) pair is slightly larger than page size / 2.
            Increase this parameter if cache can contain very big entries (total size of pages in this pool
            should be enough to contain largest cache entry).
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Configuration.DataRegionConfiguration.MetricsEnabled">
            <summary>
            Gets or sets a value indicating whether memory metrics should be enabled.
            <para/>
            Metrics can be retrieved with <see cref="M:Apache.Ignite.Core.IIgnite.GetDataRegionMetrics"/> method.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Configuration.DataRegionConfiguration.MetricsRateTimeInterval">
            <summary>
            Gets or sets the rate time interval for <see cref="P:Apache.Ignite.Core.IDataRegionMetrics.AllocationRate"/>
            and <see cref="P:Apache.Ignite.Core.IDataRegionMetrics.EvictionRate"/> monitoring purposes.
            <para/>
            For instance, after setting the interval to 60 seconds, subsequent calls
            to <see cref="P:Apache.Ignite.Core.IDataRegionMetrics.AllocationRate"/> will return average allocation
            rate (pages per second) for the last minute.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Configuration.DataRegionConfiguration.MetricsSubIntervalCount">
            <summary>
            Gets or sets the number of sub intervals to split <see cref="P:Apache.Ignite.Core.Configuration.DataRegionConfiguration.MetricsRateTimeInterval"/> into to calculate 
            <see cref="P:Apache.Ignite.Core.IDataRegionMetrics.AllocationRate"/> and <see cref="P:Apache.Ignite.Core.IDataRegionMetrics.EvictionRate"/>.
            <para/>
            Bigger value results in more accurate metrics.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Configuration.DataRegionConfiguration.CheckpointPageBufferSize">
            <summary>
            Gets or sets the size of the checkpointing page buffer.
            <para />
            Default is <c>0</c>: Ignite will choose buffer size automatically.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Configuration.DataStorageConfiguration">
            <summary>
            Data storage configuration for Ignite page memory.
            <para />
            The page memory is a manageable off-heap based memory architecture that divides all expandable data
            regions into pages of fixed size. An individual page can store one or many cache key-value entries
            that allows reusing the memory in the most efficient way and avoid memory fragmentation issues.
            <para />
            By default, the page memory allocates a single expandable data region. All the caches that will be
            configured in an application will be mapped to this data region by default, thus, all the cache data
            will reside in that data region.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Configuration.DataStorageConfiguration.DefaultCheckpointThreads">
            <summary>
            Default value for <see cref="P:Apache.Ignite.Core.Configuration.DataStorageConfiguration.CheckpointThreads"/>.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Configuration.DataStorageConfiguration.DefaultDataRegionName">
            <summary>
            Default name is assigned to default data region if no user-defined
            <see cref="P:Apache.Ignite.Core.Configuration.DataStorageConfiguration.DefaultDataRegionConfiguration"/> is specified.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Configuration.DataStorageConfiguration.DefaultWalHistorySize">
            <summary>
            Default value for <see cref="P:Apache.Ignite.Core.Configuration.DataStorageConfiguration.WalHistorySize"/>.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Configuration.DataStorageConfiguration.DefaultWalSegments">
            <summary>
            Default value for <see cref="P:Apache.Ignite.Core.Configuration.DataStorageConfiguration.WalSegments"/>.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Configuration.DataStorageConfiguration.DefaultWalSegmentSize">
            <summary>
            Default value for <see cref="P:Apache.Ignite.Core.Configuration.DataStorageConfiguration.WalSegmentSize"/>.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Configuration.DataStorageConfiguration.DefaultTlbSize">
            <summary>
            Default value for <see cref="P:Apache.Ignite.Core.Configuration.DataStorageConfiguration.WalThreadLocalBufferSize"/>.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Configuration.DataStorageConfiguration.DefaultWalRecordIteratorBufferSize">
            <summary>
            Default value for <see cref="P:Apache.Ignite.Core.Configuration.DataStorageConfiguration.WalRecordIteratorBufferSize"/>.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Configuration.DataStorageConfiguration.DefaultWalFsyncDelayNanos">
            <summary>
            Default value for <see cref="P:Apache.Ignite.Core.Configuration.DataStorageConfiguration.WalFsyncDelayNanos"/>.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Configuration.DataStorageConfiguration.DefaultMetricsSubIntervalCount">
            <summary>
            The default sub intervals.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Configuration.DataStorageConfiguration.DefaultWalPath">
            <summary>
            Default value for <see cref="P:Apache.Ignite.Core.Configuration.DataStorageConfiguration.WalPath"/>.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Configuration.DataStorageConfiguration.DefaultWalArchivePath">
            <summary>
            Default value for <see cref="P:Apache.Ignite.Core.Configuration.DataStorageConfiguration.WalArchivePath"/>.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Configuration.DataStorageConfiguration.DefaultWalMode">
            <summary>
            Default value for <see cref="P:Apache.Ignite.Core.Configuration.DataStorageConfiguration.WalMode"/>.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Configuration.DataStorageConfiguration.DefaultCheckpointWriteOrder">
            <summary>
            Default value for <see cref="P:Apache.Ignite.Core.Configuration.DataStorageConfiguration.CheckpointWriteOrder"/>.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Configuration.DataStorageConfiguration.DefaultWriteThrottlingEnabled">
            <summary>
            Default value for <see cref="P:Apache.Ignite.Core.Configuration.DataStorageConfiguration.WriteThrottlingEnabled"/>.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Configuration.DataStorageConfiguration.DefaultSystemRegionInitialSize">
            <summary>
            Default size of a memory chunk reserved for system cache initially.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Configuration.DataStorageConfiguration.DefaultSystemRegionMaxSize">
            <summary>
            Default max size of a memory chunk for the system cache.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Configuration.DataStorageConfiguration.DefaultPageSize">
            <summary>
            The default page size.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Configuration.DataStorageConfiguration.DefaultConcurrencyLevel">
            <summary>
            The default concurrency level.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Configuration.DataStorageConfiguration.DefaultCheckpointFrequency">
            <summary>
            Default value for <see cref="P:Apache.Ignite.Core.Configuration.DataStorageConfiguration.CheckpointFrequency"/>.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Configuration.DataStorageConfiguration.DefaultLockWaitTime">
            <summary>
            Default value for <see cref="P:Apache.Ignite.Core.Configuration.DataStorageConfiguration.LockWaitTime"/>.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Configuration.DataStorageConfiguration.DefaultWalFlushFrequency">
            <summary>
            Default value for <see cref="P:Apache.Ignite.Core.Configuration.DataStorageConfiguration.WalFlushFrequency"/>.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Configuration.DataStorageConfiguration.DefaultMetricsRateTimeInterval">
            <summary>
            The default rate time interval.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Configuration.DataStorageConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Configuration.DataStorageConfiguration"/> class.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Configuration.DataStorageConfiguration.#ctor(Apache.Ignite.Core.Binary.IBinaryRawReader)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Configuration.DataStorageConfiguration"/> class.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Configuration.DataStorageConfiguration.Write(Apache.Ignite.Core.Binary.IBinaryRawWriter)">
            <summary>
            Writes this instance to the specified writer.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="P:Apache.Ignite.Core.Configuration.DataStorageConfiguration.StoragePath">
            <summary>
            Gets or sets the path where data and indexes will be persisted.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Configuration.DataStorageConfiguration.CheckpointFrequency">
            <summary>
            Gets or sets the checkpointing frequency which is a minimal interval when the dirty pages will be written
            to the Persistent Store.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Configuration.DataStorageConfiguration.CheckpointThreads">
            <summary>
            Gets or sets the number of threads for checkpointing.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Configuration.DataStorageConfiguration.LockWaitTime">
            <summary>
            Gets or sets the persistent manager file lock wait time.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Configuration.DataStorageConfiguration.WalHistorySize">
            <summary>
            Gets or sets the number of checkpoints to store in WAL (Write Ahead Log) history.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Configuration.DataStorageConfiguration.WalSegments">
            <summary>
            Gets or sets a number of WAL (Write Ahead Log) segments to work with.
            For performance reasons, the whole WAL is split into files of fixed length called segments.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Configuration.DataStorageConfiguration.WalSegmentSize">
            <summary>
            Gets or sets the size of the WAL (Write Ahead Log) segment.
            For performance reasons, the whole WAL is split into files of fixed length called segments.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Configuration.DataStorageConfiguration.WalPath">
            <summary>
            Gets or sets the path to the directory where WAL (Write Ahead Log) is stored.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Configuration.DataStorageConfiguration.WalArchivePath">
            <summary>
            Gets or sets the path to the directory where WAL (Write Ahead Log) archive is stored.
            Every WAL segment will be fully copied to this directory before it can be reused for WAL purposes.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Configuration.DataStorageConfiguration.WalMode">
            <summary>
            Gets or sets the WAL (Write Ahead Log) mode.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Configuration.DataStorageConfiguration.WalThreadLocalBufferSize">
            <summary>
            Gets or sets the size of the TLB (Thread-Local Buffer), in bytes.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Configuration.DataStorageConfiguration.WalFlushFrequency">
            <summary>
            Gets or sets the WAL (Write Ahead Log) flush frequency.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Configuration.DataStorageConfiguration.WalFsyncDelayNanos">
            <summary>
            Gets or sets the WAL (Write Ahead Log) fsync (disk sync) delay, in nanoseconds
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Configuration.DataStorageConfiguration.WalRecordIteratorBufferSize">
            <summary>
            Gets or sets the size of the WAL (Write Ahead Log) record iterator buffer, in bytes.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Configuration.DataStorageConfiguration.AlwaysWriteFullPages">
            <summary>
            Gets or sets a value indicating whether full pages should always be written.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Configuration.DataStorageConfiguration.MetricsEnabled">
            <summary>
            Gets or sets a value indicating whether to enable data storage metrics.
            See <see cref="M:Apache.Ignite.Core.IIgnite.GetDataStorageMetrics"/>.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Configuration.DataStorageConfiguration.MetricsRateTimeInterval">
            <summary>
            Gets or sets the length of the time interval for rate-based metrics.
            This interval defines a window over which hits will be tracked.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Configuration.DataStorageConfiguration.MetricsSubIntervalCount">
            <summary>
            Number of sub-intervals to split the <see cref="P:Apache.Ignite.Core.Configuration.DataStorageConfiguration.MetricsRateTimeInterval"/> into to track the update history.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Configuration.DataStorageConfiguration.CheckpointWriteOrder">
            <summary>
            Gets or sets the checkpoint page write order on disk.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Configuration.DataStorageConfiguration.WriteThrottlingEnabled">
            <summary>
            Gets or sets a value indicating whether threads that generate dirty
            pages too fast during ongoing checkpoint will be throttled.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Configuration.DataStorageConfiguration.SystemRegionInitialSize">
            <summary>
            Gets or sets the size of a memory chunk reserved for system needs.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Configuration.DataStorageConfiguration.SystemRegionMaxSize">
            <summary>
            Gets or sets the maximum memory region size reserved for system needs.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Configuration.DataStorageConfiguration.PageSize">
            <summary>
            Gets or sets the size of the memory page.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Configuration.DataStorageConfiguration.ConcurrencyLevel">
            <summary>
            Gets or sets the number of concurrent segments in Ignite internal page mapping tables.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Configuration.DataStorageConfiguration.DataRegionConfigurations">
            <summary>
            Gets or sets the data region configurations.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Configuration.DataStorageConfiguration.DefaultDataRegionConfiguration">
            <summary>
            Gets or sets the default region configuration.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Cache.Configuration.MemoryPolicyConfiguration">
            <summary>
            Defines page memory policy configuration. See <see cref="P:Apache.Ignite.Core.Cache.Configuration.MemoryConfiguration.MemoryPolicies"/>.
            Obsolete, use <see cref="T:Apache.Ignite.Core.Configuration.DataRegionConfiguration"/>.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Cache.Configuration.MemoryPolicyConfiguration.DefaultEvictionThreshold">
            <summary>
            The default eviction threshold.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Cache.Configuration.MemoryPolicyConfiguration.DefaultEmptyPagesPoolSize">
            <summary>
            The default empty pages pool size.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Cache.Configuration.MemoryPolicyConfiguration.DefaultInitialSize">
            <summary>
            The default initial size.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Cache.Configuration.MemoryPolicyConfiguration.DefaultSubIntervals">
            <summary>
            The default sub intervals.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Cache.Configuration.MemoryPolicyConfiguration.DefaultMaxSize">
            <summary>
            The default maximum size, equals to 20% of total RAM.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Cache.Configuration.MemoryPolicyConfiguration.DefaultRateTimeInterval">
            <summary>
            The default rate time interval.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Configuration.MemoryPolicyConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Cache.Configuration.MemoryPolicyConfiguration"/> class.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Configuration.MemoryPolicyConfiguration.#ctor(Apache.Ignite.Core.Binary.IBinaryRawReader)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Cache.Configuration.MemoryPolicyConfiguration"/> class.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Configuration.MemoryPolicyConfiguration.Write(Apache.Ignite.Core.Binary.IBinaryRawWriter)">
            <summary>
            Writes this instance to a writer.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Configuration.MemoryPolicyConfiguration.Name">
            <summary>
            Gets or sets the memory policy name.
            Defaults to <see cref="F:Apache.Ignite.Core.Cache.Configuration.MemoryConfiguration.DefaultDefaultMemoryPolicyName"/>.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Configuration.MemoryPolicyConfiguration.InitialSize">
            <summary>
            Gets or sets initial memory region size defined by this memory policy.
            When the used memory size exceeds this value, new chunks of memory will be allocated.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Configuration.MemoryPolicyConfiguration.MaxSize">
            <summary>
            Sets maximum memory region size defined by this memory policy. The total size should not be less
            than 10 MB due to internal data structures overhead.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Configuration.MemoryPolicyConfiguration.SwapFilePath">
            <summary>
            Gets or sets the the path to the memory-mapped file the memory region defined by this memory policy
            will be mapped to. Having the path set, allows relying on swapping capabilities of an underlying
            operating system for the memory region.
            <para />
            Null for no swap.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Configuration.MemoryPolicyConfiguration.PageEvictionMode">
            <summary>
            Gets or sets the page eviction mode. If <see cref="F:Apache.Ignite.Core.Cache.Configuration.DataPageEvictionMode.Disabled"/> is used (default)
            then an out of memory exception will be thrown if the memory region usage,
            defined by this memory policy, goes beyond <see cref="P:Apache.Ignite.Core.Cache.Configuration.MemoryPolicyConfiguration.MaxSize"/>.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Configuration.MemoryPolicyConfiguration.EvictionThreshold">
            <summary>
            Gets or sets the threshold for memory pages eviction initiation. For instance, if the threshold is 0.9
            it means that the page memory will start the eviction only after 90% of the memory region
            (defined by this policy) is occupied.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Configuration.MemoryPolicyConfiguration.EmptyPagesPoolSize">
            <summary>
            Gets or sets the minimal number of empty pages to be present in reuse lists for this memory policy.
            This parameter ensures that Ignite will be able to successfully evict old data entries when the size of
            (key, value) pair is slightly larger than page size / 2.
            Increase this parameter if cache can contain very big entries (total size of pages in this pool
            should be enough to contain largest cache entry).
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Configuration.MemoryPolicyConfiguration.MetricsEnabled">
            <summary>
            Gets or sets a value indicating whether memory metrics should be enabled.
            <para/>
            Metrics can be retrieved with <see cref="M:Apache.Ignite.Core.IIgnite.GetMemoryMetrics"/> method.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Configuration.MemoryPolicyConfiguration.RateTimeInterval">
            <summary>
            Gets or sets the rate time interval for <see cref="P:Apache.Ignite.Core.Cache.IMemoryMetrics.AllocationRate"/>
            and <see cref="P:Apache.Ignite.Core.Cache.IMemoryMetrics.EvictionRate"/> monitoring purposes.
            <para/>
            For instance, after setting the interval to 60 seconds, subsequent calls
            to <see cref="P:Apache.Ignite.Core.Cache.IMemoryMetrics.AllocationRate"/> will return average allocation
            rate (pages per second) for the last minute.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Configuration.MemoryPolicyConfiguration.SubIntervals">
            <summary>
            Gets or sets the number of sub intervals to split <see cref="P:Apache.Ignite.Core.Cache.Configuration.MemoryPolicyConfiguration.RateTimeInterval"/> into to calculate 
            <see cref="P:Apache.Ignite.Core.Cache.IMemoryMetrics.AllocationRate"/> and <see cref="P:Apache.Ignite.Core.Cache.IMemoryMetrics.EvictionRate"/>.
            <para/>
            Bigger value results in more accurate metrics.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Cache.Configuration.PartitionLossPolicy">
            <summary>
            Partition loss policy. Defines how cache will behave in a case when one or more partitions are
            lost because of a node(s) failure.
            <para/>
            All *Safe policies prevent a user from interaction with partial data in lost partitions until 
            <see cref="M:Apache.Ignite.Core.IIgnite.ResetLostPartitions(System.Collections.Generic.IEnumerable{System.String})"/> method is called.
            <para/>
            *All policies allow working with partial data in lost partitions.
            <para/>
            ReadOnly* and ReadWrite* policies do not automatically change partition state and thus do not change
            rebalancing assignments for such partitions.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Cache.Configuration.PartitionLossPolicy.ReadOnlySafe">
            <summary>
            All writes to the cache will be failed with an exception, reads will only be allowed for keys in
            non-lost partitions. Reads from lost partitions will be failed with an exception.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Cache.Configuration.PartitionLossPolicy.ReadOnlyAll">
            <summary>
            All writes to the cache will be failed with an exception. All reads will proceed as if all partitions
            were in a consistent state. The result of reading from a lost partition is undefined and may be different
            on different nodes in the cluster.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Cache.Configuration.PartitionLossPolicy.ReadWriteSafe">
            <summary>
            All reads and writes will be allowed for keys in valid partitions. All reads and writes for keys
            in lost partitions will be failed with an exception.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Cache.Configuration.PartitionLossPolicy.ReadWriteAll">
            <summary>
            All reads and writes will proceed as if all partitions were in a consistent state. The result of
            reading from a lost partition is undefined and may be different on different nodes in the cluster.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Cache.Configuration.PartitionLossPolicy.Ignore">
            <summary>
            If partition is lost, reset it's state and do not clear intermediate data. The result of reading from
            a previously lost and not cleared partition is undefined and may be different on different nodes in the
            cluster.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Cache.IMemoryMetrics">
            <summary>
            Memory usage metrics.
            Obsolete, use <see cref="T:Apache.Ignite.Core.IDataRegionMetrics"/>.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.IMemoryMetrics.Name">
            <summary>
            Gets the memory policy name.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.IMemoryMetrics.TotalAllocatedPages">
            <summary>
            Gets the count of allocated pages.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.IMemoryMetrics.AllocationRate">
            <summary>
            Gets the allocation rate, in pages per second.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.IMemoryMetrics.EvictionRate">
            <summary>
            Gets the eviction rate, in pages per second.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.IMemoryMetrics.LargeEntriesPagesPercentage">
            <summary>
            Gets the percentage of pages fully occupied by entries that are larger than page.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.IMemoryMetrics.PageFillFactor">
            <summary>
            Gets the page fill factor: free space to overall size ratio across all pages.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Client.Cache.ICacheClient`2">
            <summary>
            Client cache API. See <see cref="M:Apache.Ignite.Core.Client.IIgniteClient.GetCache``2(System.String)"/>.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Client.Cache.ICacheClient`2.Put(`0,`1)">
            <summary>
            Associates the specified value with the specified key in the cache.
            <para />
            If the cache previously contained a mapping for the key,
            the old value is replaced by the specified value.
            </summary>
            <param name="key">Key with which the specified value is to be associated.</param>
            <param name="val">Value to be associated with the specified key.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Client.Cache.ICacheClient`2.Get(`0)">
            <summary>
            Retrieves value mapped to the specified key from cache.
            </summary>
            <param name="key">Key.</param>
            <returns>Value.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">If the key is not present in the cache.</exception>
        </member>
        <member name="M:Apache.Ignite.Core.Client.Cache.ICacheClient`2.TryGet(`0,`1@)">
            <summary>
            Retrieves value mapped to the specified key from cache.
            </summary>
            <param name="key">Key.</param>
            <param name="value">When this method returns, the value associated with the specified key,
            if the key is found; otherwise, the default value for the type of the value parameter.
            This parameter is passed uninitialized.</param>
            <returns>
            true if the cache contains an element with the specified key; otherwise, false.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Client.Cache.ICacheClient`2.GetAll(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Retrieves values mapped to the specified keys from cache.
            </summary>
            <param name="keys">Keys.</param>
            <returns>Map of key-value pairs.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Client.Cache.ICacheClient`2.ContainsKey(`0)">
            <summary>
            Check if cache contains mapping for this key.
            </summary>
            <param name="key">Key.</param>
            <returns>True if cache contains mapping for this key.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Client.Cache.ICacheClient`2.ContainsKeys(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Check if cache contains mapping for these keys.
            </summary>
            <param name="keys">Keys.</param>
            <returns>True if cache contains mapping for all these keys.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Client.Cache.ICacheClient`2.Query(Apache.Ignite.Core.Cache.Query.ScanQuery{`0,`1})">
            <summary>
            Executes a Scan query.
            </summary>
            <param name="scanQuery">Scan query.</param>
            <returns>Query cursor.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Client.Cache.ICacheClient`2.GetAndPut(`0,`1)">
            <summary>
            Associates the specified value with the specified key in this cache,
            returning an existing value if one existed.
            </summary>
            <param name="key">Key with which the specified value is to be associated.</param>
            <param name="val">Value to be associated with the specified key.</param>
            <returns>
            The value associated with the key at the start of the operation.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Client.Cache.ICacheClient`2.GetAndReplace(`0,`1)">
            <summary>
            Atomically replaces the value for a given key if and only if there is a value currently mapped by the key.
            </summary>
            <param name="key">Key with which the specified value is to be associated.</param>
            <param name="val">Value to be associated with the specified key.</param>
            <returns>
            The previous value associated with the specified key.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Client.Cache.ICacheClient`2.GetAndRemove(`0)">
            <summary>
            Atomically removes the entry for a key only if currently mapped to some value.
            </summary>
            <param name="key">Key with which the specified value is associated.</param>
            <returns>The value if one existed.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Client.Cache.ICacheClient`2.PutIfAbsent(`0,`1)">
            <summary>
            Atomically associates the specified key with the given value if it is not already associated with a value.
            </summary>
            <param name="key">Key with which the specified value is to be associated.</param>
            <param name="val">Value to be associated with the specified key.</param>
            <returns>True if a value was set.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Client.Cache.ICacheClient`2.GetAndPutIfAbsent(`0,`1)">
            <summary>
            Stores given key-value pair in cache only if cache had no previous mapping for it.
            </summary>
            <param name="key">Key to store in cache.</param>
            <param name="val">Value to be associated with the given key.</param>
            <returns>
            Previously contained value regardless of whether put happened or not.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Client.Cache.ICacheClient`2.Replace(`0,`1)">
            <summary>
            Stores given key-value pair in cache only if there is a previous mapping for it.
            </summary>
            <param name="key">Key to store in cache.</param>
            <param name="val">Value to be associated with the given key.</param>
            <returns>True if the value was replaced.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Client.Cache.ICacheClient`2.Replace(`0,`1,`1)">
            <summary>
            Stores given key-value pair in cache only if only if the previous value is equal to the
            old value passed as argument.
            </summary>
            <param name="key">Key to store in cache.</param>
            <param name="oldVal">Old value to match.</param>
            <param name="newVal">Value to be associated with the given key.</param>
            <returns>True if replace happened, false otherwise.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Client.Cache.ICacheClient`2.PutAll(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
            Stores given key-value pairs in cache.
            </summary>
            <param name="vals">Key-value pairs to store in cache.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Client.Cache.ICacheClient`2.Clear">
            <summary>
            Clears the contents of the cache, without notifying listeners or CacheWriters.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Client.Cache.ICacheClient`2.Clear(`0)">
            <summary>
            Clear entry from the cache, without notifying listeners or CacheWriters.
            </summary>
            <param name="key">Key to clear.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Client.Cache.ICacheClient`2.ClearAll(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Clear entries from the cache, without notifying listeners or CacheWriters.
            </summary>
            <param name="keys">Keys to clear.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Client.Cache.ICacheClient`2.Remove(`0)">
            <summary>
            Removes given key mapping from cache, notifying listeners and cache writers.
            </summary>
            <param name="key">Key to remove.</param>
            <returns>True if entry was removed, false otherwise.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Client.Cache.ICacheClient`2.Remove(`0,`1)">
            <summary>
            Removes given key mapping from cache if one exists and value is equal to the passed in value.
            </summary>
            <param name="key">Key whose mapping is to be removed from cache.</param>
            <param name="val">Value to match against currently cached value.</param>
            <returns>True if entry was removed, false otherwise.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Client.Cache.ICacheClient`2.RemoveAll(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Removes given key mappings from cache, notifying listeners and cache writers.
            </summary>
            <param name="keys">Keys to be removed from cache.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Client.Cache.ICacheClient`2.RemoveAll">
            <summary>
            Removes all mappings from cache, notifying listeners and cache writers.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Client.Cache.ICacheClient`2.GetSize(Apache.Ignite.Core.Cache.CachePeekMode[])">
            <summary>
            Gets the number of all entries cached across all nodes.
            <para />
            NOTE: this operation is distributed and will query all participating nodes for their cache sizes.
            </summary>
            <param name="modes">Optional peek modes. If not provided, then total cache size is returned.</param>
            <returns>Cache size across all nodes.</returns>
        </member>
        <member name="P:Apache.Ignite.Core.Client.Cache.ICacheClient`2.Name">
            <summary>
            Name of this cache (<c>null</c> for default cache).
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Client.Cache.ICacheClient`2.Item(`0)">
            <summary>
            Gets or sets a cache value with the specified key.
            Shortcut to <see cref="M:Apache.Ignite.Core.Client.Cache.ICacheClient`2.Get(`0)"/> and <see cref="M:Apache.Ignite.Core.Client.Cache.ICacheClient`2.Put(`0,`1)"/>
            </summary>
            <param name="key">Key.</param>
            <returns>Cache value with the specified key.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">If the key is not present in the cache.</exception>
        </member>
        <member name="T:Apache.Ignite.Core.Client.IgniteClientConfiguration">
            <summary>
            Ignite thin client configuration.
            <para/>
            Ignite thin client connects to a specific Ignite node with a socket and does not start JVM in process.
            This configuration should correspond to <see cref="P:Apache.Ignite.Core.IgniteConfiguration.ClientConnectorConfiguration"/>
            on a target node.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Client.IgniteClientConfiguration.DefaultPort">
            <summary>
            Default port.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Client.IgniteClientConfiguration.DefaultSocketBufferSize">
            <summary>
            Default socket buffer size.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Client.IgniteClientConfiguration.DefaultTcpNoDelay">
            <summary>
            Default value of <see cref="P:Apache.Ignite.Core.Client.IgniteClientConfiguration.TcpNoDelay"/> property.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Client.IgniteClientConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Client.IgniteClientConfiguration"/> class.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Client.IgniteClientConfiguration.Host">
            <summary>
            Gets or sets the host. Should not be null.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Client.IgniteClientConfiguration.Port">
            <summary>
            Gets or sets the port.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Client.IgniteClientConfiguration.SocketSendBufferSize">
            <summary>
            Gets or sets the size of the socket send buffer. When set to 0, operating system default is used.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Client.IgniteClientConfiguration.SocketReceiveBufferSize">
            <summary>
            Gets or sets the size of the socket receive buffer. When set to 0, operating system default is used.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Client.IgniteClientConfiguration.TcpNoDelay">
            <summary>
            Gets or sets the value for <c>TCP_NODELAY</c> socket option. Each
            socket will be opened using provided value.
            <para />
            Setting this option to <c>true</c> disables Nagle's algorithm
            for socket decreasing latency and delivery time for small messages.
            <para />
            For systems that work under heavy network load it is advisable to set this value to <c>false</c>.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Client.IgniteClientConfiguration.BinaryConfiguration">
            <summary>
            Gets or sets the binary configuration.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Client.IgniteClientConfiguration.BinaryProcessor">
            <summary>
            Gets or sets custom binary processor. Internal property for tests.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Client.IgniteClientException">
            <summary>
            Ignite thin client exception.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Common.IgniteException">
            <summary>
            General Ignite exception. Indicates any error condition within Ignite.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Common.IgniteException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Common.IgniteException"/> class.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Common.IgniteException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Common.IgniteException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Common.IgniteException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Common.IgniteException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="cause">The cause.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Common.IgniteException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Common.IgniteException"/> class.
            </summary>
            <param name="info">Serialization information.</param>
            <param name="ctx">Streaming context.</param>
        </member>
        <member name="F:Apache.Ignite.Core.Client.IgniteClientException.ErrorCodeField">
            Error code field. 
        </member>
        <member name="F:Apache.Ignite.Core.Client.IgniteClientException._errorCode">
            Error code. 
        </member>
        <member name="M:Apache.Ignite.Core.Client.IgniteClientException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Client.IgniteClientException"/> class.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Client.IgniteClientException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Client.IgniteClientException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Client.IgniteClientException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Client.IgniteClientException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="cause">The cause.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Client.IgniteClientException.#ctor(System.String,System.Exception,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Client.IgniteClientException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="cause">The cause.</param>
            <param name="errorCode">The error code.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Client.IgniteClientException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Client.IgniteClientException"/> class.
            </summary>
            <param name="info">Serialization information.</param>
            <param name="ctx">Streaming context.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Client.IgniteClientException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> 
            with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data
            about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information
            about the source or destination.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Client.IgniteClientException.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Client.IgniteClientException.ErrorCode">
            <summary>
            Gets the error code.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Client.IIgniteClient">
            <summary>
            Main entry point for Ignite Thin Client APIs.
            You can obtain an instance of <see cref="T:Apache.Ignite.Core.Client.IIgniteClient"/> through <see cref="M:Apache.Ignite.Core.Ignition.StartClient(Apache.Ignite.Core.Client.IgniteClientConfiguration)"/>.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Client.IIgniteClient.GetCache``2(System.String)">
            <summary>
            Gets the cache instance for the given name to work with keys and values of specified types.
            <para/>
            You can get instances of <see cref="T:Apache.Ignite.Core.Client.Cache.ICacheClient`2"/> of the same name,
            but with different key/value types.
            These will use the same named cache, but only allow working with entries of specified types.
            Attempt to retrieve an entry of incompatible type will result in <see cref="T:System.InvalidCastException"/>.
            Use <see cref="M:Apache.Ignite.Core.Client.IIgniteClient.GetCache``2(System.String)"/> in order to work with entries of arbitrary types.
            </summary>
            <param name="name">Cache name.</param>
            <returns>Cache instance for given name.</returns>
            <typeparam name="TK">Cache key type.</typeparam>
            <typeparam name="TV">Cache value type.</typeparam>
        </member>
        <member name="T:Apache.Ignite.Core.Common.ExceptionFactory">
            <summary>
            Exception factory delegate.
            </summary>
            <param name="className">Exception class name.</param>
            <param name="message">Exception message.</param>
            <param name="inner">Inner exception.</param>
            <param name="ignite">Ignite instance.</param>
            <returns>Exception.</returns>
        </member>
        <member name="T:Apache.Ignite.Core.Configuration.ClientConnectorConfiguration">
            <summary>
            Client connector configuration (ODBC, JDBC, Thin Client).
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Configuration.ClientConnectorConfiguration.DefaultPort">
            <summary>
            Default port.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Configuration.ClientConnectorConfiguration.DefaultPortRange">
            <summary>
            Default port range.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Configuration.ClientConnectorConfiguration.DefaultSocketBufferSize">
            <summary>
            Default socket buffer size.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Configuration.ClientConnectorConfiguration.DefaultTcpNoDelay">
            <summary>
            Default value of <see cref="P:Apache.Ignite.Core.Configuration.ClientConnectorConfiguration.TcpNoDelay"/> property.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Configuration.ClientConnectorConfiguration.DefaultMaxOpenCursorsPerConnection">
            <summary>
            Default maximum number of open cursors per connection.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Configuration.ClientConnectorConfiguration.DefaultThreadPoolSize">
            <summary>
            Default SQL connector thread pool size.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Configuration.ClientConnectorConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Configuration.ClientConnectorConfiguration"/> class.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Configuration.ClientConnectorConfiguration.#ctor(Apache.Ignite.Core.Binary.IBinaryRawReader)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Configuration.ClientConnectorConfiguration"/> class.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Configuration.ClientConnectorConfiguration.Write(Apache.Ignite.Core.Binary.IBinaryRawWriter)">
            <summary>
            Writes to the specified writer.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Configuration.ClientConnectorConfiguration.Host">
            <summary>
            Gets or sets the host.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Configuration.ClientConnectorConfiguration.Port">
            <summary>
            Gets or sets the port.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Configuration.ClientConnectorConfiguration.PortRange">
            <summary>
            Gets or sets the port range.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Configuration.ClientConnectorConfiguration.SocketSendBufferSize">
            <summary>
            Gets or sets the size of the socket send buffer. When set to 0, operating system default is used.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Configuration.ClientConnectorConfiguration.SocketReceiveBufferSize">
            <summary>
            Gets or sets the size of the socket receive buffer. When set to 0, operating system default is used.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Configuration.ClientConnectorConfiguration.TcpNoDelay">
            <summary>
            Gets or sets the value for <c>TCP_NODELAY</c> socket option. Each
            socket will be opened using provided value.
            <para />
            Setting this option to <c>true</c> disables Nagle's algorithm
            for socket decreasing latency and delivery time for small messages.
            <para />
            For systems that work under heavy network load it is advisable to set this value to <c>false</c>.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Configuration.ClientConnectorConfiguration.MaxOpenCursorsPerConnection">
            <summary>
            Gets or sets the maximum open cursors per connection.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Configuration.ClientConnectorConfiguration.ThreadPoolSize">
            <summary>
            Gets or sets the size of the thread pool.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Datastream.DataStreamerDefaults">
            <summary>
            Data streamer configuration defaults.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Datastream.DataStreamerDefaults.DefaultPerNodeBufferSize">
            <summary>
            The default per node buffer size, see <see cref="P:Apache.Ignite.Core.Datastream.IDataStreamer`2.PerNodeBufferSize"/>.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Datastream.DataStreamerDefaults.DefaultParallelOperationsMultiplier">
            <summary>
            Default multiplier for parallel operations per node:
            <see cref="P:Apache.Ignite.Core.Datastream.IDataStreamer`2.PerNodeParallelOperations"/> = 
            <see cref="P:Apache.Ignite.Core.IgniteConfiguration.DataStreamerThreadPoolSize"/> * 
            <see cref="F:Apache.Ignite.Core.Datastream.DataStreamerDefaults.DefaultParallelOperationsMultiplier"/>.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Datastream.DataStreamerDefaults.DefaultTimeout">
            <summary>
            The default timeout (see <see cref="P:Apache.Ignite.Core.Datastream.IDataStreamer`2.Timeout"/>).
            Negative value means no timeout.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.IDataRegionMetrics">
            <summary>
            Memory usage metrics.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.IDataRegionMetrics.Name">
            <summary>
            Gets the memory policy name.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.IDataRegionMetrics.TotalAllocatedPages">
            <summary>
            Gets the count of allocated pages.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.IDataRegionMetrics.AllocationRate">
            <summary>
            Gets the allocation rate, in pages per second.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.IDataRegionMetrics.EvictionRate">
            <summary>
            Gets the eviction rate, in pages per second.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.IDataRegionMetrics.LargeEntriesPagesPercentage">
            <summary>
            Gets the percentage of pages fully occupied by entries that are larger than page.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.IDataRegionMetrics.PageFillFactor">
            <summary>
            Gets the page fill factor: free space to overall size ratio across all pages.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.IDataStorageMetrics">
            <summary>
            Persistent store metrics.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.IDataStorageMetrics.WalLoggingRate">
            <summary>
            Gets the average number of WAL records per second written during the last time interval. 
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.IDataStorageMetrics.WalWritingRate">
            <summary>
            Gets the average number of bytes per second written during the last time interval.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.IDataStorageMetrics.WalArchiveSegments">
            <summary>
            Gets the current number of WAL segments in the WAL archive.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.IDataStorageMetrics.WalFsyncTimeAverage">
            <summary>
            Gets the average WAL fsync duration in microseconds over the last time interval.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.IDataStorageMetrics.LastCheckpointDuration">
            <summary>
            Gets the duration of the last checkpoint.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.IDataStorageMetrics.LastCheckpointLockWaitDuration">
            <summary>
            Gets the duration of last checkpoint lock wait.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.IDataStorageMetrics.LastCheckpointMarkDuration">
            <summary>
            Gets the duration of last checkpoint mark phase.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.IDataStorageMetrics.LastCheckpointPagesWriteDuration">
            <summary>
            Gets the duration of last checkpoint pages write phase.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.IDataStorageMetrics.LastCheckpointFsyncDuration">
            <summary>
            Gets the duration of the sync phase of the last checkpoint.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.IDataStorageMetrics.LastCheckpointTotalPagesNumber">
            <summary>
            Gets the total number of pages written during the last checkpoint.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.IDataStorageMetrics.LastCheckpointDataPagesNumber">
            <summary>
            Gets the number of data pages written during the last checkpoint.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.IDataStorageMetrics.LastCheckpointCopiedOnWritePagesNumber">
            <summary>
            Gets the number of pages copied to a temporary checkpoint buffer during the last checkpoint.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Configuration.WalMode">
            <summary>
            Write Ahead Log mode.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Configuration.WalMode.Default">
            <summary>
            Default mode: full-sync disk writes. These writes survive power loss scenarios.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Configuration.WalMode.LogOnly">
            <summary>
            Log only mode: flushes application buffers. These writes survive process crash.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Configuration.WalMode.Background">
            <summary>
            Background mode. Does not force application buffer flush. Data may be lost in case of process crash.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Configuration.WalMode.None">
            <summary>
            WAL disabled.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Binary.BinaryTypeId">
            <summary>
            Binary type IDs.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryTypeId.Object">
            Type: object. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryTypeId.Unregistered">
            Type: unregistered. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryTypeId.Byte">
            Type: unsigned byte. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryTypeId.Short">
            Type: short. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryTypeId.Int">
            Type: int. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryTypeId.Long">
            Type: long. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryTypeId.Float">
            Type: float. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryTypeId.Double">
            Type: double. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryTypeId.Char">
            Type: char. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryTypeId.Bool">
            Type: boolean. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryTypeId.Decimal">
            Type: decimal. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryTypeId.String">
            Type: string. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryTypeId.Guid">
            Type: GUID. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryTypeId.Timestamp">
            Type: date. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryTypeId.ArrayByte">
            Type: unsigned byte array. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryTypeId.ArrayShort">
            Type: short array. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryTypeId.ArrayInt">
            Type: int array. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryTypeId.ArrayLong">
            Type: long array. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryTypeId.ArrayFloat">
            Type: float array. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryTypeId.ArrayDouble">
            Type: double array. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryTypeId.ArrayChar">
            Type: char array. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryTypeId.ArrayBool">
            Type: boolean array. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryTypeId.ArrayDecimal">
            Type: decimal array. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryTypeId.ArrayString">
            Type: string array. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryTypeId.ArrayGuid">
            Type: GUID array. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryTypeId.ArrayTimestamp">
            Type: date array. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryTypeId.Array">
            Type: object array. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryTypeId.Collection">
            Type: collection. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryTypeId.Dictionary">
            Type: map. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryTypeId.Binary">
            Type: binary object. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryTypeId.Enum">
            Type: enum. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryTypeId.ArrayEnum">
            Type: enum array. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryTypeId.BinaryEnum">
            Type: binary enum. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryTypeId.NativeJobHolder">
            Type: native job holder. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryTypeId.ComputeOutFuncJob">
            Type: function wrapper. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryTypeId.ComputeFuncJob">
            Type: function wrapper. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryTypeId.ContinuousQueryRemoteFilterHolder">
            Type: continuous query remote filter. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryTypeId.ComputeOutFuncWrapper">
            Type: Compute out func wrapper. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryTypeId.ComputeFuncWrapper">
            Type: Compute func wrapper. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryTypeId.ComputeJobWrapper">
            Type: Compute job wrapper. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryTypeId.ComputeActionJob">
            Type: action wrapper. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryTypeId.CacheEntryProcessorHolder">
            Type: entry processor holder. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryTypeId.CacheEntryPredicateHolder">
            Type: entry predicate holder. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryTypeId.MessageListenerHolder">
            Type: message filter holder. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryTypeId.StreamReceiverHolder">
            Type: stream receiver holder. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryTypeId.PlatformJavaObjectFactoryProxy">
            Type: platform object proxy. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryTypeId.IgniteUuid">
            Type: platform object proxy. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryTypeId.TypeIds">
            Type ids. 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryTypeId.GetTypeId(System.Type)">
            <summary>
            Get binary type id for a type.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Client.Cache.CacheFlags">
            <summary>
            Cache operation flags.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Client.Cache.CacheFlags.None">
            <summary>
            No flags.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Client.Cache.CacheFlags.KeepBinary">
            <summary>
            Keep binary.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Client.Cache.Query.ClientQueryCursor`2">
            <summary>
            Client query cursor.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Cache.Query.QueryCursorBase`1">
            <summary>
            Abstract query cursor implementation.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Cache.Query.IQueryCursor`1">
            <summary>
            Query result cursor. Can be processed either in iterative mode, or by taking
            all entries using <see cref="M:Apache.Ignite.Core.Cache.Query.IQueryCursor`1.GetAll"/> method.
            <para/>
            Note that you get enumerator or call <c>GetAll()</c> method only once during
            cursor lifetime. Any further attempts to get enumerator or all entries will result 
            in exception.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Query.IQueryCursor`1.GetAll">
            <summary>
            Gets all query results. Use this method when you know in advance that query 
            result is relatively small and will not cause memory utilization issues.
            </summary>
            <returns>List containing all query results.</returns>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.Query.QueryCursorBase`1.BatchPosBeforeHead">
            Position before head. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.Query.QueryCursorBase`1._keepBinary">
            Keep binary flag. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.Query.QueryCursorBase`1._marsh">
            Marshaller. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.Query.QueryCursorBase`1._getAllCalled">
            Wherther "GetAll" was called. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.Query.QueryCursorBase`1._iterCalled">
            Whether "GetEnumerator" was called. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.Query.QueryCursorBase`1._batch">
            Batch with entries. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.Query.QueryCursorBase`1._batchPos">
            Current position in batch. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.Query.QueryCursorBase`1._disposed">
            Disposed flag. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.Query.QueryCursorBase`1._hasNext">
            Whether next batch is available. 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.Query.QueryCursorBase`1.#ctor(Apache.Ignite.Core.Impl.Binary.Marshaller,System.Boolean,Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream)">
            <summary>
            Constructor.
            </summary>
            <param name="marsh">Marshaller.</param>
            <param name="keepBinary">Keep binary flag.</param>
            <param name="initialBatchStream">Optional stream with initial batch.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.Query.QueryCursorBase`1.GetAll">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.Query.QueryCursorBase`1.GetEnumerator">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.Query.QueryCursorBase`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.Query.QueryCursorBase`1.MoveNext">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.Query.QueryCursorBase`1.Reset">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.Query.QueryCursorBase`1.GetAllInternal">
            <summary>
            Gets all entries.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.Query.QueryCursorBase`1.Read(Apache.Ignite.Core.Impl.Binary.BinaryReader)">
            <summary>
            Reads entry from the reader.
            </summary> 
            <param name="reader">Reader.</param>
            <returns>Entry.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.Query.QueryCursorBase`1.RequestBatch">
            <summary>
            Requests next batch.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.Query.QueryCursorBase`1.GetBatch">
            <summary>
            Gets the next batch.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.Query.QueryCursorBase`1.ConvertGetAll(Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream)">
            <summary>
            Converter for GET_ALL operation.
            </summary>
            <param name="stream">Stream.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.Query.QueryCursorBase`1.ConvertGetBatch(Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream)">
            <summary>
            Converter for GET_BATCH operation.
            </summary>
            <param name="stream">Stream.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.Query.QueryCursorBase`1.Dispose">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.Query.QueryCursorBase`1.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing">
            <c>true</c> when called from Dispose;  <c>false</c> when called from finalizer.
            </param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.Query.QueryCursorBase`1.ThrowIfDisposed">
            <summary>
            Throws <see cref="T:System.ObjectDisposedException"/> if this instance has been disposed.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.Query.QueryCursorBase`1.Current">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.Query.QueryCursorBase`1.System#Collections#IEnumerator#Current">
            <inheritdoc /> 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Client.Cache.Query.ClientQueryCursor`2._ignite">
            Ignite. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Client.Cache.Query.ClientQueryCursor`2._cursorId">
            Cursor ID. 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Client.Cache.Query.ClientQueryCursor`2.#ctor(Apache.Ignite.Core.Impl.Client.IgniteClient,System.Int64,System.Boolean,Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Impl.Client.Cache.Query.ClientQueryCursor`2"/> class.
            </summary>
            <param name="ignite">The ignite.</param>
            <param name="cursorId">The cursor identifier.</param>
            <param name="keepBinary">Keep binary flag.</param>
            <param name="initialBatchStream">Optional stream with initial batch.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Client.Cache.Query.ClientQueryCursor`2.InitIterator">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Client.Cache.Query.ClientQueryCursor`2.GetAllInternal">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Client.Cache.Query.ClientQueryCursor`2.Read(Apache.Ignite.Core.Impl.Binary.BinaryReader)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Client.Cache.Query.ClientQueryCursor`2.GetBatch">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Client.Cache.Query.ClientQueryCursor`2.Dispose(System.Boolean)">
            <inheritdoc /> 
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Cache.Query.PlatformQueryQursorBase`1">
            <summary>
            Base for platform cursors.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.Query.PlatformQueryQursorBase`1.OpGetAll">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.Query.PlatformQueryQursorBase`1.OpGetBatch">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.Query.PlatformQueryQursorBase`1.OpIterator">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.Query.PlatformQueryQursorBase`1.OpIteratorClose">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.Query.PlatformQueryQursorBase`1._target">
            
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.Query.PlatformQueryQursorBase`1.#ctor(Apache.Ignite.Core.Impl.IPlatformTargetInternal,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Impl.Cache.Query.PlatformQueryQursorBase`1"/> class.
            </summary>
            <param name="target">The target.</param>
            <param name="keepBinary">Keep binary flag.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.Query.PlatformQueryQursorBase`1.GetAllInternal">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.Query.PlatformQueryQursorBase`1.InitIterator">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.Query.PlatformQueryQursorBase`1.GetBatch">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.Query.PlatformQueryQursorBase`1.Dispose(System.Boolean)">
            <inheritdoc /> 
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Binary.BinaryProcessorClient">
            <summary>
            Thin client binary processor.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Binary.IBinaryProcessor">
            <summary>
            Binary processor.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IBinaryProcessor.GetBinaryType(System.Int32)">
            <summary>
            Gets metadata for specified type.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IBinaryProcessor.GetBinaryTypes">
            <summary>
            Gets metadata for all known types.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IBinaryProcessor.GetSchema(System.Int32,System.Int32)">
            <summary>
            Gets the schema.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IBinaryProcessor.PutBinaryTypes(System.Collections.Generic.ICollection{Apache.Ignite.Core.Impl.Binary.Metadata.BinaryType})">
            <summary>
            Put binary types to Grid.
            </summary>
            <param name="types">Binary types.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IBinaryProcessor.RegisterType(System.Int32,System.String)">
            <summary>
            Registers the type.
            </summary>
            <param name="id">The identifier.</param>
            <param name="typeName">The type name.</param>
            <returns>True if registration succeeded; otherwise, false.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IBinaryProcessor.RegisterEnum(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Int32}})">
            <summary>
            Registers the enum.
            </summary>
            <param name="typeName">Name of the type.</param>
            <param name="values">The values.</param>
            <returns>Resulting binary type.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IBinaryProcessor.GetTypeName(System.Int32)">
            <summary>
            Gets the type name by id.
            </summary>
            <param name="id">The identifier.</param>
            <returns>Type or null.</returns>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryProcessorClient.DotNetPlatformId">
            Type registry platform id. See org.apache.ignite.internal.MarshallerPlatformIds in Java. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryProcessorClient._socket">
            Socket. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryProcessorClient._marsh">
            Marshaller. 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryProcessorClient.#ctor(Apache.Ignite.Core.Impl.Client.ClientSocket)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Impl.Binary.BinaryProcessorClient"/> class.
            </summary>
            <param name="socket">The socket.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryProcessorClient.GetBinaryType(System.Int32)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryProcessorClient.GetBinaryTypes">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryProcessorClient.GetSchema(System.Int32,System.Int32)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryProcessorClient.PutBinaryTypes(System.Collections.Generic.ICollection{Apache.Ignite.Core.Impl.Binary.Metadata.BinaryType})">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryProcessorClient.RegisterType(System.Int32,System.String)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryProcessorClient.RegisterEnum(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Int32}})">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryProcessorClient.GetTypeName(System.Int32)">
            <inheritdoc /> 
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Client.ClientStatus">
            <summary>
            Client status codes.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Events.LocalEventListener">
            <summary>
            Abstract local event listener holder for <see cref="P:Apache.Ignite.Core.IgniteConfiguration.LocalEventListeners"/>.
            Use <see cref="T:Apache.Ignite.Core.Events.LocalEventListener`1"/> derived class.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Events.LocalEventListener.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Events.LocalEventListener"/> class.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Events.LocalEventListener.Invoke(Apache.Ignite.Core.Impl.Binary.BinaryReader)">
            <summary>
            Invokes the specified reader.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Events.LocalEventListener.EventTypes">
            <summary>
            Gets or sets the event types.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Events.LocalEventListener.ListenerObject">
            <summary>
            Gets the original user listener object.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Events.LocalEventListener`1">
            <summary>
            Generic local event listener holder, see <see cref="P:Apache.Ignite.Core.IgniteConfiguration.LocalEventListeners"/>.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Events.LocalEventListener`1.Invoke(Apache.Ignite.Core.Impl.Binary.BinaryReader)">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Events.LocalEventListener`1.Listener">
            <summary>
            Gets or sets the listener.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Events.LocalEventListener`1.ListenerObject">
            <inheritdoc /> 
        </member>
        <member name="T:Apache.Ignite.Core.Impl.DataStorageMetrics">
            <summary>
            Data storage metrics.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.DataStorageMetrics.#ctor(Apache.Ignite.Core.Binary.IBinaryRawReader)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Impl.DataStorageMetrics"/> class.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.DataStorageMetrics.WalLoggingRate">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.DataStorageMetrics.WalWritingRate">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.DataStorageMetrics.WalArchiveSegments">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.DataStorageMetrics.WalFsyncTimeAverage">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.DataStorageMetrics.LastCheckpointDuration">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.DataStorageMetrics.LastCheckpointLockWaitDuration">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.DataStorageMetrics.LastCheckpointMarkDuration">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.DataStorageMetrics.LastCheckpointPagesWriteDuration">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.DataStorageMetrics.LastCheckpointFsyncDuration">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.DataStorageMetrics.LastCheckpointTotalPagesNumber">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.DataStorageMetrics.LastCheckpointDataPagesNumber">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.DataStorageMetrics.LastCheckpointCopiedOnWritePagesNumber">
            <inheritdoc /> 
        </member>
        <member name="T:Apache.Ignite.Core.Impl.IIgniteInternal">
            <summary>
            Internal Ignite interface.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.IIgniteInternal.GetNode(System.Nullable{System.Guid})">
            <summary>
            Gets the node from cache.
            </summary>
            <param name="id">Node id.</param>
            <returns>Cached node.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.IIgniteInternal.GetDataStreamer``2(System.String,System.Boolean)">
            <summary>
            Gets the data streamer.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.IIgniteInternal.GetIgnite">
            <summary>
            Gets the public Ignite API.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.IIgniteInternal.GetBinary">
            <summary>
            Gets the binary API.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.IIgniteInternal.BinaryProcessor">
            <summary>
            Gets the binary processor.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.IIgniteInternal.Configuration">
            <summary>
            Configuration.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.IIgniteInternal.HandleRegistry">
            <summary>
            Handle registry.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.IIgniteInternal.Marshaller">
            <summary>
            Gets the marshaller.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.IIgniteInternal.PluginProcessor">
            <summary>
            Gets the plugin processor.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Client.Cache.CacheClient`2">
            <summary>
            Client cache implementation.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Client.Cache.CacheClient`2.FilterPlatformDotnet">
            Scan query filter platform code: .NET filter. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Client.Cache.CacheClient`2._name">
            Cache name. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Client.Cache.CacheClient`2._id">
            Cache id. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Client.Cache.CacheClient`2._ignite">
            Ignite. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Client.Cache.CacheClient`2._marsh">
            Marshaller. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Client.Cache.CacheClient`2._keepBinary">
            Keep binary flag. 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Client.Cache.CacheClient`2.#ctor(Apache.Ignite.Core.Impl.Client.IgniteClient,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Impl.Client.Cache.CacheClient`2"/> class.
            </summary>
            <param name="ignite">Ignite.</param>
            <param name="name">Cache name.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Client.Cache.CacheClient`2.Get(`0)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Client.Cache.CacheClient`2.TryGet(`0,`1@)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Client.Cache.CacheClient`2.GetAll(System.Collections.Generic.IEnumerable{`0})">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Client.Cache.CacheClient`2.Put(`0,`1)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Client.Cache.CacheClient`2.ContainsKey(`0)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Client.Cache.CacheClient`2.ContainsKeys(System.Collections.Generic.IEnumerable{`0})">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Client.Cache.CacheClient`2.Query(Apache.Ignite.Core.Cache.Query.ScanQuery{`0,`1})">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Client.Cache.CacheClient`2.GetAndPut(`0,`1)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Client.Cache.CacheClient`2.GetAndReplace(`0,`1)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Client.Cache.CacheClient`2.GetAndRemove(`0)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Client.Cache.CacheClient`2.PutIfAbsent(`0,`1)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Client.Cache.CacheClient`2.GetAndPutIfAbsent(`0,`1)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Client.Cache.CacheClient`2.Replace(`0,`1)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Client.Cache.CacheClient`2.Replace(`0,`1,`1)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Client.Cache.CacheClient`2.PutAll(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Client.Cache.CacheClient`2.Clear">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Client.Cache.CacheClient`2.Clear(`0)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Client.Cache.CacheClient`2.ClearAll(System.Collections.Generic.IEnumerable{`0})">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Client.Cache.CacheClient`2.Remove(`0)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Client.Cache.CacheClient`2.Remove(`0,`1)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Client.Cache.CacheClient`2.RemoveAll(System.Collections.Generic.IEnumerable{`0})">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Client.Cache.CacheClient`2.RemoveAll">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Client.Cache.CacheClient`2.GetSize(Apache.Ignite.Core.Cache.CachePeekMode[])">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Client.Cache.CacheClient`2.DoOutInOp``1(Apache.Ignite.Core.Impl.Client.ClientOp,System.Action{Apache.Ignite.Core.Impl.Binary.BinaryWriter},System.Func{Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream,``0})">
            <summary>
            Does the out in op.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Client.Cache.CacheClient`2.DoOutOp(Apache.Ignite.Core.Impl.Client.ClientOp,System.Action{Apache.Ignite.Core.Impl.Binary.BinaryWriter})">
            <summary>
            Does the out op.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Client.Cache.CacheClient`2.UnmarshalNotNull``1(Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream)">
            <summary>
            Unmarshals the value, throwing an exception for nulls.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Client.Cache.CacheClient`2.UnmarshalCacheResult``1(Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream)">
            <summary>
            Unmarshals the value, wrapping in a cache result.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Client.Cache.CacheClient`2.WriteScanQuery(Apache.Ignite.Core.Impl.Binary.BinaryWriter,Apache.Ignite.Core.Cache.Query.ScanQuery{`0,`1})">
            <summary>
            Writes the scan query.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Client.Cache.CacheClient`2.HandleError``1(Apache.Ignite.Core.Impl.Client.ClientStatus,System.String)">
            <summary>
            Handles the error.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Client.Cache.CacheClient`2.GetKeyNotFoundException">
            <summary>
            Gets the key not found exception.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Client.Cache.CacheClient`2.WritePeekModes(System.Collections.Generic.ICollection{Apache.Ignite.Core.Cache.CachePeekMode},Apache.Ignite.Core.Binary.IBinaryRawWriter)">
            <summary>
            Writes the peek modes.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Client.Cache.CacheClient`2.Name">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Client.Cache.CacheClient`2.Item(`0)">
            <inheritDoc /> 
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Client.ClientOp">
            <summary>
            Client op code.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Client.ClientProtocolVersion">
            <summary>
            Client protocol version.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Client.ClientProtocolVersion._major">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Client.ClientProtocolVersion._minor">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Client.ClientProtocolVersion._maintenance">
            
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Client.ClientProtocolVersion.#ctor(System.Int16,System.Int16,System.Int16)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Impl.Client.ClientProtocolVersion"/> struct.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Client.ClientProtocolVersion.Equals(Apache.Ignite.Core.Impl.Client.ClientProtocolVersion)">
            <summary>
            Returns a value indicating whether specified instance equals to current.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Client.ClientProtocolVersion.Equals(System.Object)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Client.ClientProtocolVersion.op_Equality(Apache.Ignite.Core.Impl.Client.ClientProtocolVersion,Apache.Ignite.Core.Impl.Client.ClientProtocolVersion)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Client.ClientProtocolVersion.op_Inequality(Apache.Ignite.Core.Impl.Client.ClientProtocolVersion,Apache.Ignite.Core.Impl.Client.ClientProtocolVersion)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Client.ClientProtocolVersion.GetHashCode">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Client.ClientProtocolVersion.ToString">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Client.ClientProtocolVersion.Major">
            <summary>
            Gets the major part.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Client.ClientProtocolVersion.Minor">
            <summary>
            Gets the minor part.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Client.ClientProtocolVersion.Maintenance">
            <summary>
            Gets the maintenance part.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Client.ClientSocket">
            <summary>
            Wrapper over framework socket for Ignite thin client operations.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Client.ClientSocket.OpHandshake">
            Handshake opcode. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Client.ClientSocket.ClientType">
            Client type code. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Client.ClientSocket.CurrentProtocolVersion">
            Current version. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Client.ClientSocket._socket">
            Unerlying socket. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Client.ClientSocket._requestId">
            
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Client.ClientSocket.#ctor(Apache.Ignite.Core.Client.IgniteClientConfiguration,System.Nullable{Apache.Ignite.Core.Impl.Client.ClientProtocolVersion})">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Impl.Client.ClientSocket"/> class.
            </summary>
            <param name="clientConfiguration">The client configuration.</param>
            <param name="version">Protocol version.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Client.ClientSocket.DoOutInOp``1(Apache.Ignite.Core.Impl.Client.ClientOp,System.Action{Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream},System.Func{Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream,``0},System.Func{Apache.Ignite.Core.Impl.Client.ClientStatus,System.String,``0})">
            <summary>
            Performs a send-receive operation.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Client.ClientSocket.Handshake(System.Net.Sockets.Socket,Apache.Ignite.Core.Impl.Client.ClientProtocolVersion)">
            <summary>
            Performs client protocol handshake.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Client.ClientSocket.SendReceive(System.Net.Sockets.Socket,System.Action{Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream},System.Int32)">
            <summary>
            Sends the request and receives a response.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Client.ClientSocket.WriteMessage(System.Action{Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream},System.Int32,System.Int32@)">
            <summary>
            Writes the message to a byte array.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Client.ClientSocket.Connect(Apache.Ignite.Core.Client.IgniteClientConfiguration)">
            <summary>
            Connects the socket.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Client.ClientSocket.GetEndPoints(Apache.Ignite.Core.Client.IgniteClientConfiguration)">
            <summary>
            Gets the endpoints: all combinations of IP addresses and ports according to configuration.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Client.ClientSocket.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Client.IgniteClient">
            <summary>
            Thin client implementation
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Client.IgniteClient._socket">
            Socket. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Client.IgniteClient._marsh">
            Marshaller. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Client.IgniteClient._binProc">
            Binary processor. 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Client.IgniteClient.#ctor(Apache.Ignite.Core.Client.IgniteClientConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Impl.Client.IgniteClient"/> class.
            </summary>
            <param name="clientConfiguration">The client configuration.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Client.IgniteClient.Dispose">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Client.IgniteClient.GetCache``2(System.String)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Client.IgniteClient.GetIgnite">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Client.IgniteClient.GetBinary">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Client.IgniteClient.GetNode(System.Nullable{System.Guid})">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Client.IgniteClient.GetDataStreamer``2(System.String,System.Boolean)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Client.IgniteClient.GetClientNotSupportedException(System.String)">
            <summary>
            Gets the client not supported exception.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Client.IgniteClient.Socket">
            <summary>
            Gets the socket.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Client.IgniteClient.BinaryProcessor">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Client.IgniteClient.Configuration">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Client.IgniteClient.HandleRegistry">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Client.IgniteClient.Marshaller">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Client.IgniteClient.PluginProcessor">
            <inheritDoc /> 
        </member>
        <member name="T:Apache.Ignite.Core.Impl.IPlatformTargetInternal">
            <summary>
            Extended platform target interface with methods that operate on internal entities (streams and targets).
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Interop.IPlatformTarget">
            <summary>
            Interface to interoperate with
            org.apache.ignite.internal.processors.platform.PlatformTarget on Java side.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Interop.IPlatformTarget.InLongOutLong(System.Int32,System.Int64)">
            <summary>
            Performs InLongOutLong operation.
            </summary>
            <param name="type">Operation type code.</param>
            <param name="val">Value.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Interop.IPlatformTarget.InStreamOutLong(System.Int32,System.Action{Apache.Ignite.Core.Binary.IBinaryRawWriter})">
            <summary>
            Performs InStreamOutLong operation.
            </summary>
            <param name="type">Operation type code.</param>
            <param name="writeAction">Write action.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Interop.IPlatformTarget.InStreamOutStream``1(System.Int32,System.Action{Apache.Ignite.Core.Binary.IBinaryRawWriter},System.Func{Apache.Ignite.Core.Binary.IBinaryRawReader,``0})">
            <summary>
            Performs InStreamOutStream operation.
            </summary>
            <typeparam name="T">Result type.</typeparam>
            <param name="type">Operation type code.</param>
            <param name="writeAction">Write action.</param>
            <param name="readAction">Read action.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Interop.IPlatformTarget.InStreamOutObject(System.Int32,System.Action{Apache.Ignite.Core.Binary.IBinaryRawWriter})">
            <summary>
            Performs InStreamOutObject operation.
            </summary>
            <param name="type">Operation type code.</param>
            <param name="writeAction">Write action.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Interop.IPlatformTarget.InObjectStreamOutObjectStream``1(System.Int32,Apache.Ignite.Core.Interop.IPlatformTarget,System.Action{Apache.Ignite.Core.Binary.IBinaryRawWriter},System.Func{Apache.Ignite.Core.Binary.IBinaryRawReader,Apache.Ignite.Core.Interop.IPlatformTarget,``0})">
            <summary>
            Performs InObjectStreamOutObjectStream operation.
            </summary>
            <typeparam name="T">Result type.</typeparam>
            <param name="type">Operation type code.</param>
            <param name="arg">Target argument.</param>
            <param name="writeAction">Write action.</param>
            <param name="readAction">Read action.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Interop.IPlatformTarget.OutStream``1(System.Int32,System.Func{Apache.Ignite.Core.Binary.IBinaryRawReader,``0})">
            <summary>
            Performs OutStream operation.
            </summary>
            <typeparam name="T">Result type.</typeparam>
            <param name="type">Operation type code.</param>
            <param name="readAction">Read action.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Interop.IPlatformTarget.OutObject(System.Int32)">
            <summary>
            Performs the OutObject operation.
            </summary>
            <param name="type">Operation type code.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Interop.IPlatformTarget.DoOutOpAsync``1(System.Int32,System.Action{Apache.Ignite.Core.Binary.IBinaryRawWriter},System.Func{Apache.Ignite.Core.Binary.IBinaryRawReader,``0})">
            <summary>
            Performs asynchronous operation.
            </summary>
            <typeparam name="T">Result type</typeparam>
            <param name="type">Operation type code.</param>
            <param name="writeAction">Write action (can be null).</param>
            <param name="readAction">Read function (can be null).</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Interop.IPlatformTarget.DoOutOpAsync``1(System.Int32,System.Action{Apache.Ignite.Core.Binary.IBinaryRawWriter},System.Func{Apache.Ignite.Core.Binary.IBinaryRawReader,``0},System.Threading.CancellationToken)">
            <summary>
            Performs asynchronous operation.
            </summary>
            <typeparam name="T">Result type</typeparam>
            <param name="type">Operation type code.</param>
            <param name="writeAction">Write action (can be null).</param>
            <param name="readAction">Read function (can be null).</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            Task.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.IPlatformTargetInternal.InStreamOutLong(System.Int32,System.Action{Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream})">
            <summary>
            Performs InStreamOutLong operation.
            </summary>
            <param name="type">Operation type code.</param>
            <param name="writeAction">Write action.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.IPlatformTargetInternal.InStreamOutLong``1(System.Int32,System.Action{Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream},System.Func{Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream,System.Int64,``0},System.Func{Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream,System.Exception})">
            <summary>
            Performs InStreamOutLong operation with stream reuse.
            </summary>
            <param name="type">Operation type code.</param>
            <param name="writeAction">Write action.</param>
            <param name="readAction">Read action.</param>
            <param name="readErrorAction">Error action.</param>
            <returns>
            Result.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.IPlatformTargetInternal.InStreamOutStream``1(System.Int32,System.Action{Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream},System.Func{Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream,``0})">
            <summary>
            Performs InStreamOutStream operation.
            </summary>
            <typeparam name="T">Result type.</typeparam>
            <param name="type">Operation type code.</param>
            <param name="writeAction">Write action.</param>
            <param name="readAction">Read action.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.IPlatformTargetInternal.InStreamOutObject(System.Int32,System.Action{Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream})">
            <summary>
            Performs InStreamOutObject operation.
            </summary>
            <param name="type">Operation type code.</param>
            <param name="writeAction">Write action.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.IPlatformTargetInternal.InObjectStreamOutObjectStream``1(System.Int32,System.Action{Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream},System.Func{Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream,Apache.Ignite.Core.Impl.IPlatformTargetInternal,``0},Apache.Ignite.Core.Impl.IPlatformTargetInternal)">
            <summary>
            Performs InObjectStreamOutObjectStream operation.
            </summary>
            <typeparam name="T">Result type.</typeparam>
            <param name="type">Operation type code.</param>
            <param name="arg">Target argument.</param>
            <param name="writeAction">Write action.</param>
            <param name="readAction">Read action.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.IPlatformTargetInternal.OutStream``1(System.Int32,System.Func{Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream,``0})">
            <summary>
            Performs OutStream operation.
            </summary>
            <typeparam name="T">Result type.</typeparam>
            <param name="type">Operation type code.</param>
            <param name="readAction">Read action.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.IPlatformTargetInternal.OutObjectInternal(System.Int32)">
            <summary>
            Performs the OutObject operation.
            </summary>
            <param name="type">Operation type code.</param>
            <returns>Result.</returns>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.IPlatformTargetInternal.Marshaller">
            <summary>
            Gets the marshaller.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.DataRegionMetrics">
            <summary>
            Data region metrics.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.DataRegionMetrics.#ctor(Apache.Ignite.Core.Binary.IBinaryRawReader)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Impl.DataRegionMetrics"/> class.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.DataRegionMetrics.Name">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.DataRegionMetrics.TotalAllocatedPages">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.DataRegionMetrics.AllocationRate">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.DataRegionMetrics.EvictionRate">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.DataRegionMetrics.LargeEntriesPagesPercentage">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.DataRegionMetrics.PageFillFactor">
            <inheritdoc /> 
        </member>
        <member name="T:Apache.Ignite.Core.Impl.PersistentStore.PersistentStoreMetrics">
            <summary>
            Persistent store metrics.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.PersistentStore.IPersistentStoreMetrics">
            <summary>
            Persistent store metrics.
            Obsolete, see <see cref="T:Apache.Ignite.Core.IDataStorageMetrics"/>.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.PersistentStore.IPersistentStoreMetrics.WalLoggingRate">
            <summary>
            Gets the average number of WAL records per second written during the last time interval. 
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.PersistentStore.IPersistentStoreMetrics.WalWritingRate">
            <summary>
            Gets the average number of bytes per second written during the last time interval.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.PersistentStore.IPersistentStoreMetrics.WalArchiveSegments">
            <summary>
            Gets the current number of WAL segments in the WAL archive.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.PersistentStore.IPersistentStoreMetrics.WalFsyncTimeAverage">
            <summary>
            Gets the average WAL fsync duration in microseconds over the last time interval.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.PersistentStore.IPersistentStoreMetrics.LastCheckpointingDuration">
            <summary>
            Gets the duration of the last checkpoint.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.PersistentStore.IPersistentStoreMetrics.LastCheckpointLockWaitDuration">
            <summary>
            Gets the duration of last checkpoint lock wait.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.PersistentStore.IPersistentStoreMetrics.LastCheckpointMarkDuration">
            <summary>
            Gets the duration of last checkpoint mark phase.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.PersistentStore.IPersistentStoreMetrics.LastCheckpointPagesWriteDuration">
            <summary>
            Gets the duration of last checkpoint pages write phase.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.PersistentStore.IPersistentStoreMetrics.LastCheckpointFsyncDuration">
            <summary>
            Gets the duration of the sync phase of the last checkpoint.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.PersistentStore.IPersistentStoreMetrics.LastCheckpointTotalPagesNumber">
            <summary>
            Gets the total number of pages written during the last checkpoint.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.PersistentStore.IPersistentStoreMetrics.LastCheckpointDataPagesNumber">
            <summary>
            Gets the number of data pages written during the last checkpoint.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.PersistentStore.IPersistentStoreMetrics.LastCheckpointCopiedOnWritePagesNumber">
            <summary>
            Gets the number of pages copied to a temporary checkpoint buffer during the last checkpoint.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.PersistentStore.PersistentStoreMetrics.#ctor(Apache.Ignite.Core.Binary.IBinaryRawReader)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Impl.PersistentStore.PersistentStoreMetrics"/> class.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.PersistentStore.PersistentStoreMetrics.WalLoggingRate">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.PersistentStore.PersistentStoreMetrics.WalWritingRate">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.PersistentStore.PersistentStoreMetrics.WalArchiveSegments">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.PersistentStore.PersistentStoreMetrics.WalFsyncTimeAverage">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.PersistentStore.PersistentStoreMetrics.LastCheckpointingDuration">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.PersistentStore.PersistentStoreMetrics.LastCheckpointLockWaitDuration">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.PersistentStore.PersistentStoreMetrics.LastCheckpointMarkDuration">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.PersistentStore.PersistentStoreMetrics.LastCheckpointPagesWriteDuration">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.PersistentStore.PersistentStoreMetrics.LastCheckpointFsyncDuration">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.PersistentStore.PersistentStoreMetrics.LastCheckpointTotalPagesNumber">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.PersistentStore.PersistentStoreMetrics.LastCheckpointDataPagesNumber">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.PersistentStore.PersistentStoreMetrics.LastCheckpointCopiedOnWritePagesNumber">
            <inheritdoc /> 
        </member>
        <member name="T:Apache.Ignite.Core.Impl.PlatformDisposableTargetAdapter">
            <summary>
            PlatformTargetAdapter with IDisposable pattern.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.PlatformTargetAdapter">
            <summary>
            Base class for interop targets, provides additional functionality over <see cref="T:Apache.Ignite.Core.Impl.IPlatformTargetInternal"/>.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.PlatformTargetAdapter.False">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.PlatformTargetAdapter.True">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.PlatformTargetAdapter.Error">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.PlatformTargetAdapter.IgniteFutureTypeMap">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.PlatformTargetAdapter._target">
            Unmanaged target. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.PlatformTargetAdapter._marsh">
            Marshaller. 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.PlatformTargetAdapter.#ctor(Apache.Ignite.Core.Impl.IPlatformTargetInternal)">
            <summary>
            Constructor.
            </summary>
            <param name="target">Target.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.PlatformTargetAdapter.DoOutOp(System.Int32,System.Action{Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream})">
            <summary>
            Perform out operation.
            </summary>
            <param name="type">Operation type.</param>
            <param name="action">Action to be performed on the stream.</param>
            <returns></returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.PlatformTargetAdapter.DoOutOp(System.Int32,System.Action{Apache.Ignite.Core.Impl.Binary.BinaryWriter})">
            <summary>
            Perform out operation.
            </summary>
            <param name="type">Operation type.</param>
            <param name="action">Action to be performed on the stream.</param>
            <returns></returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.PlatformTargetAdapter.DoOutOpObject(System.Int32,System.Action{Apache.Ignite.Core.Impl.Binary.BinaryWriter})">
            <summary>
            Perform out operation.
            </summary>
            <param name="type">Operation type.</param>
            <param name="action">Action to be performed on the stream.</param>
            <returns>Resulting object.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.PlatformTargetAdapter.DoOutOpObject(System.Int32,System.Action{Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream})">
            <summary>
            Perform out operation.
            </summary>
            <param name="type">Operation type.</param>
            <param name="action">Action to be performed on the stream.</param>
            <returns>Resulting object.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.PlatformTargetAdapter.DoOutOpObject(System.Int32)">
            <summary>
            Perform out operation.
            </summary>
            <param name="type">Operation type.</param>
            <returns>Resulting object.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.PlatformTargetAdapter.DoOutOp``1(System.Int32,``0)">
            <summary>
            Perform simple output operation accepting single argument.
            </summary>
            <param name="type">Operation type.</param>
            <param name="val1">Value.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.PlatformTargetAdapter.DoOutOp``2(System.Int32,``0,``1)">
            <summary>
            Perform simple output operation accepting two arguments.
            </summary>
            <param name="type">Operation type.</param>
            <param name="val1">Value 1.</param>
            <param name="val2">Value 2.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.PlatformTargetAdapter.DoInOp``1(System.Int32,System.Func{Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream,``0})">
            <summary>
            Perform in operation.
            </summary>
            <param name="type">Type.</param>
            <param name="action">Action.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.PlatformTargetAdapter.DoInOp``1(System.Int32)">
            <summary>
            Perform simple in operation returning immediate result.
            </summary>
            <param name="type">Type.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.PlatformTargetAdapter.DoOutInOp``1(System.Int32,System.Action{Apache.Ignite.Core.Impl.Binary.BinaryWriter},System.Func{Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream,``0})">
            <summary>
            Perform out-in operation.
            </summary>
            <param name="type">Operation type.</param>
            <param name="outAction">Out action.</param>
            <param name="inAction">In action.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.PlatformTargetAdapter.DoOutInOpX``1(System.Int32,System.Action{Apache.Ignite.Core.Impl.Binary.BinaryWriter},System.Func{Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream,System.Int64,``0},System.Func{Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream,System.Exception})">
            <summary>
            Perform out-in operation with a single stream.
            </summary>
            <typeparam name="TR">The type of the r.</typeparam>
            <param name="type">Operation type.</param>
            <param name="outAction">Out action.</param>
            <param name="inAction">In action.</param>
            <param name="inErrorAction">The action to read an error.</param>
            <returns>
            Result.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.PlatformTargetAdapter.DoOutInOpX(System.Int32,System.Action{Apache.Ignite.Core.Impl.Binary.BinaryWriter},System.Func{Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream,System.Exception})">
            <summary>
            Perform out-in operation with a single stream.
            </summary>
            <param name="type">Operation type.</param>
            <param name="outAction">Out action.</param>
            <param name="inErrorAction">The action to read an error.</param>
            <returns>
            Result.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.PlatformTargetAdapter.DoOutInOp``1(System.Int32,System.Action{Apache.Ignite.Core.Impl.Binary.BinaryWriter},System.Func{Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream,Apache.Ignite.Core.Impl.IPlatformTargetInternal,``0},Apache.Ignite.Core.Impl.IPlatformTargetInternal)">
            <summary>
            Perform out-in operation.
            </summary>
            <param name="type">Operation type.</param>
            <param name="outAction">Out action.</param>
            <param name="inAction">In action.</param>
            <param name="arg">Argument.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.PlatformTargetAdapter.DoOutInOp``1(System.Int32,System.Action{Apache.Ignite.Core.Impl.Binary.BinaryWriter})">
            <summary>
            Perform out-in operation.
            </summary>
            <param name="type">Operation type.</param>
            <param name="outAction">Out action.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.PlatformTargetAdapter.DoOutInOp``2(System.Int32,``0)">
            <summary>
            Perform simple out-in operation accepting single argument.
            </summary>
            <param name="type">Operation type.</param>
            <param name="val">Value.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.PlatformTargetAdapter.DoOutInOp(System.Int32,System.Int64)">
            <summary>
            Perform simple out-in operation accepting two arguments.
            </summary>
            <param name="type">Operation type.</param>
            <param name="val">Value.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.PlatformTargetAdapter.DoOutOpAsync(System.Int32,System.Action{Apache.Ignite.Core.Impl.Binary.BinaryWriter})">
            <summary>
            Performs async operation.
            </summary>
            <param name="type">The type code.</param>
            <param name="writeAction">The write action.</param>
            <returns>Task for async operation</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.PlatformTargetAdapter.DoOutOpAsync``1(System.Int32,System.Action{Apache.Ignite.Core.Impl.Binary.BinaryWriter},System.Boolean,System.Func{Apache.Ignite.Core.Impl.Binary.BinaryReader,``0})">
            <summary>
            Performs async operation.
            </summary>
            <typeparam name="T">Type of the result.</typeparam>
            <param name="type">The type code.</param>
            <param name="writeAction">The write action.</param>
            <param name="keepBinary">Keep binary flag, only applicable to object futures. False by default.</param>
            <param name="convertFunc">The function to read future result from stream.</param>
            <returns>Task for async operation</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.PlatformTargetAdapter.DoOutOpObjectAsync``1(System.Int32,System.Action{Apache.Ignite.Core.Binary.IBinaryRawWriter})">
            <summary>
            Performs async operation.
            </summary>
            <typeparam name="T">Type of the result.</typeparam>
            <param name="type">The type code.</param>
            <param name="writeAction">The write action.</param>
            <returns>Future for async operation</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.PlatformTargetAdapter.DoOutOpAsync``2(System.Int32,``0)">
            <summary>
            Performs async operation.
            </summary>
            <typeparam name="TR">Type of the result.</typeparam>
            <typeparam name="T1">The type of the first arg.</typeparam>
            <param name="type">The type code.</param>
            <param name="val1">First arg.</param>
            <returns>
            Task for async operation
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.PlatformTargetAdapter.DoOutOpAsync``3(System.Int32,``0,``1)">
            <summary>
            Performs async operation.
            </summary>
            <typeparam name="TR">Type of the result.</typeparam>
            <typeparam name="T1">The type of the first arg.</typeparam>
            <typeparam name="T2">The type of the second arg.</typeparam>
            <param name="type">The type code.</param>
            <param name="val1">First arg.</param>
            <param name="val2">Second arg.</param>
            <returns>
            Task for async operation
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.PlatformTargetAdapter.Unmarshal``1(Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream)">
            <summary>
            Unmarshal object using the given stream.
            </summary>
            <param name="stream">Stream.</param>
            <returns>Unmarshalled object.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.PlatformTargetAdapter.GetFuture``1(System.Func{System.Int64,System.Int32,Apache.Ignite.Core.Impl.IPlatformTargetInternal},System.Boolean,System.Func{Apache.Ignite.Core.Impl.Binary.BinaryReader,``0})">
            <summary>
            Creates a future and starts listening.
            </summary>
            <typeparam name="T">Future result type</typeparam>
            <param name="listenAction">The listen action.</param>
            <param name="keepBinary">Keep binary flag, only applicable to object futures. False by default.</param>
            <param name="convertFunc">The function to read future result from stream.</param>
            <returns>Created future.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.PlatformTargetAdapter.GetFuture``1(System.Action{System.Int64,System.Int32},System.Boolean,System.Func{Apache.Ignite.Core.Impl.Binary.BinaryReader,``0})">
            <summary>
            Creates a future and starts listening.
            </summary>
            <typeparam name="T">Future result type</typeparam>
            <param name="listenAction">The listen action.</param>
            <param name="keepBinary">Keep binary flag, only applicable to object futures. False by default.</param>
            <param name="convertFunc">The function to read future result from stream.</param>
            <returns>Created future.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.PlatformTargetAdapter.WriteToStream(System.Action{Apache.Ignite.Core.Impl.Binary.BinaryWriter},Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream,Apache.Ignite.Core.Impl.Binary.Marshaller)">
            <summary>
            Writes to stream.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.PlatformTargetAdapter.WriteToStream``1(``0,Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream,Apache.Ignite.Core.Impl.Binary.Marshaller)">
            <summary>
            Writes to stream.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.PlatformTargetAdapter.Target">
            <summary>
            Unmanaged target.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.PlatformTargetAdapter.Marshaller">
            <summary>
            Marshaller.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.PlatformDisposableTargetAdapter._disposed">
            Disposed flag. 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.PlatformDisposableTargetAdapter.#ctor(Apache.Ignite.Core.Impl.IPlatformTargetInternal)">
            <summary>
            Constructor.
            </summary>
            <param name="target">Target.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.PlatformDisposableTargetAdapter.Dispose">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.PlatformDisposableTargetAdapter.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing">
            <c>true</c> when called from Dispose;  <c>false</c> when called from finalizer.
            </param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.PlatformDisposableTargetAdapter.ThrowIfDisposed">
            <summary>
            Throws <see cref="T:System.ObjectDisposedException"/> if this instance has been disposed.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.PlatformJniTarget">
            <summary>
            Base class for interop targets.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.PlatformJniTarget.IgniteFutureTypeMap">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.PlatformJniTarget._target">
            Unmanaged target. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.PlatformJniTarget._marsh">
            Marshaller. 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.PlatformJniTarget.#ctor(Apache.Ignite.Core.Impl.Unmanaged.IUnmanagedTarget,Apache.Ignite.Core.Impl.Binary.Marshaller)">
            <summary>
            Constructor.
            </summary>
            <param name="target">Target.</param>
            <param name="marsh">Marshaller.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.PlatformJniTarget.InStreamOutLong(System.Int32,System.Action{Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream})">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.PlatformJniTarget.InStreamOutObject(System.Int32,System.Action{Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream})">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.PlatformJniTarget.OutObjectInternal(System.Int32)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.PlatformJniTarget.OutStream``1(System.Int32,System.Func{Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream,``0})">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.PlatformJniTarget.InStreamOutStream``1(System.Int32,System.Action{Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream},System.Func{Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream,``0})">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.PlatformJniTarget.InStreamOutLong``1(System.Int32,System.Action{Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream},System.Func{Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream,System.Int64,``0},System.Func{Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream,System.Exception})">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.PlatformJniTarget.InObjectStreamOutObjectStream``1(System.Int32,System.Action{Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream},System.Func{Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream,Apache.Ignite.Core.Impl.IPlatformTargetInternal,``0},Apache.Ignite.Core.Impl.IPlatformTargetInternal)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.PlatformJniTarget.FinishMarshal(Apache.Ignite.Core.Impl.Binary.BinaryWriter)">
            <summary>
            Finish marshaling.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.PlatformJniTarget.GetFuture``1(System.Func{System.Int64,System.Int32,Apache.Ignite.Core.Impl.Unmanaged.IUnmanagedTarget},System.Boolean,System.Func{Apache.Ignite.Core.Impl.Binary.BinaryReader,``0})">
            <summary>
            Creates a future and starts listening.
            </summary>
            <typeparam name="T">Future result type</typeparam>
            <param name="listenAction">The listen action.</param>
            <param name="keepBinary">Keep binary flag, only applicable to object futures. False by default.</param>
            <param name="convertFunc">The function to read future result from stream.</param>
            <returns>Created future.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.PlatformJniTarget.GetFuture``1(System.Action{System.Int64,System.Int32},System.Boolean,System.Func{Apache.Ignite.Core.Impl.Binary.BinaryReader,``0})">
            <summary>
            Creates a future and starts listening.
            </summary>
            <typeparam name="T">Future result type</typeparam>
            <param name="listenAction">The listen action.</param>
            <param name="keepBinary">Keep binary flag, only applicable to object futures. False by default.</param>
            <param name="convertFunc">The function to read future result from stream.</param>
            <returns>Created future.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.PlatformJniTarget.InLongOutLong(System.Int32,System.Int64)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.PlatformJniTarget.InStreamOutLong(System.Int32,System.Action{Apache.Ignite.Core.Binary.IBinaryRawWriter})">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.PlatformJniTarget.InStreamOutStream``1(System.Int32,System.Action{Apache.Ignite.Core.Binary.IBinaryRawWriter},System.Func{Apache.Ignite.Core.Binary.IBinaryRawReader,``0})">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.PlatformJniTarget.InStreamOutObject(System.Int32,System.Action{Apache.Ignite.Core.Binary.IBinaryRawWriter})">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.PlatformJniTarget.InObjectStreamOutObjectStream``1(System.Int32,Apache.Ignite.Core.Interop.IPlatformTarget,System.Action{Apache.Ignite.Core.Binary.IBinaryRawWriter},System.Func{Apache.Ignite.Core.Binary.IBinaryRawReader,Apache.Ignite.Core.Interop.IPlatformTarget,``0})">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.PlatformJniTarget.OutStream``1(System.Int32,System.Func{Apache.Ignite.Core.Binary.IBinaryRawReader,``0})">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.PlatformJniTarget.OutObject(System.Int32)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.PlatformJniTarget.DoOutOpAsync``1(System.Int32,System.Action{Apache.Ignite.Core.Binary.IBinaryRawWriter},System.Func{Apache.Ignite.Core.Binary.IBinaryRawReader,``0})">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.PlatformJniTarget.DoOutOpAsync``1(System.Int32,System.Action{Apache.Ignite.Core.Binary.IBinaryRawWriter},System.Func{Apache.Ignite.Core.Binary.IBinaryRawReader,``0},System.Threading.CancellationToken)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.PlatformJniTarget.GetPlatformTarget(Apache.Ignite.Core.Impl.Unmanaged.IUnmanagedTarget)">
            <summary>
            Gets the platform target.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.PlatformJniTarget.GetTargetPtr(Apache.Ignite.Core.Interop.IPlatformTarget)">
            <summary>
            Gets the target pointer.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.PlatformJniTarget.Dispose">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.PlatformJniTarget.Target">
            <summary>
            Gets the target.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.PlatformJniTarget.Marshaller">
            <inheritdoc /> 
        </member>
        <member name="T:Apache.Ignite.Core.PersistentStore.CheckpointWriteOrder">
            <summary>
            Defines checkpoint pages order on disk.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.PersistentStore.CheckpointWriteOrder.Random">
            <summary>
            Pages are written in order provided by checkpoint pages collection iterator
            (which is basically a hashtable).
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.PersistentStore.CheckpointWriteOrder.Sequential">
            <summary>
            All checkpoint pages are collected into single list and sorted by page index.
            Provides almost sequential disk writes, which can be much faster on some SSD models.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.PersistentStore.PersistentStoreConfiguration">
            <summary>
            Configures Apache Ignite persistent store.
            <para/>
            Obsolete, use <see cref="T:Apache.Ignite.Core.Configuration.DataStorageConfiguration"/>.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.PersistentStore.PersistentStoreConfiguration.DefaultCheckpointingThreads">
            <summary>
            Default value for <see cref="P:Apache.Ignite.Core.PersistentStore.PersistentStoreConfiguration.CheckpointingThreads"/>.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.PersistentStore.PersistentStoreConfiguration.DefaultWalHistorySize">
            <summary>
            Default value for <see cref="P:Apache.Ignite.Core.PersistentStore.PersistentStoreConfiguration.WalHistorySize"/>.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.PersistentStore.PersistentStoreConfiguration.DefaultWalSegments">
            <summary>
            Default value for <see cref="P:Apache.Ignite.Core.PersistentStore.PersistentStoreConfiguration.WalSegments"/>.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.PersistentStore.PersistentStoreConfiguration.DefaultWalSegmentSize">
            <summary>
            Default value for <see cref="P:Apache.Ignite.Core.PersistentStore.PersistentStoreConfiguration.WalSegmentSize"/>.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.PersistentStore.PersistentStoreConfiguration.DefaultTlbSize">
            <summary>
            Default value for <see cref="P:Apache.Ignite.Core.PersistentStore.PersistentStoreConfiguration.TlbSize"/>.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.PersistentStore.PersistentStoreConfiguration.DefaultWalRecordIteratorBufferSize">
            <summary>
            Default value for <see cref="P:Apache.Ignite.Core.PersistentStore.PersistentStoreConfiguration.WalRecordIteratorBufferSize"/>.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.PersistentStore.PersistentStoreConfiguration.DefaultWalFsyncDelayNanos">
            <summary>
            Default value for <see cref="P:Apache.Ignite.Core.PersistentStore.PersistentStoreConfiguration.WalFsyncDelayNanos"/>.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.PersistentStore.PersistentStoreConfiguration.DefaultSubIntervals">
            <summary>
            The default sub intervals.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.PersistentStore.PersistentStoreConfiguration.DefaultWalStorePath">
            <summary>
            Default value for <see cref="P:Apache.Ignite.Core.PersistentStore.PersistentStoreConfiguration.WalStorePath"/>.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.PersistentStore.PersistentStoreConfiguration.DefaultWalArchivePath">
            <summary>
            Default value for <see cref="P:Apache.Ignite.Core.PersistentStore.PersistentStoreConfiguration.WalArchivePath"/>.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.PersistentStore.PersistentStoreConfiguration.DefaultCheckpointWriteOrder">
            <summary>
            Default value for <see cref="P:Apache.Ignite.Core.PersistentStore.PersistentStoreConfiguration.CheckpointWriteOrder"/>.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.PersistentStore.PersistentStoreConfiguration.DefaultWriteThrottlingEnabled">
            <summary>
            Default value for <see cref="P:Apache.Ignite.Core.PersistentStore.PersistentStoreConfiguration.WriteThrottlingEnabled"/>.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.PersistentStore.PersistentStoreConfiguration.DefaultCheckpointingFrequency">
            <summary>
            Default value for <see cref="P:Apache.Ignite.Core.PersistentStore.PersistentStoreConfiguration.CheckpointingFrequency"/>.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.PersistentStore.PersistentStoreConfiguration.DefaultLockWaitTime">
            <summary>
            Default value for <see cref="P:Apache.Ignite.Core.PersistentStore.PersistentStoreConfiguration.LockWaitTime"/>.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.PersistentStore.PersistentStoreConfiguration.DefaultWalFlushFrequency">
            <summary>
            Default value for <see cref="P:Apache.Ignite.Core.PersistentStore.PersistentStoreConfiguration.WalFlushFrequency"/>.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.PersistentStore.PersistentStoreConfiguration.DefaultRateTimeInterval">
            <summary>
            The default rate time interval.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.PersistentStore.PersistentStoreConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.PersistentStore.PersistentStoreConfiguration"/> class.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.PersistentStore.PersistentStoreConfiguration.#ctor(Apache.Ignite.Core.Binary.IBinaryRawReader)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.PersistentStore.PersistentStoreConfiguration"/> class.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:Apache.Ignite.Core.PersistentStore.PersistentStoreConfiguration.Write(Apache.Ignite.Core.Binary.IBinaryRawWriter)">
            <summary>
            Writes this instance to the specified writer.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="P:Apache.Ignite.Core.PersistentStore.PersistentStoreConfiguration.PersistentStorePath">
            <summary>
            Gets or sets the path where data and indexes will be persisted.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.PersistentStore.PersistentStoreConfiguration.CheckpointingFrequency">
            <summary>
            Gets or sets the checkpointing frequency which is a minimal interval when the dirty pages will be written
            to the Persistent Store.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.PersistentStore.PersistentStoreConfiguration.CheckpointingPageBufferSize">
            <summary>
            Gets or sets the size of the checkpointing page buffer.
            <para />
            Default is <c>0</c>: Ignite will choose buffer size automatically.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.PersistentStore.PersistentStoreConfiguration.CheckpointingThreads">
            <summary>
            Gets or sets the number of threads for checkpointing.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.PersistentStore.PersistentStoreConfiguration.LockWaitTime">
            <summary>
            Gets or sets the persistent manager file lock wait time.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.PersistentStore.PersistentStoreConfiguration.WalHistorySize">
            <summary>
            Gets or sets the number of checkpoints to store in WAL (Write Ahead Log) history.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.PersistentStore.PersistentStoreConfiguration.WalSegments">
            <summary>
            Gets or sets a number of WAL (Write Ahead Log) segments to work with.
            For performance reasons, the whole WAL is split into files of fixed length called segments.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.PersistentStore.PersistentStoreConfiguration.WalSegmentSize">
            <summary>
            Gets or sets the size of the WAL (Write Ahead Log) segment.
            For performance reasons, the whole WAL is split into files of fixed length called segments.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.PersistentStore.PersistentStoreConfiguration.WalStorePath">
            <summary>
            Gets or sets the path to the directory where WAL (Write Ahead Log) is stored.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.PersistentStore.PersistentStoreConfiguration.WalArchivePath">
            <summary>
            Gets or sets the path to the directory where WAL (Write Ahead Log) archive is stored.
            Every WAL segment will be fully copied to this directory before it can be reused for WAL purposes.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.PersistentStore.PersistentStoreConfiguration.WalMode">
            <summary>
            Gets or sets the WAL (Write Ahead Log) mode.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.PersistentStore.PersistentStoreConfiguration.TlbSize">
            <summary>
            Gets or sets the size of the TLB (Thread-Local Buffer), in bytes.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.PersistentStore.PersistentStoreConfiguration.WalFlushFrequency">
            <summary>
            Gets or sets the WAL (Write Ahead Log) flush frequency.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.PersistentStore.PersistentStoreConfiguration.WalFsyncDelayNanos">
            <summary>
            Gets or sets the WAL (Write Ahead Log) fsync (disk sync) delay, in nanoseconds
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.PersistentStore.PersistentStoreConfiguration.WalRecordIteratorBufferSize">
            <summary>
            Gets or sets the size of the WAL (Write Ahead Log) record iterator buffer, in bytes.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.PersistentStore.PersistentStoreConfiguration.AlwaysWriteFullPages">
            <summary>
            Gets or sets a value indicating whether full pages should always be written.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.PersistentStore.PersistentStoreConfiguration.MetricsEnabled">
            <summary>
            Gets or sets a value indicating whether to enable persistent store metrics.
            See <see cref="M:Apache.Ignite.Core.IIgnite.GetPersistentStoreMetrics"/>.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.PersistentStore.PersistentStoreConfiguration.RateTimeInterval">
            <summary>
            Gets or sets the length of the time interval for rate-based metrics.
            This interval defines a window over which hits will be tracked.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.PersistentStore.PersistentStoreConfiguration.SubIntervals">
            <summary>
            Number of sub-intervals to split the <see cref="P:Apache.Ignite.Core.PersistentStore.PersistentStoreConfiguration.RateTimeInterval"/> into to track the update history.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.PersistentStore.PersistentStoreConfiguration.CheckpointWriteOrder">
            <summary>
            Gets or sets the checkpoint page write order on disk.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.PersistentStore.PersistentStoreConfiguration.WriteThrottlingEnabled">
            <summary>
            Gets or sets a value indicating whether threads that generate dirty
            pages too fast during ongoing checkpoint will be throttled.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Configuration.SqlConnectorConfiguration">
            <summary>
            SQL connector configuration (for ODBC and JDBC).
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Configuration.SqlConnectorConfiguration.DefaultPort">
            <summary>
            Default port.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Configuration.SqlConnectorConfiguration.DefaultPortRange">
            <summary>
            Default port range.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Configuration.SqlConnectorConfiguration.DefaultSocketBufferSize">
            <summary>
            Default socket buffer size.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Configuration.SqlConnectorConfiguration.DefaultTcpNoDelay">
            <summary>
            Default value of <see cref="P:Apache.Ignite.Core.Configuration.SqlConnectorConfiguration.TcpNoDelay"/> property.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Configuration.SqlConnectorConfiguration.DefaultMaxOpenCursorsPerConnection">
            <summary>
            Default maximum number of open cursors per connection.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Configuration.SqlConnectorConfiguration.DefaultThreadPoolSize">
            <summary>
            Default SQL connector thread pool size.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Configuration.SqlConnectorConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Configuration.SqlConnectorConfiguration"/> class.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Configuration.SqlConnectorConfiguration.#ctor(Apache.Ignite.Core.Binary.IBinaryRawReader)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Configuration.SqlConnectorConfiguration"/> class.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Configuration.SqlConnectorConfiguration.Write(Apache.Ignite.Core.Binary.IBinaryRawWriter)">
            <summary>
            Writes to the specified writer.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Configuration.SqlConnectorConfiguration.Host">
            <summary>
            Gets or sets the host.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Configuration.SqlConnectorConfiguration.Port">
            <summary>
            Gets or sets the port.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Configuration.SqlConnectorConfiguration.PortRange">
            <summary>
            Gets or sets the port range.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Configuration.SqlConnectorConfiguration.SocketSendBufferSize">
            <summary>
            Gets or sets the size of the socket send buffer. When set to 0, operating system default is used.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Configuration.SqlConnectorConfiguration.SocketReceiveBufferSize">
            <summary>
            Gets or sets the size of the socket receive buffer. When set to 0, operating system default is used.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Configuration.SqlConnectorConfiguration.TcpNoDelay">
            <summary>
            Gets or sets the value for <c>TCP_NODELAY</c> socket option. Each
            socket will be opened using provided value.
            <para />
            Setting this option to <c>true</c> disables Nagle's algorithm
            for socket decreasing latency and delivery time for small messages.
            <para />
            For systems that work under heavy network load it is advisable to set this value to <c>false</c>.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Configuration.SqlConnectorConfiguration.MaxOpenCursorsPerConnection">
            <summary>
            Gets or sets the maximum open cursors per connection.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Configuration.SqlConnectorConfiguration.ThreadPoolSize">
            <summary>
            Gets or sets the size of the thread pool.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.PersistentStore.WalMode">
            <summary>
            Write Ahead Log mode.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.PersistentStore.WalMode.Default">
            <summary>
            Default mode: full-sync disk writes. These writes survive power loss scenarios.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.PersistentStore.WalMode.LogOnly">
            <summary>
            Log only mode: flushes application buffers. These writes survive process crash.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.PersistentStore.WalMode.Background">
            <summary>
            Background mode. Does not force application buffer flush. Data may be lost in case of process crash.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.PersistentStore.WalMode.None">
            <summary>
            WAL disabled.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Deployment.PeerAssemblyLoadingMode">
            <summary>
            Peer assembly loading mode.
            See <see cref="P:Apache.Ignite.Core.IgniteConfiguration.PeerAssemblyLoadingMode"/>.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Deployment.PeerAssemblyLoadingMode.Disabled">
            <summary>
            Disabled peer assembly loading. Default mode.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Deployment.PeerAssemblyLoadingMode.CurrentAppDomain">
            <summary>
            Automatically load assemblies from remote nodes into the current <see cref="T:System.AppDomain"/>.
            <para/>
            .NET does not allow assembly unloading, which means that all peer-loaded assemblies will
            live as long as the current AppDomain lives. This may cause increased memory usage.
            <para/>
            Assemblies are distinguished using their fully qualified name. Multiple versions of the same assembly can
            be loaded and the correct version will be used (according to Type.AssemblyQualifiedName).
            So in case when a new version of some type needs to be executed on remote nodes,
            corresponding assembly version should be bumped up. If assembly is recompiled without version increment,
            it is considered the same as before and won't be updated.
            <para/>
            Assemblies are requested from remote nodes on demand.
            For example, <see cref="T:Apache.Ignite.Core.Compute.IComputeFunc`1"/> is sent to all nodes
            via <see cref="M:Apache.Ignite.Core.Compute.ICompute.Broadcast``1(Apache.Ignite.Core.Compute.IComputeFunc{``0})"/>. Each node then deserializes the instance and,
            if containing assembly is not present, requests it from originating node (which did the
            <see cref="M:Apache.Ignite.Core.Compute.ICompute.Broadcast``1(Apache.Ignite.Core.Compute.IComputeFunc{``0})"/> call), if it is alive, or from any other node in cluster.
            Therefore it is possible that eventually all nodes in cluster will have this assebly loaded.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Events.IEventStorageSpi">
            <summary>
            Manages local event storage.
            <para/>
            Only predefined implementations are supported: 
            <see cref="T:Apache.Ignite.Core.Events.NoopEventStorageSpi"/>, <see cref="T:Apache.Ignite.Core.Events.MemoryEventStorageSpi"/>.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Events.MemoryEventStorageSpi">
            <summary>
            In-memory event storage.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Events.MemoryEventStorageSpi.DefaultMaxEventCount">
            <summary>
            Default event count limit.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Events.MemoryEventStorageSpi.DefaultExpirationTimeout">
            <summary>
            The default expiration timeout.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Events.MemoryEventStorageSpi.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Events.MemoryEventStorageSpi"/> class.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Events.MemoryEventStorageSpi.Read(Apache.Ignite.Core.Binary.IBinaryRawReader)">
            <summary>
            Reads instance.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Events.MemoryEventStorageSpi.Write(Apache.Ignite.Core.Binary.IBinaryRawWriter)">
            <summary>
            Writes this instance.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Events.MemoryEventStorageSpi.ExpirationTimeout">
            <summary>
            Gets or sets the expiration timeout for stored events.
            Negative value means no expiration.
            Defaults to -1 second.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Events.MemoryEventStorageSpi.MaxEventCount">
            <summary>
            Gets or sets the maximum event count to store. When this limit is reached, older events are removed.
            Defaults to <see cref="F:Apache.Ignite.Core.Events.MemoryEventStorageSpi.DefaultMaxEventCount"/>.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Events.NoopEventStorageSpi">
            <summary>
            No-op event storage interface, does not store anything.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Binary.BinaryReflectiveSerializer">
            <summary>
            Binary serializer which reflectively writes all fields except of ones with 
            <see cref="T:System.NonSerializedAttribute"/>.
            <para/>
            Note that Java platform stores dates as a difference between current time 
            and predefined absolute UTC date. Therefore, this difference is always the 
            same for all time zones. .NET, in contrast, stores dates as a difference 
            between current time and some predefined date relative to the current time 
            zone. It means that this difference will be different as you change time zones. 
            To overcome this discrepancy Ignite always converts .Net date to UTC form 
            before serializing and allows user to decide whether to deserialize them 
            in UTC or local form using <c>ReadTimestamp(..., true/false)</c> methods in 
            <see cref="T:Apache.Ignite.Core.Binary.IBinaryReader"/> and <see cref="T:Apache.Ignite.Core.Binary.IBinaryRawReader"/>.
            This serializer always read dates in UTC form. It means that if you have
            local date in any field/property, it will be implicitly converted to UTC
            form after the first serialization-deserialization cycle. 
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Binary.IBinarySerializer">
            <summary>
            Binary serializer. 
            </summary> 
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinarySerializer.WriteBinary(System.Object,Apache.Ignite.Core.Binary.IBinaryWriter)">
            <summary>
            Write binary object.
            </summary>
            <param name="obj">Object.</param>
            <param name="writer">Binary writer.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinarySerializer.ReadBinary(System.Object,Apache.Ignite.Core.Binary.IBinaryReader)">
            <summary>
            Read binary object.
            </summary>
            <param name="obj">Instantiated empty object.</param>
            <param name="reader">Binary reader.</param>
        </member>
        <member name="F:Apache.Ignite.Core.Binary.BinaryReflectiveSerializer._rawMode">
            Raw mode flag. 
        </member>
        <member name="F:Apache.Ignite.Core.Binary.BinaryReflectiveSerializer._isInUse">
            In use flag. 
        </member>
        <member name="F:Apache.Ignite.Core.Binary.BinaryReflectiveSerializer._forceTimestamp">
            Force timestamp flag. 
        </member>
        <member name="M:Apache.Ignite.Core.Binary.BinaryReflectiveSerializer.WriteBinary(System.Object,Apache.Ignite.Core.Binary.IBinaryWriter)">
            <summary>
            Write binary object.
            </summary>
            <param name="obj">Object.</param>
            <param name="writer">Binary writer.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.BinaryReflectiveSerializer.ReadBinary(System.Object,Apache.Ignite.Core.Binary.IBinaryReader)">
            <summary>
            Read binary object.
            </summary>
            <param name="obj">Instantiated empty object.</param>
            <param name="reader">Binary reader.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.BinaryReflectiveSerializer.Register(System.Type,System.Int32,Apache.Ignite.Core.Binary.IBinaryNameMapper,Apache.Ignite.Core.Binary.IBinaryIdMapper)">
            <summary>
            Registers the specified type.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.BinaryReflectiveSerializer.ThrowIfInUse">
            <summary>
            Throws an exception if this instance is already in use.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Binary.BinaryReflectiveSerializer.RawMode">
            <summary>
            Gets or value indicating whether raw mode serialization should be used.
            <para />
            Raw mode does not include field names, improving performance and memory usage.
            However, queries do not support raw objects.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Binary.BinaryReflectiveSerializer.ForceTimestamp">
            <summary>
            Gets or sets a value indicating whether all DateTime values should be written as Timestamp.
            <para/>
            Timestamp format is required for values used in SQL and for interoperation with other platforms.
            Only UTC values are supported in Timestamp format. Other values will cause an exception on write.
            <para/>
            Normally serializer uses <see cref="M:Apache.Ignite.Core.Binary.IBinaryWriter.WriteObject``1(System.String,``0)"/> for DateTime fields.
            This attribute changes the behavior to <see cref="M:Apache.Ignite.Core.Binary.IBinaryWriter.WriteTimestamp(System.String,System.Nullable{System.DateTime})"/>.
            <para/>
            See also <see cref="T:Apache.Ignite.Core.Binary.TimestampAttribute"/>.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Common.JavaException">
            <summary>
            Indicates an error on Java side and contains full Java stack trace.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Common.JavaException.JavaClassNameField">
            JavaClassName field. 
        </member>
        <member name="F:Apache.Ignite.Core.Common.JavaException.JavaMessageField">
            JavaMessage field. 
        </member>
        <member name="F:Apache.Ignite.Core.Common.JavaException._javaClassName">
            Java exception class name. 
        </member>
        <member name="F:Apache.Ignite.Core.Common.JavaException._javaMessage">
            Java exception message. 
        </member>
        <member name="M:Apache.Ignite.Core.Common.JavaException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Common.JavaException"/> class.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Common.JavaException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Common.JavaException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Common.JavaException.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Common.JavaException"/> class.
            </summary>
            <param name="javaClassName">Java exception class name.</param>
            <param name="javaMessage">Java exception message.</param>
            <param name="stackTrace">Java stack trace.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Common.JavaException.#ctor(System.String,System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Common.JavaException"/> class.
            </summary>
            <param name="javaClassName">Java exception class name.</param>
            <param name="javaMessage">Java exception message.</param>
            <param name="stackTrace">Java stack trace.</param>
            <param name="cause">The cause.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Common.JavaException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Common.JavaException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="cause">The cause.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Common.JavaException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Common.JavaException"/> class.
            </summary>
            <param name="info">Serialization information.</param>
            <param name="ctx">Streaming context.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Common.JavaException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> 
            with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data
            about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information
            about the source or destination.</param>
        </member>
        <member name="P:Apache.Ignite.Core.Common.JavaException.JavaClassName">
            <summary>
            Gets the Java exception class name.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Common.JavaException.JavaMessage">
            <summary>
            Gets the Java exception message.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Binary.BinaryArrayEqualityComparer">
            <summary>
            Compares binary object equality using underlying byte array.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryArrayEqualityComparer.HashCodeProcessor">
            
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryArrayEqualityComparer.Equals(Apache.Ignite.Core.Binary.IBinaryObject,Apache.Ignite.Core.Binary.IBinaryObject)">
            <summary>
            Determines whether the specified objects are equal.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            true if the specified objects are equal; otherwise, false.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryArrayEqualityComparer.GetHashCode(Apache.Ignite.Core.Binary.IBinaryObject)">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <param name="obj">The object.</param>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryArrayEqualityComparer.GetHashCode(Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream,System.Int32,System.Int32)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryArrayEqualityComparer.GetBinaryObject(Apache.Ignite.Core.Binary.IBinaryObject)">
            <summary>
            Casts to <see cref="T:Apache.Ignite.Core.Impl.Binary.BinaryObject"/> or throws an error.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryArrayEqualityComparer.GetDataLength(Apache.Ignite.Core.Impl.Binary.BinaryObject)">
            <summary>
            Gets the non-raw data length.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryArrayEqualityComparer.GetDataStart(Apache.Ignite.Core.Impl.Binary.BinaryObject)">
            <summary>
            Gets the data starting position.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Binary.BinaryArrayEqualityComparer.HashStreamProcessor">
            <summary>
            Hash code calculating stream processor.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Binary.IO.IBinaryStreamProcessor`2">
            <summary>
            Binary stream processor.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.IBinaryStreamProcessor`2.Invoke(System.Byte*,`0)">
            <summary>
            Invokes the processor.
            </summary>
            <param name="data">Data.</param>
            <param name="arg">Argument.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryArrayEqualityComparer.HashStreamProcessor.Invoke(System.Byte*,System.Collections.Generic.KeyValuePair{System.Int32,System.Int32})">
            <inheritdoc /> 
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Binary.BinaryProcessor">
            <summary>
            Binary metadata processor, delegates to PlatformBinaryProcessor in Java.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryProcessor.#ctor(Apache.Ignite.Core.Impl.IPlatformTargetInternal)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Impl.Binary.BinaryProcessor"/> class.
            </summary>
            <param name="target">Target.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryProcessor.GetBinaryType(System.Int32)">
            <summary>
            Gets metadata for specified type.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryProcessor.GetBinaryTypes">
            <summary>
            Gets metadata for all known types.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryProcessor.GetSchema(System.Int32,System.Int32)">
            <summary>
            Gets the schema.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryProcessor.PutBinaryTypes(System.Collections.Generic.ICollection{Apache.Ignite.Core.Impl.Binary.Metadata.BinaryType})">
            <summary>
            Put binary types to Grid.
            </summary>
            <param name="types">Binary types.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryProcessor.RegisterType(System.Int32,System.String)">
            <summary>
            Registers the type.
            </summary>
            <param name="id">The identifier.</param>
            <param name="typeName">The type name.</param>
            <returns>True if registration succeeded; otherwise, false.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryProcessor.RegisterEnum(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Int32}})">
            <summary>
            Registers the enum.
            </summary>
            <param name="typeName">Name of the type.</param>
            <param name="values">The values.</param>
            <returns>Resulting binary type.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryProcessor.GetTypeName(System.Int32)">
            <summary>
            Gets the type name by id.
            </summary>
            <param name="id">The identifier.</param>
            <returns>Type or null.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryProcessor.WriteBinaryTypes(Apache.Ignite.Core.Impl.Binary.BinaryWriter,System.Collections.Generic.ICollection{Apache.Ignite.Core.Impl.Binary.Metadata.BinaryType})">
            <summary>
            Writes the binary types.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryProcessor.WriteBinaryType(Apache.Ignite.Core.Impl.Binary.BinaryWriter,Apache.Ignite.Core.Impl.Binary.Metadata.BinaryType)">
            <summary>
            Writes the binary type.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Binary.BinaryProcessor.Op">
            <summary>
            Op codes.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Binary.BinaryReflectiveSerializerInternal">
            <summary>
            Internal reflective serializer.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Binary.IBinarySerializerInternal">
            <summary>
            Internal generic serializer interface.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IBinarySerializerInternal.WriteBinary``1(``0,Apache.Ignite.Core.Impl.Binary.BinaryWriter)">
            <summary>
            Write binary object.
            </summary>
            <param name="obj">The object.</param>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IBinarySerializerInternal.ReadBinary``1(Apache.Ignite.Core.Impl.Binary.BinaryReader,Apache.Ignite.Core.Impl.Binary.IBinaryTypeDescriptor,System.Int32,System.Type)">
            <summary>
            Read binary object.
            </summary>
            <param name="reader">The reader.</param>
            <param name="desc">The descriptor.</param>
            <param name="pos">The position.</param>
            <param name="typeOverride">Type override, can be null.</param>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.IBinarySerializerInternal.SupportsHandles">
            <summary>
            Gets a value indicating whether this serializer supports handles.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryReflectiveSerializerInternal._rawMode">
            Raw mode flag. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryReflectiveSerializerInternal._wActions">
            Write actions to be performed. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryReflectiveSerializerInternal._rActions">
            Read actions to be performed. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryReflectiveSerializerInternal._serializableDescriptor">
            Callback type descriptor. 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryReflectiveSerializerInternal.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Binary.BinaryReflectiveSerializer"/> class.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryReflectiveSerializerInternal.#ctor(Apache.Ignite.Core.Impl.Binary.BinaryReflectiveWriteAction[],Apache.Ignite.Core.Impl.Binary.BinaryReflectiveReadAction[],System.Boolean,Apache.Ignite.Core.Impl.Common.SerializableTypeDescriptor)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Binary.BinaryReflectiveSerializer"/> class.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryReflectiveSerializerInternal.Apache#Ignite#Core#Impl#Binary#IBinarySerializerInternal#WriteBinary``1(``0,Apache.Ignite.Core.Impl.Binary.BinaryWriter)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryReflectiveSerializerInternal.Apache#Ignite#Core#Impl#Binary#IBinarySerializerInternal#ReadBinary``1(Apache.Ignite.Core.Impl.Binary.BinaryReader,Apache.Ignite.Core.Impl.Binary.IBinaryTypeDescriptor,System.Int32,System.Type)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryReflectiveSerializerInternal.Register(System.Type,System.Int32,Apache.Ignite.Core.Binary.IBinaryNameMapper,Apache.Ignite.Core.Binary.IBinaryIdMapper,System.Boolean)">
            <summary>
            Register type.
            </summary>
            <param name="type">Type.</param>
            <param name="typeId">Type ID.</param>
            <param name="converter">Name converter.</param>
            <param name="idMapper">ID mapper.</param>
            <param name="forceTimestamp">Force timestamp serialization for DateTime fields..</param>
            <returns>Resulting serializer.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryReflectiveSerializerInternal.Compare(System.Reflection.FieldInfo,System.Reflection.FieldInfo)">
            <summary>
            Compare two FieldInfo instances. 
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryReflectiveSerializerInternal.GetStreamingContext(Apache.Ignite.Core.Binary.IBinaryReader)">
            <summary>
            Gets the streaming context.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryReflectiveSerializerInternal.GetStreamingContext(Apache.Ignite.Core.Binary.IBinaryWriter)">
            <summary>
            Gets the streaming context.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.BinaryReflectiveSerializerInternal.Apache#Ignite#Core#Impl#Binary#IBinarySerializerInternal#SupportsHandles">
            <inheritdoc /> 
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Deployment.AssemblyLoader">
            <summary>
            Handles assembly loading and serialization.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Deployment.AssemblyLoader.InMemoryAssemblies">
            <summary>
            Cache of assemblies that are peer-loaded from byte array.
            Keep these byte arrays to be able to send them further, because Location for such assemblies is empty.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Deployment.AssemblyLoader.LoadAssembly(System.Byte[],System.String)">
            <summary>
            Loads the assembly from bytes outside of any context.
            Resulting assembly can only be retrieved with <see cref="M:Apache.Ignite.Core.Impl.Deployment.AssemblyLoader.GetAssembly(System.String)"/> call later.
            It won't be located with <see cref="M:System.Type.GetType"/> call.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Deployment.AssemblyLoader.GetAssemblyBytes(System.String)">
            <summary>
            Gets the assembly.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Deployment.AssemblyLoader.GetAssembly(System.String)">
            <summary>
            Gets the assembly.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Deployment.AssemblyLoader.GetAssemblyBytes(System.Reflection.Assembly)">
            <summary>
            Gets the assembly bytes.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Deployment.AssemblyRequest">
            <summary>
            Peer assembly request.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Binary.IBinaryWriteAware">
            <summary>
            Represents an object that can write itself to a binary writer.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IBinaryWriteAware.WriteBinary(Apache.Ignite.Core.Binary.IBinaryWriter)">
            <summary>
            Writes this object to the given writer.
            </summary> 
            <param name="writer">Writer.</param>
            <exception cref="T:System.IO.IOException">If write failed.</exception>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Deployment.AssemblyRequest._assemblyName">
            
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Deployment.AssemblyRequest.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Impl.Deployment.AssemblyRequest"/> class.
            </summary>
            <param name="assemblyName">Name of the assembly.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Deployment.AssemblyRequest.#ctor(Apache.Ignite.Core.Binary.IBinaryRawReader)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Impl.Deployment.AssemblyRequest"/> class.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Deployment.AssemblyRequest.WriteBinary(Apache.Ignite.Core.Binary.IBinaryWriter)">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Deployment.AssemblyRequest.AssemblyName">
            <summary>
            Gets the name of the assembly.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Deployment.AssemblyRequestResult">
            <summary>
            Peer assembly request result.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Deployment.AssemblyRequestResult._assemblyBytes">
            Assembly bytes. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Deployment.AssemblyRequestResult._message">
            Error message. 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Deployment.AssemblyRequestResult.#ctor(System.Byte[],System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Impl.Deployment.AssemblyRequestResult"/> class.
            </summary>
            <param name="assemblyBytes">The assembly bytes.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Deployment.AssemblyRequestResult.#ctor(Apache.Ignite.Core.Binary.IBinaryRawReader)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Impl.Deployment.AssemblyRequestResult"/> class.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Deployment.AssemblyRequestResult.WriteBinary(Apache.Ignite.Core.Binary.IBinaryWriter)">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Deployment.AssemblyRequestResult.AssemblyBytes">
            <summary>
            Gets the assembly bytes.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Deployment.AssemblyRequestResult.Message">
            <summary>
            Gets the message.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Deployment.GetAssemblyFunc">
            <summary>
            Compute func that returns assembly for a specified name.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Compute.IComputeFunc`2">
            <summary>
            Defines function having a single argument.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Compute.IComputeFunc`2.Invoke(`0)">
            <summary>
            Invoke function.
            </summary>
            <param name="arg">Argument.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Deployment.GetAssemblyFunc.Invoke(Apache.Ignite.Core.Impl.Deployment.AssemblyRequest)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Deployment.GetAssemblyFunc.WriteBinary(Apache.Ignite.Core.Binary.IBinaryWriter)">
            <inheritdoc /> 
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Deployment.PeerAssemblyResolver">
            <summary>
            Loads assemblies from other nodes.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Deployment.PeerAssemblyResolver._handler">
            Assembly resolve handler. 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Deployment.PeerAssemblyResolver.#ctor(Apache.Ignite.Core.Impl.IIgniteInternal,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Impl.Deployment.PeerAssemblyResolver"/> class.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Deployment.PeerAssemblyResolver.Dispose">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Deployment.PeerAssemblyResolver.GetInstance(Apache.Ignite.Core.Impl.IIgniteInternal,System.Guid)">
            <summary>
            Gets an instance of <see cref="T:Apache.Ignite.Core.Impl.Deployment.PeerAssemblyResolver"/> when peer loading is enabled; otherwise null.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Deployment.PeerAssemblyResolver.LoadAssemblyAndGetType(System.String,Apache.Ignite.Core.Impl.IIgniteInternal,System.Guid)">
            <summary>
            Gets the assembly from remote nodes.
            </summary>
            <param name="typeName">Assembly-qualified type name.</param>
            <param name="ignite">Ignite.</param>
            <param name="originNodeId">Originating node identifier.</param>
            <returns>
            Resulting type or null.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Deployment.PeerAssemblyResolver.GetAssembly(Apache.Ignite.Core.Impl.IIgniteInternal,System.String,System.Guid)">
            <summary>
            Gets the assembly.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Deployment.PeerAssemblyResolver.LoadAssembly(Apache.Ignite.Core.Impl.IIgniteInternal,System.String,System.Guid)">
            <summary>
            Loads the assembly.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Deployment.PeerAssemblyResolver.RequestAssembly(System.String,Apache.Ignite.Core.Impl.IIgniteInternal,System.Guid)">
            <summary>
            Gets the assembly from remote nodes.
            </summary>
            <param name="assemblyName">Name of the assembly.</param>
            <param name="ignite">Ignite.</param>
            <param name="originNodeId">The origin node identifier.</param>
            <returns>
            Successful result or null.
            </returns>
            <exception cref="T:Apache.Ignite.Core.Common.IgniteException"></exception>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Deployment.PeerAssemblyResolver.GetDotNetNodes(Apache.Ignite.Core.IIgnite,System.Guid)">
            <summary>
            Gets the dot net nodes, origin node comes first.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Deployment.PeerAssemblyResolver.ComputeApplySafe(Apache.Ignite.Core.Compute.ICompute,Apache.Ignite.Core.Impl.Deployment.GetAssemblyFunc,Apache.Ignite.Core.Impl.Deployment.AssemblyRequest)">
            <summary>
            Performs computation ignoring leaving nodes.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Deployment.PeerLoadingExtensions">
            <summary>
            Reader and Writer extensions for peer deployment.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Deployment.PeerLoadingExtensions.WrapperFunc">
            
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Deployment.PeerLoadingExtensions.WriteWithPeerDeployment(Apache.Ignite.Core.Impl.Binary.BinaryWriter,System.Object)">
            <summary>
            Writes the object with peer deployment (when enabled) or normally otherwise.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Deployment.PeerLoadingExtensions.IsPeerAssemblyLoadingEnabled(Apache.Ignite.Core.Impl.Binary.Marshaller)">
            <summary>
            Determines whether peer loading is enabled.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Deployment.PeerLoadingObjectHolder">
            <summary>
            Holds an object which can have it's assembly automatically loaded on remote nodes.
            
            Contains assembly-qualified type name.
            Types from assemblies with different versions can coexist and will be differentiated properly.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Deployment.PeerLoadingObjectHolder._object">
            Object. 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Deployment.PeerLoadingObjectHolder.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Impl.Deployment.PeerLoadingObjectHolder"/> class.
            </summary>
            <param name="o">The object.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Deployment.PeerLoadingObjectHolder.#ctor(Apache.Ignite.Core.Impl.Binary.BinaryReader)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Impl.Deployment.PeerLoadingObjectHolder"/> class.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Deployment.PeerLoadingObjectHolder.WriteBinary(Apache.Ignite.Core.Binary.IBinaryWriter)">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Deployment.PeerLoadingObjectHolder.Object">
            <summary>
            Gets the object.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Deployment.PeerLoadingObjectHolderSerializer">
            <summary>
            Serializer for <see cref="T:Apache.Ignite.Core.Impl.Deployment.PeerLoadingObjectHolder"/>. Unwraps underlying object automatically.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Deployment.PeerLoadingObjectHolderSerializer.WriteBinary``1(``0,Apache.Ignite.Core.Impl.Binary.BinaryWriter)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Deployment.PeerLoadingObjectHolderSerializer.ReadBinary``1(Apache.Ignite.Core.Impl.Binary.BinaryReader,Apache.Ignite.Core.Impl.Binary.IBinaryTypeDescriptor,System.Int32,System.Type)">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Deployment.PeerLoadingObjectHolderSerializer.SupportsHandles">
            <inheritdoc /> 
        </member>
        <member name="T:Apache.Ignite.Core.Cache.Affinity.AffinityKey">
            <summary>
            Optional wrapper for cache keys to provide support for custom affinity mapping.
            The value returned by <see cref="P:Apache.Ignite.Core.Cache.Affinity.AffinityKey.Affinity"/> will be used for key-to-node affinity.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Cache.Affinity.AffinityKey._key">
            User key. 
        </member>
        <member name="F:Apache.Ignite.Core.Cache.Affinity.AffinityKey._affinity">
            Affinity key. 
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Affinity.AffinityKey.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Cache.Affinity.AffinityKey"/> struct.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Affinity.AffinityKey.#ctor(System.Object,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Cache.Affinity.AffinityKey"/> struct.
            </summary>
            <param name="key">The key.</param>
            <param name="affinity">The affinity key.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Affinity.AffinityKey.#ctor(Apache.Ignite.Core.Binary.IBinaryReader)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Cache.Affinity.AffinityKey"/> struct.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Affinity.AffinityKey.WriteBinary(Apache.Ignite.Core.Binary.IBinaryWriter)">
            <summary>
            Writes this object to the given writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Affinity.AffinityKey.Equals(Apache.Ignite.Core.Cache.Affinity.AffinityKey)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Affinity.AffinityKey.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/>, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Affinity.AffinityKey.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Affinity.AffinityKey.op_Equality(Apache.Ignite.Core.Cache.Affinity.AffinityKey,Apache.Ignite.Core.Cache.Affinity.AffinityKey)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Affinity.AffinityKey.op_Inequality(Apache.Ignite.Core.Cache.Affinity.AffinityKey,Apache.Ignite.Core.Cache.Affinity.AffinityKey)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Affinity.AffinityKey.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Affinity.AffinityKey.Key">
            <summary>
            Gets the key.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Affinity.AffinityKey.Affinity">
            <summary>
            Gets the affinity key.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Cache.Affinity.AffinityKeyMappedAttribute">
            <summary>
            Specifies cache key field to be used to determine a node on which given cache key will be stored.
            Only one field or property can be marked with this attribute.
            <para/>
            This attribute is an alternative to <see cref="P:Apache.Ignite.Core.Binary.BinaryTypeConfiguration.AffinityKeyFieldName"/> setting.
            This attribute has lower priority than <see cref="P:Apache.Ignite.Core.Binary.BinaryTypeConfiguration.AffinityKeyFieldName"/> setting.
            <para/>
            One of the major use cases for this attribute is the routing of grid computations
            to the nodes where the data for this computation is cached, the concept otherwise known as 
            Colocation Of Computations And Data.
            <para/>
            For example, if a Person object is always accessed together with a Company object for which this person 
            is an employee, then for better performance and scalability it makes sense to colocate Person objects 
            together with their Company object when storing them in cache. 
            To achieve that, cache key used to cache Person objects should have a field or property marked with
            <see cref="T:Apache.Ignite.Core.Cache.Affinity.AffinityKeyMappedAttribute"/> attribute, which will provide the value of 
            the company key for which that person works.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Cache.Affinity.AffinityFunctionContext">
            <summary>
            Affinity function context.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Cache.Affinity.AffinityFunctionContext._previousAssignment">
            
        </member>
        <member name="F:Apache.Ignite.Core.Cache.Affinity.AffinityFunctionContext._backups">
            
        </member>
        <member name="F:Apache.Ignite.Core.Cache.Affinity.AffinityFunctionContext._currentTopologySnapshot">
            
        </member>
        <member name="F:Apache.Ignite.Core.Cache.Affinity.AffinityFunctionContext._currentTopologyVersion">
            
        </member>
        <member name="F:Apache.Ignite.Core.Cache.Affinity.AffinityFunctionContext._discoveryEvent">
            
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Affinity.AffinityFunctionContext.#ctor(Apache.Ignite.Core.Impl.Binary.BinaryReader)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Cache.Affinity.AffinityFunctionContext"/> class.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Affinity.AffinityFunctionContext.GetPreviousAssignment(System.Int32)">
            <summary>
            Gets the affinity assignment for given partition on previous topology version.
            First node in returned list is a primary node, other nodes are backups.
            </summary>
            <param name="partition">The partition to get previous assignment for.</param>
            <returns>
            List of nodes assigned to a given partition on previous topology version or <code>null</code>
            if this information is not available.
            </returns>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Affinity.AffinityFunctionContext.Backups">
            <summary>
            Gets number of backups for new assignment.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Affinity.AffinityFunctionContext.CurrentTopologySnapshot">
            <summary>
            Gets the current topology snapshot. Snapshot will contain only nodes on which the particular
            cache is configured. List of passed nodes is guaranteed to be sorted in a same order
            on all nodes on which partition assignment is performed.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Affinity.AffinityFunctionContext.CurrentTopologyVersion">
            <summary>
            Gets the current topology version.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Affinity.AffinityFunctionContext.DiscoveryEvent">
            <summary>
            Gets the discovery event that caused the topology change.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Cache.Affinity.AffinityTopologyVersion">
            <summary>
            Affinity topology version.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Cache.Affinity.AffinityTopologyVersion._version">
            
        </member>
        <member name="F:Apache.Ignite.Core.Cache.Affinity.AffinityTopologyVersion._minorVersion">
            
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Affinity.AffinityTopologyVersion.#ctor(System.Int64,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Cache.Affinity.AffinityTopologyVersion"/> struct.
            </summary>
            <param name="version">The version.</param>
            <param name="minorVersion">The minor version.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Affinity.AffinityTopologyVersion.Equals(Apache.Ignite.Core.Cache.Affinity.AffinityTopologyVersion)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Affinity.AffinityTopologyVersion.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/>, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, 
            <c>false</c>.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Affinity.AffinityTopologyVersion.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Affinity.AffinityTopologyVersion.op_Equality(Apache.Ignite.Core.Cache.Affinity.AffinityTopologyVersion,Apache.Ignite.Core.Cache.Affinity.AffinityTopologyVersion)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Affinity.AffinityTopologyVersion.op_Inequality(Apache.Ignite.Core.Cache.Affinity.AffinityTopologyVersion,Apache.Ignite.Core.Cache.Affinity.AffinityTopologyVersion)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Affinity.AffinityTopologyVersion.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Affinity.AffinityTopologyVersion.Version">
            <summary>
            Gets the major version, same as <see cref="P:Apache.Ignite.Core.Cluster.ICluster.TopologyVersion"/>.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Affinity.AffinityTopologyVersion.MinorVersion">
            <summary>
            Gets the minor version, which is increased when new caches start.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Cache.Affinity.IAffinityFunction">
            <summary>
            Represents a function that maps cache keys to cluster nodes.
            <para/>
            Predefined implementations: 
            <see cref="T:Apache.Ignite.Core.Cache.Affinity.Rendezvous.RendezvousAffinityFunction"/>.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Affinity.IAffinityFunction.GetPartition(System.Object)">
            <summary>
            Gets partition number for a given key starting from 0. Partitioned caches
            should make sure that keys are about evenly distributed across all partitions
            from 0 to <see cref="P:Apache.Ignite.Core.Cache.Affinity.IAffinityFunction.Partitions"/> for best performance.
            <para/>
            Note that for fully replicated caches it is possible to segment key sets among different
            grid node groups. In that case each node group should return a unique partition
            number. However, unlike partitioned cache, mappings of keys to nodes in
            replicated caches are constant and a node cannot migrate from one partition
            to another.
            </summary>
            <param name="key">Key to get partition for.</param>
            <returns>Partition number for a given key.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Affinity.IAffinityFunction.RemoveNode(System.Guid)">
            <summary>
            Removes node from affinity. This method is called when it is safe to remove 
            disconnected node from affinity mapping.
            </summary>
            <param name="nodeId">The node identifier.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Affinity.IAffinityFunction.AssignPartitions(Apache.Ignite.Core.Cache.Affinity.AffinityFunctionContext)">
            <summary>
            Gets affinity nodes for a partition. In case of replicated cache, all returned
            nodes are updated in the same manner. In case of partitioned cache, the returned
            list should contain only the primary and back up nodes with primary node being
            always first.
            <pare />
            Note that partitioned affinity must obey the following contract: given that node
            <code>N</code> is primary for some key <code>K</code>, if any other node(s) leave
            grid and no node joins grid, node <code>N</code> will remain primary for key <code>K</code>.
            </summary>
            <param name="context">The affinity function context.</param>
            <returns>
            A collection of partitions, where each partition is a collection of nodes,
            where first node is a primary node, and other nodes are backup nodes.
            </returns>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Affinity.IAffinityFunction.Partitions">
            <summary>
            Gets the total number of partitions.
            <para />
            All caches should always provide correct partition count which should be the same on all 
            participating nodes. Note that partitions should always be numbered from 0 inclusively 
            to N exclusively without any gaps.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Cache.Affinity.Rendezvous.RendezvousAffinityFunction">
            <summary>
            Affinity function for partitioned cache based on Highest Random Weight algorithm.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Cache.Affinity.AffinityFunctionBase">
            <summary>
            Base class for predefined affinity functions.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Cache.Affinity.AffinityFunctionBase.DefaultPartitions">
            <summary> The default value for <see cref="P:Apache.Ignite.Core.Cache.Affinity.AffinityFunctionBase.Partitions"/> property. </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Cache.Affinity.AffinityFunctionBase._partitions">
            
        </member>
        <member name="F:Apache.Ignite.Core.Cache.Affinity.AffinityFunctionBase._baseFunction">
            
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Affinity.AffinityFunctionBase.GetPartition(System.Object)">
            <summary>
            Gets partition number for a given key starting from 0. Partitioned caches
            should make sure that keys are about evenly distributed across all partitions
            from 0 to <see cref="P:Apache.Ignite.Core.Cache.Affinity.AffinityFunctionBase.Partitions"/> for best performance.
            <para/>
            Note that for fully replicated caches it is possible to segment key sets among different
            grid node groups. In that case each node group should return a unique partition
            number. However, unlike partitioned cache, mappings of keys to nodes in
            replicated caches are constant and a node cannot migrate from one partition
            to another.
            </summary>
            <param name="key">Key to get partition for.</param>
            <returns>
            Partition number for a given key.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Affinity.AffinityFunctionBase.RemoveNode(System.Guid)">
            <summary>
            Removes node from affinity. This method is called when it is safe to remove
            disconnected node from affinity mapping.
            </summary>
            <param name="nodeId">The node identifier.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Affinity.AffinityFunctionBase.AssignPartitions(Apache.Ignite.Core.Cache.Affinity.AffinityFunctionContext)">
            <summary>
            Gets affinity nodes for a partition. In case of replicated cache, all returned
            nodes are updated in the same manner. In case of partitioned cache, the returned
            list should contain only the primary and back up nodes with primary node being
            always first.
            <pare />
            Note that partitioned affinity must obey the following contract: given that node
            <code>N</code> is primary for some key <code>K</code>, if any other node(s) leave
            grid and no node joins grid, node <code>N</code> will remain primary for key <code>K</code>.
            </summary>
            <param name="context">The affinity function context.</param>
            <returns>
            A collection of partitions, where each partition is a collection of nodes,
            where first node is a primary node, and other nodes are backup nodes.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Affinity.AffinityFunctionBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Cache.Affinity.AffinityFunctionBase"/> class.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Affinity.AffinityFunctionBase.SetBaseFunction(Apache.Ignite.Core.Cache.Affinity.IAffinityFunction)">
            <summary>
            Sets the base function.
            </summary>
            <param name="baseFunc">The base function.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Affinity.AffinityFunctionBase.ThrowIfUninitialized">
            <summary>
            Gets the direct usage error.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Affinity.AffinityFunctionBase.Partitions">
            <summary>
            Gets or sets the total number of partitions.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Affinity.AffinityFunctionBase.ExcludeNeighbors">
            <summary>
            Gets or sets a value indicating whether to exclude same-host-neighbors from being backups of each other.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Cache.CacheAtomicUpdateTimeoutException">
            <summary>
            Indicates atomic operation timeout.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Cache.CacheException">
            <summary>
            Indicates an error during Cache operation.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.CacheException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Cache.CacheException"/> class.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.CacheException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Cache.CacheException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.CacheException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Cache.CacheException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="cause">The cause.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.CacheException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Cache.CacheException"/> class.
            </summary>
            <param name="info">Serialization information.</param>
            <param name="ctx">Streaming context.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.CacheAtomicUpdateTimeoutException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Cache.CacheAtomicUpdateTimeoutException"/> class.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.CacheAtomicUpdateTimeoutException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Cache.CacheAtomicUpdateTimeoutException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.CacheAtomicUpdateTimeoutException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Cache.CacheAtomicUpdateTimeoutException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="cause">The cause.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.CacheAtomicUpdateTimeoutException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Cache.CacheAtomicUpdateTimeoutException"/> class.
            </summary>
            <param name="info">Serialization information.</param>
            <param name="ctx">Streaming context.</param>
        </member>
        <member name="T:Apache.Ignite.Core.Cache.CacheEntryProcessorException">
            <summary>
            An exception to indicate a problem occurred attempting to execute an 
            <see cref="T:Apache.Ignite.Core.Cache.ICacheEntryProcessor`4"/> against an entry.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.CacheEntryProcessorException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Cache.CacheEntryProcessorException"/> class.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.CacheEntryProcessorException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Cache.CacheEntryProcessorException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.CacheEntryProcessorException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Cache.CacheEntryProcessorException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="cause">The cause.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.CacheEntryProcessorException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Cache.CacheEntryProcessorException"/> class.
            </summary>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.CacheEntryProcessorException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Cache.CacheEntryProcessorException"/> class.
            </summary>
            <param name="info">Serialization information.</param>
            <param name="ctx">Streaming context.</param>
        </member>
        <member name="T:Apache.Ignite.Core.Cache.CachePartialUpdateException">
            <summary>
            Exception thrown from non-transactional cache in case when update succeeded only partially.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Cache.CachePartialUpdateException.KeyFailedKeys">
            Serializer key. 
        </member>
        <member name="F:Apache.Ignite.Core.Cache.CachePartialUpdateException._failedKeys">
            Failed keys. 
        </member>
        <member name="F:Apache.Ignite.Core.Cache.CachePartialUpdateException._failedKeysException">
            Failed keys exception. 
        </member>
        <member name="M:Apache.Ignite.Core.Cache.CachePartialUpdateException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Cache.CachePartialUpdateException"/> class.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.CachePartialUpdateException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Cache.CachePartialUpdateException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.CachePartialUpdateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Cache.CachePartialUpdateException"/> class.
            </summary>
            <param name="info">Serialization information.</param>
            <param name="ctx">Streaming context.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.CachePartialUpdateException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="msg">Exception message.</param>
            <param name="failedKeysException">Exception occurred during failed keys read/write.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.CachePartialUpdateException.#ctor(System.String,System.Collections.Generic.IList{System.Object})">
            <summary>
            Constructor.
            </summary>
            <param name="msg">Exception message.</param>
            <param name="failedKeys">Failed keys.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.CachePartialUpdateException.#ctor(System.String,System.Collections.Generic.IList{System.Object},System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="msg">Exception message.</param>
            <param name="failedKeys">Failed keys.</param>
            <param name="failedKeysException">Exception occurred during failed keys read/write.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.CachePartialUpdateException.GetFailedKeys``1">
            <summary>
            Gets the failed keys.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.CachePartialUpdateException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data
            about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information
            about the source or destination.</param>
        </member>
        <member name="T:Apache.Ignite.Core.Cache.CachePeekMode">
            <summary>
            Enumeration of all supported cache peek modes.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Cache.CachePeekMode.All">
            <summary>
            Peeks into all available cache storages.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Cache.CachePeekMode.Near">
            <summary>
            Peek into near cache only (don't peek into partitioned cache).
            In case of LOCAL cache, behaves as <see cref="F:Apache.Ignite.Core.Cache.CachePeekMode.All"/> mode.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Cache.CachePeekMode.Primary">
            <summary>
            Peek value from primary copy of partitioned cache only (skip near cache).
            In case of LOCAL cache, behaves as <see cref="F:Apache.Ignite.Core.Cache.CachePeekMode.All"/> mode.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Cache.CachePeekMode.Backup">
            <summary>
            Peek value from backup copies of partitioned cache only (skip near cache).
            In case of LOCAL cache, behaves as <see cref="F:Apache.Ignite.Core.Cache.CachePeekMode.All"/> mode.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Cache.CachePeekMode.Onheap">
            <summary>
            Peeks value from the on-heap storage only.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Cache.CachePeekMode.Offheap">
            <summary>
            Peeks value from the off-heap storage only, without loading off-heap value into cache.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Cache.Configuration.NearCacheConfiguration">
            <summary>
            Defines near cache configuration.
            <para />
            Distributed cache can also be fronted by a Near cache, which is a smaller local cache that stores most 
            recently or most frequently accessed data. 
            Just like with a partitioned cache, the user can control the size of the near cache and its eviction policies. 
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Cache.Configuration.NearCacheConfiguration.DefaultNearStartSize">
            <summary> Initial default near cache size. </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Configuration.NearCacheConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Cache.Configuration.NearCacheConfiguration"/> class.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Configuration.NearCacheConfiguration.#ctor(Apache.Ignite.Core.Binary.IBinaryRawReader)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Cache.Configuration.NearCacheConfiguration"/> class.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Configuration.NearCacheConfiguration.Write(Apache.Ignite.Core.Binary.IBinaryRawWriter)">
            <summary>
            Writes to the specified writer.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Configuration.NearCacheConfiguration.EvictionPolicy">
            <summary>
            Gets or sets the eviction policy.
            Null value means disabled evictions.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Configuration.NearCacheConfiguration.NearStartSize">
            <summary>
            Gets or sets the initial cache size for near cache which will be used 
            to pre-create internal hash table after start.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Communication.ICommunicationSpi">
            <summary>
            Communication SPI is responsible for data exchange between nodes. 
            <para/>
            Communication SPI is one of the most important SPIs in Ignite. It is used
            heavily throughout the system and provides means for all data exchanges
            between nodes, such as internal implementation details and user driven messages.
            <para/>
            Only predefined implementation is supported now: <see cref="T:Apache.Ignite.Core.Communication.Tcp.TcpCommunicationSpi"/>.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Communication.Tcp.TcpCommunicationSpi">
            <summary>
            <see cref="T:Apache.Ignite.Core.Communication.Tcp.TcpCommunicationSpi"/> is default communication SPI which uses
            TCP/IP protocol and Java NIO to communicate with other nodes.
            <para/>
            At startup, this SPI tries to start listening to local port specified by
            <see cref="P:Apache.Ignite.Core.Communication.Tcp.TcpCommunicationSpi.LocalPort"/> property. If local port is occupied, then SPI will
            automatically increment the port number until it can successfully bind for
            listening. <see cref="P:Apache.Ignite.Core.Communication.Tcp.TcpCommunicationSpi.LocalPortRange"/> configuration parameter controls
            maximum number of ports that SPI will try before it fails. Port range comes
            very handy when starting multiple grid nodes on the same machine or even
            in the same VM. In this case all nodes can be brought up without a single
            change in configuration.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Communication.Tcp.TcpCommunicationSpi.DefaultAckSendThreshold">
            <summary> Default value of <see cref="P:Apache.Ignite.Core.Communication.Tcp.TcpCommunicationSpi.AckSendThreshold"/> property. </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Communication.Tcp.TcpCommunicationSpi.DefaultDirectBuffer">
            <summary> Default value of <see cref="P:Apache.Ignite.Core.Communication.Tcp.TcpCommunicationSpi.DirectBuffer"/> property. </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Communication.Tcp.TcpCommunicationSpi.DefaultDirectSendBuffer">
            <summary> Default value of <see cref="P:Apache.Ignite.Core.Communication.Tcp.TcpCommunicationSpi.DirectSendBuffer"/> property. </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Communication.Tcp.TcpCommunicationSpi.DefaultLocalPort">
            <summary> Default value of <see cref="P:Apache.Ignite.Core.Communication.Tcp.TcpCommunicationSpi.LocalPort"/> property. </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Communication.Tcp.TcpCommunicationSpi.DefaultLocalPortRange">
            <summary> Default value of <see cref="P:Apache.Ignite.Core.Communication.Tcp.TcpCommunicationSpi.LocalPortRange"/> property. </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Communication.Tcp.TcpCommunicationSpi.DefaultMessageQueueLimit">
            <summary> Default value of <see cref="P:Apache.Ignite.Core.Communication.Tcp.TcpCommunicationSpi.MessageQueueLimit"/> property. </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Communication.Tcp.TcpCommunicationSpi.DefaultReconnectCount">
            <summary> Default value of <see cref="P:Apache.Ignite.Core.Communication.Tcp.TcpCommunicationSpi.ReconnectCount"/> property. </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Communication.Tcp.TcpCommunicationSpi.DefaultSocketBufferSize">
            <summary> Default socket buffer size. </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Communication.Tcp.TcpCommunicationSpi.DefaultTcpNoDelay">
            <summary> Default value of <see cref="P:Apache.Ignite.Core.Communication.Tcp.TcpCommunicationSpi.TcpNoDelay"/> property. </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Communication.Tcp.TcpCommunicationSpi.DefaultConnectTimeout">
            <summary> Default value of <see cref="P:Apache.Ignite.Core.Communication.Tcp.TcpCommunicationSpi.ConnectTimeout"/> property. </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Communication.Tcp.TcpCommunicationSpi.DefaultIdleConnectionTimeout">
            <summary> Default value of <see cref="P:Apache.Ignite.Core.Communication.Tcp.TcpCommunicationSpi.IdleConnectionTimeout"/> property. </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Communication.Tcp.TcpCommunicationSpi.DefaultMaxConnectTimeout">
            <summary> Default value of <see cref="P:Apache.Ignite.Core.Communication.Tcp.TcpCommunicationSpi.MaxConnectTimeout"/> property. </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Communication.Tcp.TcpCommunicationSpi.DefaultSelectorsCount">
            <summary> Default value of <see cref="P:Apache.Ignite.Core.Communication.Tcp.TcpCommunicationSpi.SelectorsCount"/> property. </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Communication.Tcp.TcpCommunicationSpi.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Communication.Tcp.TcpCommunicationSpi"/> class.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Communication.Tcp.TcpCommunicationSpi.#ctor(Apache.Ignite.Core.Binary.IBinaryRawReader)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Communication.Tcp.TcpCommunicationSpi"/> class.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Communication.Tcp.TcpCommunicationSpi.Write(Apache.Ignite.Core.Binary.IBinaryRawWriter)">
            <summary>
            Writes this instance to the specified writer.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Communication.Tcp.TcpCommunicationSpi.AckSendThreshold">
            <summary>
            Gets or sets the number of received messages per connection to node 
            after which acknowledgment message is sent.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Communication.Tcp.TcpCommunicationSpi.ConnectTimeout">
            <summary>
            Gets or sets the connect timeout used when establishing connection with remote nodes.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Communication.Tcp.TcpCommunicationSpi.DirectBuffer">
            <summary>
            Gets or sets a value indicating whether to allocate direct (ByteBuffer.allocateDirect) 
            or heap (ByteBuffer.allocate) buffer.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Communication.Tcp.TcpCommunicationSpi.DirectSendBuffer">
            <summary>
            Gets or sets a value indicating whether to allocate direct (ByteBuffer.allocateDirect) 
            or heap (ByteBuffer.allocate) send buffer.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Communication.Tcp.TcpCommunicationSpi.IdleConnectionTimeout">
            <summary>
            Sets maximum idle connection timeout upon which a connection to client will be closed.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Communication.Tcp.TcpCommunicationSpi.LocalAddress">
            <summary>
            Gets or sets the local host address for socket binding. Note that one node could have 
            additional addresses beside the loopback one. This configuration parameter is optional.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Communication.Tcp.TcpCommunicationSpi.LocalPort">
            <summary>
            Gets or sets the local port for socket binding.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Communication.Tcp.TcpCommunicationSpi.LocalPortRange">
            <summary>
            Gets or sets local port range for local host ports (value must greater than or equal to <tt>0</tt>).
            If provided local port <see cref="P:Apache.Ignite.Core.Communication.Tcp.TcpCommunicationSpi.LocalPort"/> is occupied,
            implementation will try to increment the port number for as long as it is less than
            initial value plus this range.
            <para/>
            If port range value is <c>0</c>, then implementation will try bind only to the port provided by
            <see cref="P:Apache.Ignite.Core.Communication.Tcp.TcpCommunicationSpi.LocalPort"/> method and fail if binding to this port did not succeed.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Communication.Tcp.TcpCommunicationSpi.MaxConnectTimeout">
            <summary>
            Gets or sets maximum connect timeout. If handshake is not established within connect timeout,
            then SPI tries to repeat handshake procedure with increased connect timeout.
            Connect timeout can grow till maximum timeout value,
            if maximum timeout value is reached then the handshake is considered as failed.
            <para />
            <c>0</c> is interpreted as infinite timeout.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Communication.Tcp.TcpCommunicationSpi.MessageQueueLimit">
            <summary>
            Gets or sets the message queue limit for incoming and outgoing messages.
            <para />
            When set to positive number send queue is limited to the configured value. 
            <c>0</c> disables the limitation.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Communication.Tcp.TcpCommunicationSpi.ReconnectCount">
            <summary>
            Gets or sets the maximum number of reconnect attempts used when establishing connection with remote nodes.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Communication.Tcp.TcpCommunicationSpi.SelectorsCount">
            <summary>
            Gets or sets the count of selectors te be used in TCP server.
            <para/>
            Default value is <see cref="F:Apache.Ignite.Core.Communication.Tcp.TcpCommunicationSpi.DefaultSelectorsCount"/>, which is calculated as
            <c>Math.Min(4, Environment.ProcessorCount)</c>
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Communication.Tcp.TcpCommunicationSpi.SlowClientQueueLimit">
            <summary>
            Gets or sets slow client queue limit.
            <para/>
            When set to a positive number, communication SPI will monitor clients outbound message queue sizes 
            and will drop those clients whose queue exceeded this limit.
            <para/>
            Usually this value should be set to the same value as <see cref="P:Apache.Ignite.Core.Communication.Tcp.TcpCommunicationSpi.MessageQueueLimit"/> which controls
            message back-pressure for server nodes. The default value for this parameter is <c>0</c> 
            which means unlimited.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Communication.Tcp.TcpCommunicationSpi.SocketReceiveBufferSize">
            <summary>
            Gets or sets the size of the socket receive buffer.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Communication.Tcp.TcpCommunicationSpi.SocketSendBufferSize">
            <summary>
            Gets or sets the size of the socket send buffer.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Communication.Tcp.TcpCommunicationSpi.TcpNoDelay">
            <summary>
            Gets or sets the value for <c>TCP_NODELAY</c> socket option. Each
            socket will be opened using provided value.
            <para />
            Setting this option to <c>true</c> disables Nagle's algorithm
            for socket decreasing latency and delivery time for small messages.
            <para />
            For systems that work under heavy network load it is advisable to set this value to <c>false</c>.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Communication.Tcp.TcpCommunicationSpi.UnacknowledgedMessagesBufferSize">
            <summary>
            Gets or sets the maximum number of stored unacknowledged messages per connection to node. 
            If number of unacknowledged messages exceeds this number 
            then connection to node is closed and reconnect is attempted.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.DataStructures.Configuration.AtomicConfiguration">
            <summary>
            Configuration for atomic data structures.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.DataStructures.Configuration.AtomicConfiguration.DefaultBackups">
            <summary> Default number of backups. </summary>
        </member>
        <member name="F:Apache.Ignite.Core.DataStructures.Configuration.AtomicConfiguration.DefaultCacheMode">
            <summary> Default caching mode. </summary>
        </member>
        <member name="F:Apache.Ignite.Core.DataStructures.Configuration.AtomicConfiguration.DefaultAtomicSequenceReserveSize">
            <summary> Default atomic sequence reservation size. </summary>
        </member>
        <member name="M:Apache.Ignite.Core.DataStructures.Configuration.AtomicConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.DataStructures.Configuration.AtomicConfiguration"/> class.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.DataStructures.Configuration.AtomicConfiguration.Backups">
            <summary>
            Gets or sets number of nodes used to back up single partition for 
            <see cref="F:Apache.Ignite.Core.Cache.Configuration.CacheMode.Partitioned"/> cache.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.DataStructures.Configuration.AtomicConfiguration.CacheMode">
            <summary>
            Gets or sets caching mode to use.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.DataStructures.Configuration.AtomicConfiguration.AtomicSequenceReserveSize">
            <summary>
            Gets or sets the default number of sequence values reserved for <see cref="T:Apache.Ignite.Core.DataStructures.IAtomicSequence"/> instances. 
            After a certain number has been reserved, consequent increments of sequence will happen locally,
            without communication with other nodes, until the next reservation has to be made. 
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Cache.Configuration.QueryAlias">
            <summary>
            Represents cache query configuration alias.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Configuration.QueryAlias.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Cache.Configuration.QueryAlias"/> class.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Configuration.QueryAlias.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Cache.Configuration.QueryAlias"/> class.
            </summary>
            <param name="fullName">The full name.</param>
            <param name="alias">The alias.</param>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Configuration.QueryAlias.FullName">
            <summary>
            Gets or sets the full name of the query field.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Configuration.QueryAlias.Alias">
            <summary>
            Gets or sets the alias for the full name.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Cache.Configuration.QueryTextFieldAttribute">
            <summary>
            Marks field or property for Text queries.
            <para/>
            Using this attribute is an alternative to <see cref="P:Apache.Ignite.Core.Cache.Configuration.QueryEntity.Fields"/> in <see cref="T:Apache.Ignite.Core.Cache.Configuration.CacheConfiguration"/>.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Configuration.QueryTextFieldAttribute.Name">
            <summary>
            Gets or sets the text field name.
            If not provided, property or field name will be used.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Cache.Event.CacheEntryEventType">
            <summary>
            Cache event type.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Cache.Event.CacheEntryEventType.Created">
            <summary>
            An event type indicating that the cache entry was created.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Cache.Event.CacheEntryEventType.Updated">
            <summary>
            An event type indicating that the cache entry was updated. i.e. a previous
            mapping existed.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Cache.Event.CacheEntryEventType.Removed">
            <summary>
            An event type indicating that the cache entry was removed.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Cache.Event.ICacheEntryEvent`2">
            <summary>
            Cache entry event.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Cache.ICacheEntry`2">
            <summary>
            Cache entry interface.
            </summary>
            <typeparam name="TK">Key type.</typeparam>
            <typeparam name="TV">Value type.</typeparam>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.ICacheEntry`2.Key">
            <summary>
            Gets the key.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.ICacheEntry`2.Value">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Event.ICacheEntryEvent`2.EventType">
            <summary>
            Event type.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Event.ICacheEntryEvent`2.OldValue">
            <summary>
            Gets old the value.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Event.ICacheEntryEvent`2.HasValue">
            <summary>
            Whether value exists.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Event.ICacheEntryEvent`2.HasOldValue">
            <summary>
            Whether old value exists.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Cache.Event.ICacheEntryEventFilter`2">
            <summary>
            Cache entry event filter.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Event.ICacheEntryEventFilter`2.Evaluate(Apache.Ignite.Core.Cache.Event.ICacheEntryEvent{`0,`1})">
            <summary>
            Evaluates cache entry event.
            </summary>
            <param name="evt">Event.</param>
        </member>
        <member name="T:Apache.Ignite.Core.Cache.Event.ICacheEntryEventListener`2">
            <summary>
            Cache entry event listener.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Event.ICacheEntryEventListener`2.OnEvent(System.Collections.Generic.IEnumerable{Apache.Ignite.Core.Cache.Event.ICacheEntryEvent{`0,`1}})">
            <summary>
            Event callback.
            </summary>
            <param name="evts">Events.</param>
        </member>
        <member name="T:Apache.Ignite.Core.Cache.Eviction.EvictionPolicyBase">
            <summary>
            Base class for predefined eviction policies.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Cache.Eviction.IEvictionPolicy">
            <summary>
            Represents a cache eviction policy.
            Only predefined implementations are supported now: 
            <see cref="T:Apache.Ignite.Core.Cache.Eviction.LruEvictionPolicy"/>, <see cref="T:Apache.Ignite.Core.Cache.Eviction.FifoEvictionPolicy"/>.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Cache.Eviction.EvictionPolicyBase.DefaultBatchSize">
            <summary> Default batch cache size. </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Cache.Eviction.EvictionPolicyBase.DefaultMaxSize">
            <summary> Default max cache size. </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Cache.Eviction.EvictionPolicyBase.DefaultMaxMemorySize">
            <summary> Default max cache size in bytes. </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Eviction.EvictionPolicyBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Cache.Eviction.EvictionPolicyBase"/> class.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Eviction.EvictionPolicyBase.Write(Apache.Ignite.Core.Binary.IBinaryRawWriter,Apache.Ignite.Core.Cache.Eviction.IEvictionPolicy)">
            <summary>
            Writes to the specified writer.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Eviction.EvictionPolicyBase.Read(Apache.Ignite.Core.Binary.IBinaryRawReader)">
            <summary>
            Reads an instance.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Eviction.EvictionPolicyBase.BatchSize">
            <summary>
            Gets or sets the size of the eviction batch.
            Batch eviction is enabled only if maximum memory limit isn't set (<see cref="P:Apache.Ignite.Core.Cache.Eviction.EvictionPolicyBase.MaxMemorySize"/> == 0).
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Eviction.EvictionPolicyBase.MaxSize">
            <summary>
            Gets or sets the maximum allowed cache size (entry count).
            0 for unlimited.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Eviction.EvictionPolicyBase.MaxMemorySize">
            <summary>
            Gets or sets the maximum allowed cache size in bytes.
            0 for unlimited.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Cache.Eviction.FifoEvictionPolicy">
            <summary>
            Eviction policy based on First In First Out (FIFO) algorithm with batch eviction support.
            <para />
            The eviction starts in the following cases: 
            The cache size becomes { @code batchSize }
            elements greater than the maximum size;
            The size of cache entries in bytes becomes greater than the maximum memory size;
            The size of cache entry calculates as sum of key size and value size.
            <para />
            Note: Batch eviction is enabled only if maximum memory limit isn't set.
            <para />
            This implementation is very efficient since it does not create any additional
            table-like data structures. The FIFO ordering information is
            maintained by attaching ordering metadata to cache entries.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Cache.Eviction.LruEvictionPolicy">
            <summary>
            Eviction policy based on Least Recently Used (LRU) algorithm with batch eviction support.
            <para />
            The eviction starts in the following cases: 
            The cache size becomes { @code batchSize }
            elements greater than the maximum size;
            The size of cache entries in bytes becomes greater than the maximum memory size;
            The size of cache entry calculates as sum of key size and value size.
            <para />
            Note: Batch eviction is enabled only if maximum memory limit isn't set.
            <para />
            This implementation is very efficient since it does not create any additional
            table-like data structures. The LRU ordering information is
            maintained by attaching ordering metadata to cache entries.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Cache.Expiry.ExpiryPolicy">
            <summary>
            Default expiry policy implementation with all durations deinfed explicitly.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Cache.Expiry.IExpiryPolicy">
            <summary>
            Defines functions to determine when cache entries will expire based on
            creation, access and modification operations.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Expiry.IExpiryPolicy.GetExpiryForCreate">
            <summary>
            Gets expiry for create operation.
            <para />
            If <c>TimeSpan.ZERO</c> is returned, cache entry is considered immediately expired
            and will not be added to cache. 
            <para />
            If <c>null</c> is returned, no change to previously understood expiry is performed.
            </summary>
            <returns>Expiry for create opeartion.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Expiry.IExpiryPolicy.GetExpiryForUpdate">
            <summary>
            Gets expiry for update operation.
            <para />
            If <c>TimeSpan.ZERO</c> is returned, cache entry is considered immediately expired.
            <para />
            If <c>null</c> is returned, no change to previously understood expiry is performed.
            </summary>
            <returns>Expiry for update operation.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Expiry.IExpiryPolicy.GetExpiryForAccess">
            <summary>
            Gets expiry for access operation.
            <para />
            If <c>TimeSpan.ZERO</c> is returned, cache entry is considered immediately expired.
            <para />
            If <c>null</c> is returned, no change to previously understood expiry is performed.
            </summary>
            <returns>Expiry for access operation.</returns>
        </member>
        <member name="F:Apache.Ignite.Core.Cache.Expiry.ExpiryPolicy._create">
            Expiry for create. 
        </member>
        <member name="F:Apache.Ignite.Core.Cache.Expiry.ExpiryPolicy._update">
            Expiry for update. 
        </member>
        <member name="F:Apache.Ignite.Core.Cache.Expiry.ExpiryPolicy._access">
            Expiry for access. 
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Expiry.ExpiryPolicy.#ctor(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
            <summary>
            Constructor.
            </summary>
            <param name="create">Expiry for create.</param>
            <param name="update">Expiry for udpate.</param>
            <param name="access">Expiry for access.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Expiry.ExpiryPolicy.GetExpiryForCreate">
            <summary>
            Gets expiry for create operation.
            <para />
            If <c>TimeSpan.ZERO</c> is returned, cache entry is considered immediately expired
            and will not be added to cache. 
            <para />
            If <c>null</c> is returned, no change to previously understood expiry is performed.
            </summary>
            <returns>Expiry for create opeartion.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Expiry.ExpiryPolicy.GetExpiryForUpdate">
            <summary>
            Gets expiry for update operation.
            <para />
            If <c>TimeSpan.ZERO</c> is returned, cache entry is considered immediately expired.
            <para />
            If <c>null</c> is returned, no change to previously understood expiry is performed.
            </summary>
            <returns>Expiry for update operation.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Expiry.ExpiryPolicy.GetExpiryForAccess">
            <summary>
            Gets expiry for access operation.
            <para />
            If <c>TimeSpan.ZERO</c> is returned, cache entry is considered immediately expired.
            <para />
            If <c>null</c> is returned, no change to previously understood expiry is performed.
            </summary>
            <returns>Expiry for access operation.</returns>
        </member>
        <member name="T:Apache.Ignite.Core.Cache.ICache`2">
            <summary>
            Main entry point for Ignite cache APIs. You can get a named cache by calling
            <see cref="M:Apache.Ignite.Core.IIgnite.GetCache``2(System.String)"/> method.
            <para/>
            Cache API supports distributed transactions. All <c>Get(...)</c>, <c>Put(...)</c>, <c>Replace(...)</c>,
            and <c>Remove(...)</c> operations are transactional and will participate in an ongoing transaction,
            if any. Other methods like <c>Peek(...)</c> or various <c>Contains(...)</c> methods may
            be transaction-aware, i.e. check in-transaction entries first, but will not affect the current
            state of transaction. See <see cref="T:Apache.Ignite.Core.Transactions.ITransaction"/> documentation for more information
            about transactions.
            <para/>
            Neither <c>null</c> keys or values are allowed to be stored in cache. If a <c>null</c> value
            happens to be in cache (e.g. after invalidation or remove), then cache will treat this case
            as there is no value at all.
            <para/>
            Note that cache is generic and you can only work with provided key and value types. If cache also
            contains keys or values of other types, any attempt to retrieve them will result in
            <see cref="T:System.InvalidCastException"/>. Use <see cref="T:Apache.Ignite.Core.Cache.ICache`2"/> in order to work with entries
            of arbitrary types.
            <para/>
            All members are thread-safe and may be used concurrently from multiple threads.
            </summary>
            <typeparam name="TK">Key type.</typeparam>
            <typeparam name="TV">Value type.</typeparam>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.ICache`2.GetConfiguration">
            <summary>
            Gets the cache configuration.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.ICache`2.IsEmpty">
            <summary>
            Checks whether this cache contains no key-value mappings.
            <para />
            Semantically equals to <c>ICache.Size(CachePeekMode.PRIMARY) == 0</c>.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.ICache`2.WithSkipStore">
            <summary>
            Get another cache instance with read-through and write-through behavior disabled.
            </summary>
            <returns>Cache with read-through and write-through behavior disabled.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.ICache`2.WithExpiryPolicy(Apache.Ignite.Core.Cache.Expiry.IExpiryPolicy)">
            <summary>
            Returns cache with the specified expired policy set. This policy will be used for each operation
            invoked on the returned cache.
            <para />
            Expiry durations for each operation are calculated only once and then used as constants. Please
            consider this when implementing customg expiry policy implementations.
            </summary>
            <param name="plc">Expiry policy to use.</param>
            <returns>Cache instance with the specified expiry policy set.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.ICache`2.WithKeepBinary``2">
            <summary>
            Gets cache with KeepBinary mode enabled, changing key and/or value types if necessary.
            You can only change key/value types when transitioning from non-binary to binary cache;
            Changing type of binary cache is not allowed and will throw an <see cref="T:System.InvalidOperationException"/>
            </summary>
            <typeparam name="TK1">Key type in binary mode.</typeparam>
            <typeparam name="TV1">Value type in binary mode.</typeparam>
            <returns>Cache instance with binary mode enabled.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.ICache`2.LoadCache(Apache.Ignite.Core.Cache.ICacheEntryFilter{`0,`1},System.Object[])">
            <summary>
            Executes <see cref="M:Apache.Ignite.Core.Cache.ICache`2.LocalLoadCache(Apache.Ignite.Core.Cache.ICacheEntryFilter{`0,`1},System.Object[])"/> on all cache nodes.
            </summary>
            <param name="p">
            Optional predicate. If provided, will be used to filter values to be put into cache.
            </param>
            <param name="args">
            Optional user arguments to be passed into <see cref="M:Apache.Ignite.Core.Cache.Store.ICacheStore`2.LoadCache(System.Action{`0,`1},System.Object[])"/>.
            </param>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.ICache`2.LoadCacheAsync(Apache.Ignite.Core.Cache.ICacheEntryFilter{`0,`1},System.Object[])">
            <summary>
            Executes <see cref="M:Apache.Ignite.Core.Cache.ICache`2.LocalLoadCache(Apache.Ignite.Core.Cache.ICacheEntryFilter{`0,`1},System.Object[])"/> on all cache nodes.
            </summary>
            <param name="p">
            Optional predicate. If provided, will be used to filter values to be put into cache.
            </param>
            <param name="args">
            Optional user arguments to be passed into <see cref="M:Apache.Ignite.Core.Cache.Store.ICacheStore`2.LoadCache(System.Action{`0,`1},System.Object[])"/>.
            </param>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.ICache`2.LocalLoadCache(Apache.Ignite.Core.Cache.ICacheEntryFilter{`0,`1},System.Object[])">
            <summary>
            Delegates to <see cref="M:Apache.Ignite.Core.Cache.Store.ICacheStore`2.LoadCache(System.Action{`0,`1},System.Object[])"/> method to load state
            from the underlying persistent storage. The loaded values will then be given
            to the optionally passed in predicate, and, if the predicate returns true,
            will be stored in cache. If predicate is null, then all loaded values will be stored in cache.
            </summary>
            <param name="p">
            Optional predicate. If provided, will be used to filter values to be put into cache.
            </param>
            <param name="args">
            Optional user arguments to be passed into <see cref="M:Apache.Ignite.Core.Cache.Store.ICacheStore`2.LoadCache(System.Action{`0,`1},System.Object[])"/>.
            </param>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.ICache`2.LocalLoadCacheAsync(Apache.Ignite.Core.Cache.ICacheEntryFilter{`0,`1},System.Object[])">
            <summary>
            Delegates to <see cref="M:Apache.Ignite.Core.Cache.Store.ICacheStore`2.LoadCache(System.Action{`0,`1},System.Object[])"/> method to load state
            from the underlying persistent storage. The loaded values will then be given
            to the optionally passed in predicate, and, if the predicate returns true,
            will be stored in cache. If predicate is null, then all loaded values will be stored in cache.
            </summary>
            <param name="p">
            Optional predicate. If provided, will be used to filter values to be put into cache.
            </param>
            <param name="args">
            Optional user arguments to be passed into <see cref="M:Apache.Ignite.Core.Cache.Store.ICacheStore`2.LoadCache(System.Action{`0,`1},System.Object[])"/>.
            </param>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.ICache`2.LoadAll(System.Collections.Generic.IEnumerable{`0},System.Boolean)">
            <summary>
            Loads the specified entries into the cache using the configured 
            <see cref="T:Apache.Ignite.Core.Cache.Store.ICacheStore"/>&gt; for the given keys.
            <para/>
            If an entry for a key already exists in the cache, a value will be loaded if and only if 
            <paramref name="replaceExistingValues"/> is true.   
            If no loader is configured for the cache, no objects will be loaded.
            </summary>
            <param name="keys">The keys to load.</param>
            <param name="replaceExistingValues">if set to <c>true</c>, existing cache values will
            be replaced by those loaded from a cache store.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.ICache`2.LoadAllAsync(System.Collections.Generic.IEnumerable{`0},System.Boolean)">
            <summary>
            Asynchronously loads the specified entries into the cache using the configured 
            <see cref="T:Apache.Ignite.Core.Cache.Store.ICacheStore"/>&gt; for the given keys.
            <para/>
            If an entry for a key already exists in the cache, a value will be loaded if and only if 
            <paramref name="replaceExistingValues"/> is true.   
            If no loader is configured for the cache, no objects will be loaded.
            </summary>
            <param name="keys">The keys to load.</param>
            <param name="replaceExistingValues">if set to <c>true</c>, existing cache values will
            be replaced by those loaded from a cache store.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.ICache`2.ContainsKey(`0)">
            <summary>
            Check if cache contains mapping for this key.
            </summary>
            <param name="key">Key.</param>
            <returns>True if cache contains mapping for this key.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.ICache`2.ContainsKeyAsync(`0)">
            <summary>
            Check if cache contains mapping for this key.
            </summary>
            <param name="key">Key.</param>
            <returns>True if cache contains mapping for this key.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.ICache`2.ContainsKeys(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Check if cache contains mapping for these keys.
            </summary>
            <param name="keys">Keys.</param>
            <returns>True if cache contains mapping for all these keys.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.ICache`2.ContainsKeysAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Check if cache contains mapping for these keys.
            </summary>
            <param name="keys">Keys.</param>
            <returns>True if cache contains mapping for all these keys.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.ICache`2.LocalPeek(`0,Apache.Ignite.Core.Cache.CachePeekMode[])">
            <summary>
            Peeks at cached value using optional set of peek modes. This method will sequentially
            iterate over given peek modes, and try to peek at value using each peek mode. Once a
            non-null value is found, it will be immediately returned.
            This method does not participate in any transactions, however, it may peek at transactional
            value depending on the peek modes used.
            If key is not present in cache, KeyNotFoundException will be thrown.
            </summary>
            <param name="key">Key.</param>
            <param name="modes">Peek modes.</param>
            <returns>Peeked value.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.ICache`2.TryLocalPeek(`0,`1@,Apache.Ignite.Core.Cache.CachePeekMode[])">
            <summary>
            Peeks at cached value using optional set of peek modes. This method will sequentially
            iterate over given peek modes, and try to peek at value using each peek mode. Once a
            non-null value is found, it will be immediately returned.
            This method does not participate in any transactions, however, it may peek at transactional
            value depending on the peek modes used.
            </summary>
            <param name="key">Key.</param>
            <param name="value">When this method returns, the value associated with the specified key,
            if the key is found; otherwise, the default value for the type of the value parameter.
            This parameter is passed uninitialized.</param>
            <param name="modes">Peek modes.</param>
            <returns>
            true if the cache contains an element with the specified key; otherwise, false.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.ICache`2.Get(`0)">
             <summary>
             Retrieves value mapped to the specified key from cache.
            
             If the value is not present in cache, then it will be looked up from swap storage. If
             it's not present in swap, or if swap is disable, and if read-through is allowed, value
             will be loaded from persistent store.
             This method is transactional and will enlist the entry into ongoing transaction if there is one.
             </summary>
             <param name="key">Key.</param>
             <returns>Value.</returns>
             <exception cref="T:System.Collections.Generic.KeyNotFoundException">If the key is not present in the cache.</exception>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.ICache`2.GetAsync(`0)">
             <summary>
             Retrieves value mapped to the specified key from cache.
            
             If the value is not present in cache, then it will be looked up from swap storage. If
             it's not present in swap, or if swap is disable, and if read-through is allowed, value
             will be loaded from persistent store.
             This method is transactional and will enlist the entry into ongoing transaction if there is one.
             </summary>
             <param name="key">Key.</param>
             <returns>Value.</returns>
             <exception cref="T:System.Collections.Generic.KeyNotFoundException">If the key is not present in the cache.</exception>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.ICache`2.TryGet(`0,`1@)">
            <summary>
            Retrieves value mapped to the specified key from cache.
            If the value is not present in cache, then it will be looked up from swap storage. If
            it's not present in swap, or if swap is disable, and if read-through is allowed, value
            will be loaded from persistent store.
            This method is transactional and will enlist the entry into ongoing transaction if there is one.
            </summary>
            <param name="key">Key.</param>
            <param name="value">When this method returns, the value associated with the specified key,
            if the key is found; otherwise, the default value for the type of the value parameter.
            This parameter is passed uninitialized.</param>
            <returns>
            true if the cache contains an element with the specified key; otherwise, false.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.ICache`2.TryGetAsync(`0)">
            <summary>
            Retrieves value mapped to the specified key from cache.
            If the value is not present in cache, then it will be looked up from swap storage. If
            it's not present in swap, or if swap is disable, and if read-through is allowed, value
            will be loaded from persistent store.
            This method is transactional and will enlist the entry into ongoing transaction if there is one.
            </summary>
            <param name="key">Key.</param>
            <returns>
            <see cref="T:Apache.Ignite.Core.Cache.CacheResult`1"/> containing a bool success flag and a value.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.ICache`2.GetAll(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Retrieves values mapped to the specified keys from cache.
            If some value is not present in cache, then it will be looked up from swap storage. If
            it's not present in swap, or if swap is disabled, and if read-through is allowed, value
            will be loaded from persistent store.
            This method is transactional and will enlist the entry into ongoing transaction if there is one.
            </summary>
            <param name="keys">Keys.</param>
            <returns>Map of key-value pairs.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.ICache`2.GetAllAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Retrieves values mapped to the specified keys from cache.
            If some value is not present in cache, then it will be looked up from swap storage. If
            it's not present in swap, or if swap is disabled, and if read-through is allowed, value
            will be loaded from persistent store.
            This method is transactional and will enlist the entry into ongoing transaction if there is one.
            </summary>
            <param name="keys">Keys.</param>
            <returns>Map of key-value pairs.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.ICache`2.Put(`0,`1)">
            <summary>
            Associates the specified value with the specified key in the cache.
            <para />
            If the cache previously contained a mapping for the key,
            the old value is replaced by the specified value.
            </summary>
            <param name="key">Key with which the specified value is to be associated.</param>
            <param name="val">Value to be associated with the specified key.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.ICache`2.PutAsync(`0,`1)">
            <summary>
            Associates the specified value with the specified key in the cache.
            <para />
            If the cache previously contained a mapping for the key,
            the old value is replaced by the specified value.
            </summary>
            <param name="key">Key with which the specified value is to be associated.</param>
            <param name="val">Value to be associated with the specified key.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.ICache`2.GetAndPut(`0,`1)">
            <summary>
            Associates the specified value with the specified key in this cache,
            returning an existing value if one existed.
            </summary>
            <param name="key">Key with which the specified value is to be associated.</param>
            <param name="val">Value to be associated with the specified key.</param>
            <returns>
            The value associated with the key at the start of the operation.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.ICache`2.GetAndPutAsync(`0,`1)">
            <summary>
            Associates the specified value with the specified key in this cache,
            returning an existing value if one existed.
            </summary>
            <param name="key">Key with which the specified value is to be associated.</param>
            <param name="val">Value to be associated with the specified key.</param>
            <returns>
            The value associated with the key at the start of the operation.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.ICache`2.GetAndReplace(`0,`1)">
            <summary>
            Atomically replaces the value for a given key if and only if there is a value currently mapped by the key.
            </summary>
            <param name="key">Key with which the specified value is to be associated.</param>
            <param name="val">Value to be associated with the specified key.</param>
            <returns>
            The previous value associated with the specified key.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.ICache`2.GetAndReplaceAsync(`0,`1)">
            <summary>
            Atomically replaces the value for a given key if and only if there is a value currently mapped by the key.
            </summary>
            <param name="key">Key with which the specified value is to be associated.</param>
            <param name="val">Value to be associated with the specified key.</param>
            <returns>
            The previous value associated with the specified key.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.ICache`2.GetAndRemove(`0)">
            <summary>
            Atomically removes the entry for a key only if currently mapped to some value.
            </summary>
            <param name="key">Key with which the specified value is associated.</param>
            <returns>The value if one existed.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.ICache`2.GetAndRemoveAsync(`0)">
            <summary>
            Atomically removes the entry for a key only if currently mapped to some value.
            </summary>
            <param name="key">Key with which the specified value is associated.</param>
            <returns>The value if one existed.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.ICache`2.PutIfAbsent(`0,`1)">
            <summary>
            Atomically associates the specified key with the given value if it is not already associated with a value.
            </summary>
            <param name="key">Key with which the specified value is to be associated.</param>
            <param name="val">Value to be associated with the specified key.</param>
            <returns>True if a value was set.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.ICache`2.PutIfAbsentAsync(`0,`1)">
            <summary>
            Atomically associates the specified key with the given value if it is not already associated with a value.
            </summary>
            <param name="key">Key with which the specified value is to be associated.</param>
            <param name="val">Value to be associated with the specified key.</param>
            <returns>True if a value was set.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.ICache`2.GetAndPutIfAbsent(`0,`1)">
            <summary>
            Stores given key-value pair in cache only if cache had no previous mapping for it.
            If cache previously contained value for the given key, then this value is returned.
            In case of PARTITIONED or REPLICATED caches, the value will be loaded from the primary node,
            which in its turn may load the value from the swap storage, and consecutively, if it's not
            in swap, from the underlying persistent storage.
            If the returned value is not needed, method putxIfAbsent() should be used instead of this one to
            avoid the overhead associated with returning of the previous value.
            If write-through is enabled, the stored value will be persisted to store.
            This method is transactional and will enlist the entry into ongoing transaction if there is one.
            </summary>
            <param name="key">Key to store in cache.</param>
            <param name="val">Value to be associated with the given key.</param>
            <returns>
            Previously contained value regardless of whether put happened or not.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.ICache`2.GetAndPutIfAbsentAsync(`0,`1)">
            <summary>
            Stores given key-value pair in cache only if cache had no previous mapping for it.
            If cache previously contained value for the given key, then this value is returned.
            In case of PARTITIONED or REPLICATED caches, the value will be loaded from the primary node,
            which in its turn may load the value from the swap storage, and consecutively, if it's not
            in swap, from the underlying persistent storage.
            If the returned value is not needed, method putxIfAbsent() should be used instead of this one to
            avoid the overhead associated with returning of the previous value.
            If write-through is enabled, the stored value will be persisted to store.
            This method is transactional and will enlist the entry into ongoing transaction if there is one.
            </summary>
            <param name="key">Key to store in cache.</param>
            <param name="val">Value to be associated with the given key.</param>
            <returns>
            Previously contained value regardless of whether put happened or not.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.ICache`2.Replace(`0,`1)">
            <summary>
            Stores given key-value pair in cache only if there is a previous mapping for it.
            If cache previously contained value for the given key, then this value is returned.
            In case of PARTITIONED or REPLICATED caches, the value will be loaded from the primary node,
            which in its turn may load the value from the swap storage, and consecutively, if it's not
            in swap, rom the underlying persistent storage.
            If write-through is enabled, the stored value will be persisted to store.
            This method is transactional and will enlist the entry into ongoing transaction if there is one.
            </summary>
            <param name="key">Key to store in cache.</param>
            <param name="val">Value to be associated with the given key.</param>
            <returns>True if the value was replaced.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.ICache`2.ReplaceAsync(`0,`1)">
            <summary>
            Stores given key-value pair in cache only if there is a previous mapping for it.
            If cache previously contained value for the given key, then this value is returned.
            In case of PARTITIONED or REPLICATED caches, the value will be loaded from the primary node,
            which in its turn may load the value from the swap storage, and consecutively, if it's not
            in swap, rom the underlying persistent storage.
            If write-through is enabled, the stored value will be persisted to store.
            This method is transactional and will enlist the entry into ongoing transaction if there is one.
            </summary>
            <param name="key">Key to store in cache.</param>
            <param name="val">Value to be associated with the given key.</param>
            <returns>True if the value was replaced.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.ICache`2.Replace(`0,`1,`1)">
            <summary>
            Stores given key-value pair in cache only if only if the previous value is equal to the
            old value passed as argument.
            This method is transactional and will enlist the entry into ongoing transaction if there is one.
            </summary>
            <param name="key">Key to store in cache.</param>
            <param name="oldVal">Old value to match.</param>
            <param name="newVal">Value to be associated with the given key.</param>
            <returns>True if replace happened, false otherwise.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.ICache`2.ReplaceAsync(`0,`1,`1)">
            <summary>
            Stores given key-value pair in cache only if only if the previous value is equal to the
            old value passed as argument.
            This method is transactional and will enlist the entry into ongoing transaction if there is one.
            </summary>
            <param name="key">Key to store in cache.</param>
            <param name="oldVal">Old value to match.</param>
            <param name="newVal">Value to be associated with the given key.</param>
            <returns>True if replace happened, false otherwise.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.ICache`2.PutAll(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
            Stores given key-value pairs in cache.
            If write-through is enabled, the stored values will be persisted to store.
            This method is transactional and will enlist the entry into ongoing transaction if there is one.
            </summary>
            <param name="vals">Key-value pairs to store in cache.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.ICache`2.PutAllAsync(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
            Stores given key-value pairs in cache.
            If write-through is enabled, the stored values will be persisted to store.
            This method is transactional and will enlist the entry into ongoing transaction if there is one.
            </summary>
            <param name="vals">Key-value pairs to store in cache.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.ICache`2.LocalEvict(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Attempts to evict all entries associated with keys. Note, that entry will be evicted only
            if it's not used (not participating in any locks or transactions).
            </summary>
            <param name="keys">Keys to evict from cache.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.ICache`2.Clear">
            <summary>
            Clears the contents of the cache, without notifying listeners or CacheWriters.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.ICache`2.ClearAsync">
            <summary>
            Clears the contents of the cache, without notifying listeners or CacheWriters.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.ICache`2.Clear(`0)">
            <summary>
            Clear entry from the cache and swap storage, without notifying listeners or CacheWriters.
            Entry is cleared only if it is not currently locked, and is not participating in a transaction.
            </summary>
            <param name="key">Key to clear.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.ICache`2.ClearAsync(`0)">
            <summary>
            Clear entry from the cache and swap storage, without notifying listeners or CacheWriters.
            Entry is cleared only if it is not currently locked, and is not participating in a transaction.
            </summary>
            <param name="key">Key to clear.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.ICache`2.ClearAll(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Clear entries from the cache and swap storage, without notifying listeners or CacheWriters.
            Entry is cleared only if it is not currently locked, and is not participating in a transaction.
            </summary>
            <param name="keys">Keys to clear.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.ICache`2.ClearAllAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Clear entries from the cache and swap storage, without notifying listeners or CacheWriters.
            Entry is cleared only if it is not currently locked, and is not participating in a transaction.
            </summary>
            <param name="keys">Keys to clear.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.ICache`2.LocalClear(`0)">
            <summary>
            Clear entry from the cache and swap storage, without notifying listeners or CacheWriters.
            Entry is cleared only if it is not currently locked, and is not participating in a transaction.
            <para />
            Note that this operation is local as it merely clears
            an entry from local cache, it does not remove entries from remote caches.
            </summary>
            <param name="key">Key to clear.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.ICache`2.LocalClearAll(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Clear entries from the cache and swap storage, without notifying listeners or CacheWriters.
            Entry is cleared only if it is not currently locked, and is not participating in a transaction.
            <para />
            Note that this operation is local as it merely clears
            entries from local cache, it does not remove entries from remote caches.
            </summary>
            <param name="keys">Keys to clear.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.ICache`2.Remove(`0)">
            <summary>
            Removes given key mapping from cache. If cache previously contained value for the given key,
            then this value is returned. In case of PARTITIONED or REPLICATED caches, the value will be
            loaded from the primary node, which in its turn may load the value from the disk-based swap
            storage, and consecutively, if it's not in swap, from the underlying persistent storage.
            If the returned value is not needed, method removex() should always be used instead of this
            one to avoid the overhead associated with returning of the previous value.
            If write-through is enabled, the value will be removed from store.
            This method is transactional and will enlist the entry into ongoing transaction if there is one.
            </summary>
            <param name="key">Key whose mapping is to be removed from cache.</param>
            <returns>False if there was no matching key.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.ICache`2.RemoveAsync(`0)">
            <summary>
            Removes given key mapping from cache. If cache previously contained value for the given key,
            then this value is returned. In case of PARTITIONED or REPLICATED caches, the value will be
            loaded from the primary node, which in its turn may load the value from the disk-based swap
            storage, and consecutively, if it's not in swap, from the underlying persistent storage.
            If the returned value is not needed, method removex() should always be used instead of this
            one to avoid the overhead associated with returning of the previous value.
            If write-through is enabled, the value will be removed from store.
            This method is transactional and will enlist the entry into ongoing transaction if there is one.
            </summary>
            <param name="key">Key whose mapping is to be removed from cache.</param>
            <returns>False if there was no matching key.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.ICache`2.Remove(`0,`1)">
            <summary>
            Removes given key mapping from cache if one exists and value is equal to the passed in value.
            If write-through is enabled, the value will be removed from store.
            This method is transactional and will enlist the entry into ongoing transaction if there is one.
            </summary>
            <param name="key">Key whose mapping is to be removed from cache.</param>
            <param name="val">Value to match against currently cached value.</param>
            <returns>True if entry was removed, false otherwise.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.ICache`2.RemoveAsync(`0,`1)">
            <summary>
            Removes given key mapping from cache if one exists and value is equal to the passed in value.
            If write-through is enabled, the value will be removed from store.
            This method is transactional and will enlist the entry into ongoing transaction if there is one.
            </summary>
            <param name="key">Key whose mapping is to be removed from cache.</param>
            <param name="val">Value to match against currently cached value.</param>
            <returns>True if entry was removed, false otherwise.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.ICache`2.RemoveAll(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Removes given key mappings from cache.
            If write-through is enabled, the value will be removed from store.
            This method is transactional and will enlist the entry into ongoing transaction if there is one.
            </summary>
            <param name="keys">Keys whose mappings are to be removed from cache.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.ICache`2.RemoveAllAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Removes given key mappings from cache.
            If write-through is enabled, the value will be removed from store.
            This method is transactional and will enlist the entry into ongoing transaction if there is one.
            </summary>
            <param name="keys">Keys whose mappings are to be removed from cache.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.ICache`2.RemoveAll">
            <summary>
            Removes all mappings from cache.
            If write-through is enabled, the value will be removed from store.
            This method is not transactional.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.ICache`2.RemoveAllAsync">
            <summary>
            Removes all mappings from cache.
            If write-through is enabled, the value will be removed from store.
            This method is not transactional.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.ICache`2.GetLocalSize(Apache.Ignite.Core.Cache.CachePeekMode[])">
            <summary>
            Gets the number of all entries cached on this node.
            </summary>
            <param name="modes">Optional peek modes. If not provided, then total cache size is returned.</param>
            <returns>Cache size on this node.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.ICache`2.GetSize(Apache.Ignite.Core.Cache.CachePeekMode[])">
            <summary>
            Gets the number of all entries cached across all nodes.
            <para />
            NOTE: this operation is distributed and will query all participating nodes for their cache sizes.
            </summary>
            <param name="modes">Optional peek modes. If not provided, then total cache size is returned.</param>
            <returns>Cache size across all nodes.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.ICache`2.GetSizeAsync(Apache.Ignite.Core.Cache.CachePeekMode[])">
            <summary>
            Gets the number of all entries cached across all nodes.
            <para />
            NOTE: this operation is distributed and will query all participating nodes for their cache sizes.
            </summary>
            <param name="modes">Optional peek modes. If not provided, then total cache size is returned.</param>
            <returns>Cache size across all nodes.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.ICache`2.Query(Apache.Ignite.Core.Cache.Query.QueryBase)">
            <summary>
            Queries cache.
            </summary>
            <param name="qry">Query.</param>
            <returns>Cursor.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.ICache`2.QueryFields(Apache.Ignite.Core.Cache.Query.SqlFieldsQuery)">
            <summary>
            Queries separate entry fields.
            </summary>
            <param name="qry">SQL fields query.</param>
            <returns>Cursor.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.ICache`2.QueryContinuous(Apache.Ignite.Core.Cache.Query.Continuous.ContinuousQuery{`0,`1})">
            <summary>
            Start continuous query execution.
            </summary>
            <param name="qry">Continuous query.</param>
            <returns>Handle to stop query execution.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.ICache`2.QueryContinuous(Apache.Ignite.Core.Cache.Query.Continuous.ContinuousQuery{`0,`1},Apache.Ignite.Core.Cache.Query.QueryBase)">
            <summary>
            Start continuous query execution.
            </summary>
            <param name="qry">Continuous query.</param>
            <param name="initialQry">
            The initial query. This query will be executed before continuous listener is registered which allows
            to iterate through entries which have already existed at the time continuous query is executed.
            </param>
            <returns>
            Handle to get initial query cursor or stop query execution.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.ICache`2.GetLocalEntries(Apache.Ignite.Core.Cache.CachePeekMode[])">
            <summary>
            Get local cache entries.
            </summary>
            <param name="peekModes">Peek modes.</param>
            <returns>Enumerable instance.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.ICache`2.Invoke``2(`0,Apache.Ignite.Core.Cache.ICacheEntryProcessor{`0,`1,``0,``1},``0)">
            <summary>
            Invokes an <see cref="T:Apache.Ignite.Core.Cache.ICacheEntryProcessor`4"/> against the
            <see cref="T:Apache.Ignite.Core.Cache.IMutableCacheEntry`2"/> specified by the provided key.
            If an entry does not exist for the specified key, an attempt is made to load it (if a loader is configured)
            or a surrogate entry, consisting of the key with a null value is used instead.
            </summary>
            <typeparam name="TArg">The type of the argument.</typeparam>
            <typeparam name="TRes">The type of the result.</typeparam>
            <param name="key">The key.</param>
            <param name="processor">The processor.</param>
            <param name="arg">The argument.</param>
            <returns>Result of the processing.</returns>
            <exception cref="T:Apache.Ignite.Core.Cache.CacheEntryProcessorException">If an exception has occured during processing.</exception>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.ICache`2.InvokeAsync``2(`0,Apache.Ignite.Core.Cache.ICacheEntryProcessor{`0,`1,``0,``1},``0)">
            <summary>
            Invokes an <see cref="T:Apache.Ignite.Core.Cache.ICacheEntryProcessor`4"/> against the
            <see cref="T:Apache.Ignite.Core.Cache.IMutableCacheEntry`2"/> specified by the provided key.
            If an entry does not exist for the specified key, an attempt is made to load it (if a loader is configured)
            or a surrogate entry, consisting of the key with a null value is used instead.
            </summary>
            <typeparam name="TArg">The type of the argument.</typeparam>
            <typeparam name="TRes">The type of the result.</typeparam>
            <param name="key">The key.</param>
            <param name="processor">The processor.</param>
            <param name="arg">The argument.</param>
            <returns>Result of the processing.</returns>
            <exception cref="T:Apache.Ignite.Core.Cache.CacheEntryProcessorException">If an exception has occured during processing.</exception>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.ICache`2.InvokeAll``2(System.Collections.Generic.IEnumerable{`0},Apache.Ignite.Core.Cache.ICacheEntryProcessor{`0,`1,``0,``1},``0)">
             <summary>
             Invokes an <see cref="T:Apache.Ignite.Core.Cache.ICacheEntryProcessor`4"/> against a set of keys.
             If an entry does not exist for the specified key, an attempt is made to load it (if a loader is configured)
             or a surrogate entry, consisting of the key with a null value is used instead.
            
             The order that the entries for the keys are processed is undefined.
             Implementations may choose to process the entries in any order, including concurrently.
             Furthermore there is no guarantee implementations will use the same processor instance
             to process each entry, as the case may be in a non-local cache topology.
             </summary>
             <typeparam name="TArg">The type of the argument.</typeparam>
             <typeparam name="TRes">The type of the result.</typeparam>
             <param name="keys">The keys.</param>
             <param name="processor">The processor.</param>
             <param name="arg">The argument.</param>
             <returns>
             Map of <see cref="T:Apache.Ignite.Core.Cache.ICacheEntryProcessorResult`2"/> of the processing per key, if any,
             defined by the <see cref="T:Apache.Ignite.Core.Cache.ICacheEntryProcessor`4"/> implementation.
             No mappings will be returned for processors that return a null value for a key.
             </returns>
             <exception cref="T:Apache.Ignite.Core.Cache.CacheEntryProcessorException">If an exception has occured during processing.</exception>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.ICache`2.InvokeAllAsync``2(System.Collections.Generic.IEnumerable{`0},Apache.Ignite.Core.Cache.ICacheEntryProcessor{`0,`1,``0,``1},``0)">
             <summary>
             Invokes an <see cref="T:Apache.Ignite.Core.Cache.ICacheEntryProcessor`4"/> against a set of keys.
             If an entry does not exist for the specified key, an attempt is made to load it (if a loader is configured)
             or a surrogate entry, consisting of the key with a null value is used instead.
            
             The order that the entries for the keys are processed is undefined.
             Implementations may choose to process the entries in any order, including concurrently.
             Furthermore there is no guarantee implementations will use the same processor instance
             to process each entry, as the case may be in a non-local cache topology.
             </summary>
             <typeparam name="TArg">The type of the argument.</typeparam>
             <typeparam name="TRes">The type of the result.</typeparam>
             <param name="keys">The keys.</param>
             <param name="processor">The processor.</param>
             <param name="arg">The argument.</param>
             <returns>
             Map of <see cref="T:Apache.Ignite.Core.Cache.ICacheEntryProcessorResult`2"/> of the processing per key, if any,
             defined by the <see cref="T:Apache.Ignite.Core.Cache.ICacheEntryProcessor`4"/> implementation.
             No mappings will be returned for processors that return a null value for a key.
             </returns>
             <exception cref="T:Apache.Ignite.Core.Cache.CacheEntryProcessorException">If an exception has occured during processing.</exception>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.ICache`2.Lock(`0)">
            <summary>
            Creates an <see cref="T:Apache.Ignite.Core.Cache.ICacheLock"/> instance associated with passed key.
            This method does not acquire lock immediately, you have to call appropriate method on returned instance.
            </summary>
            <param name="key">Key for lock.</param>
            <returns>New <see cref="T:Apache.Ignite.Core.Cache.ICacheLock"/> instance associated with passed key.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.ICache`2.LockAll(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Creates an <see cref="T:Apache.Ignite.Core.Cache.ICacheLock"/> instance associated with passed keys.
            This method does not acquire lock immediately, you have to call appropriate method on returned instance.
            </summary>
            <param name="keys">Keys for lock.</param>
            <returns>New <see cref="T:Apache.Ignite.Core.Cache.ICacheLock"/> instance associated with passed keys.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.ICache`2.IsLocalLocked(`0,System.Boolean)">
            <summary>
            Checks if specified key is locked.
            <para />
            This is a local operation and does not involve any network trips
            or access to persistent storage in any way.
            </summary>
            <param name="key">Key to check.</param>
            <param name="byCurrentThread">
            If true, checks that current thread owns a lock on this key;
            otherwise, checks that any thread on any node owns a lock on this key.
            </param>
            <returns>True if specified key is locked; otherwise, false.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.ICache`2.GetMetrics">
            <summary>
            Gets global (whole cluster) snapshot metrics (statistics) for this cache.
            </summary>
            <returns>Cache metrics.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.ICache`2.GetMetrics(Apache.Ignite.Core.Cluster.IClusterGroup)">
            <summary>
            Gets global (whole cluster group) snapshot metrics (statistics) for this cache.
            </summary>
            <param name="clusterGroup">The cluster group to get metrics for.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.ICache`2.GetLocalMetrics">
            <summary>
            Gets local snapshot metrics (statistics) for this cache.
            </summary>
            <returns>Cache metrics.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.ICache`2.Rebalance">
            <summary>
            Rebalances cache partitions. This method is usually used when rebalanceDelay configuration parameter
            has non-zero value. When many nodes are started or stopped almost concurrently,
            it is more efficient to delay rebalancing until the node topology is stable to make sure that no redundant
            re-partitioning happens.
            <para />
            In case of partitioned caches, for better efficiency user should usually make sure that new nodes get
            placed on the same place of consistent hash ring as the left nodes, and that nodes are restarted before
            rebalanceDelay expires.
            </summary>
            <returns>Task that will be completed when rebalancing is finished.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.ICache`2.WithNoRetries">
            <summary>
            Get another cache instance with no-retries behavior enabled.
            </summary>
            <returns>Cache with no-retries behavior enabled.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.ICache`2.WithPartitionRecover">
            <summary>
            Gets an instance of cache that will be allowed to execute cache operations (read, write)
            regardless of partition loss policy.
            </summary>
            <returns>Cache without partition loss protection.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.ICache`2.GetLostPartitions">
            <summary>
            Gets lost partitions IDs.
            <para/>
            See also <see cref="P:Apache.Ignite.Core.Cache.Configuration.CacheConfiguration.PartitionLossPolicy"/>
            and <see cref="M:Apache.Ignite.Core.IIgnite.ResetLostPartitions(System.Collections.Generic.IEnumerable{System.String})"/>.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.ICache`2.Name">
            <summary>
            Name of this cache (<c>null</c> for default cache).
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.ICache`2.Ignite">
            <summary>
            Ignite hosting this cache.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.ICache`2.IsKeepBinary">
            <summary>
            Gets a value indicating whether to keep values in binary form.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.ICache`2.Item(`0)">
            <summary>
            Gets or sets a cache value with the specified key.
            Shortcut to <see cref="M:Apache.Ignite.Core.Cache.ICache`2.Get(`0)"/> and <see cref="M:Apache.Ignite.Core.Cache.ICache`2.Put(`0,`1)"/>
            </summary>
            <param name="key">Key.</param>
            <returns>Cache value with the specified key.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">If the key is not present in the cache.</exception>
        </member>
        <member name="T:Apache.Ignite.Core.Cache.ICacheAffinity">
            <summary>
            Provides affinity information to detect which node is primary and which nodes are
            backups for a partitioned cache. You can get an instance of this interface by calling
            <see cref="M:Apache.Ignite.Core.IIgnite.GetAffinity(System.String)"/> method.
            <para/>
            Mapping of a key to a node is a three-step operation. First step will get an affinity key for 
            given key using <c>CacheAffinityKeyMapper</c>. If mapper is not specified, the original key 
            will be used. Second step will map affinity key to partition using 
            <c>CacheAffinityFunction.partition(Object)</c> method. Third step will map obtained partition 
            to nodes for current grid topology version.
            <para/>
            Interface provides various <c>mapKeysToNodes(...)</c> methods which provide node affinity mapping 
            for given keys. All <c>mapKeysToNodes(...)</c> methods are not transactional and will not enlist
            keys into ongoing transaction.
            <para/>
            All members are thread-safe and may be used concurrently from multiple threads.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.ICacheAffinity.GetPartition``1(``0)">
            <summary>
            Gets partition id for the given key.
            </summary>
            <param name="key">Key to get partition id for.</param>
            <returns>Partition id.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.ICacheAffinity.IsPrimary``1(Apache.Ignite.Core.Cluster.IClusterNode,``0)">
            <summary>
            Returns 'true' if given node is the primary node for given key.
            </summary>
            <param name="n">Node.</param>
            <param name="key">Key.</param>
            <returns>'True' if given node is the primary node for given key.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.ICacheAffinity.IsBackup``1(Apache.Ignite.Core.Cluster.IClusterNode,``0)">
            <summary>
            Returns 'true' if given node is the backup node for given key.
            </summary>
            <param name="n">Node.</param>
            <param name="key">Key.</param>
            <returns>'True' if given node is the backup node for given key.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.ICacheAffinity.IsPrimaryOrBackup``1(Apache.Ignite.Core.Cluster.IClusterNode,``0)">
            <summary>
            Returns 'true' if given node is either primary or backup node for given key.
            </summary>
            <param name="n">Node.</param>
            <param name="key">Key.</param>
            <returns>'True' if given node is either primary or backup node for given key.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.ICacheAffinity.GetPrimaryPartitions(Apache.Ignite.Core.Cluster.IClusterNode)">
            <summary>
            Gets partition ids for which nodes of the given projection has primary
            ownership.
            </summary>
            <param name="n">Node.</param>
            <returns>Partition ids for which given projection has primary ownership.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.ICacheAffinity.GetBackupPartitions(Apache.Ignite.Core.Cluster.IClusterNode)">
            <summary>
            Gets partition ids for which nodes of the given projection has backup
            ownership.
            </summary>
            <param name="n">Node.</param>
            <returns>Partition ids for which given projection has backup ownership.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.ICacheAffinity.GetAllPartitions(Apache.Ignite.Core.Cluster.IClusterNode)">
            <summary>
            Gets partition ids for which nodes of the given projection has ownership
            (either primary or backup).
            </summary>
            <param name="n">Node.</param>
            <returns>Partition ids for which given projection has ownership.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.ICacheAffinity.GetAffinityKey``2(``0)">
            <summary>
            Maps passed in key to a key which will be used for node affinity.
            </summary>
            <param name="key">Key to map.</param>
            <returns>Key to be used for node-to-affinity mapping (may be the same key as passed in).</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.ICacheAffinity.MapKeysToNodes``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            This method provides ability to detect which keys are mapped to which nodes.
            Use it to determine which nodes are storing which keys prior to sending
            jobs that access these keys.
            </summary>
            <param name="keys">Keys to map to nodes.</param>
            <returns>Map of nodes to keys or empty map if there are no alive nodes for this cache.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.ICacheAffinity.MapKeyToNode``1(``0)">
            <summary>
            This method provides ability to detect to which primary node the given key
            is mapped. Use it to determine which nodes are storing which keys prior to sending
            jobs that access these keys.
            </summary>
            <param name="key">Keys to map to a node.</param>
            <returns>Primary node for the key or null if there are no alive nodes for this cache.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.ICacheAffinity.MapKeyToPrimaryAndBackups``1(``0)">
            <summary>
            Gets primary and backup nodes for the key. Note that primary node is always
            first in the returned collection.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.ICacheAffinity.MapPartitionToNode(System.Int32)">
            <summary>
            Gets primary node for the given partition.
            </summary>
            <param name="part">Partition id.</param>
            <returns>Primary node for the given partition.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.ICacheAffinity.MapPartitionsToNodes(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Gets primary nodes for the given partitions.
            </summary>
            <param name="parts">Partition ids.</param>
            <returns>Mapping of given partitions to their primary nodes.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.ICacheAffinity.MapPartitionToPrimaryAndBackups(System.Int32)">
            <summary>
            Gets primary and backup nodes for partition. Note that primary node is always
            first in the returned collection.
            </summary>
            <param name="part">Partition to get affinity nodes for.</param>
            <returns>Collection of primary and backup nodes for partition with primary node always first</returns>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.ICacheAffinity.Partitions">
            <summary>
            Gets number of partitions in cache according to configured affinity function.
            </summary>
            <returns>Number of cache partitions.</returns>
        </member>
        <member name="T:Apache.Ignite.Core.Cache.ICacheEntryFilter`2">
            <summary>
            Cache entry predicate.
            </summary>
            <typeparam name="TK">Key type.</typeparam>
            <typeparam name="TV">Value type.</typeparam>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.ICacheEntryFilter`2.Invoke(Apache.Ignite.Core.Cache.ICacheEntry{`0,`1})">
            <summary>
            Returns a value indicating whether provided cache entry satisfies this predicate.
            </summary>
            <param name="entry">Cache entry.</param>
            <returns>Value indicating whether provided cache entry satisfies this predicate.</returns>
        </member>
        <member name="T:Apache.Ignite.Core.Cache.ICacheEntryProcessor`4">
            <summary>
            An invocable function that allows applications to perform compound operations
            on a cache entry atomically, according the defined consistency of a cache.
            <para/>
            Any cache entry mutations will not take effect until after
            the <see cref="M:Apache.Ignite.Core.Cache.ICacheEntryProcessor`4.Process(Apache.Ignite.Core.Cache.IMutableCacheEntry{`0,`1},`2)"/> method has completedS execution.
            <para/>
            If an exception is thrown by an entry processor, a Caching Implementation
            must wrap any exception thrown wrapped in an <see cref="T:Apache.Ignite.Core.Cache.CacheEntryProcessorException"/>
            If this occurs no mutations will be made to the cache entry.
            </summary>
            <typeparam name="TK">Key type.</typeparam>
            <typeparam name="TV">Value type.</typeparam>
            <typeparam name="TArg">The type of the processor argument.</typeparam>
            <typeparam name="TRes">The type of the processor result.</typeparam>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.ICacheEntryProcessor`4.Process(Apache.Ignite.Core.Cache.IMutableCacheEntry{`0,`1},`2)">
            <summary>
            Process an entry.
            </summary>
            <param name="entry">The entry to process.</param>
            <param name="arg">The argument.</param>
            <returns>Processing result.</returns>
        </member>
        <member name="T:Apache.Ignite.Core.Cache.ICacheEntryProcessorResult`2">
            <summary>
            Represents a result of processing <see cref="T:Apache.Ignite.Core.Cache.ICacheEntry`2"/>
            by <see cref="T:Apache.Ignite.Core.Cache.ICacheEntryProcessor`4"/>.
            </summary>
            <typeparam name="TK">Key type.</typeparam>
            <typeparam name="T">Processor result type.</typeparam>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.ICacheEntryProcessorResult`2.Key">
            <summary>
            Gets the cache key.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.ICacheEntryProcessorResult`2.Result">
            <summary>
            Gets the result of processing an entry.
            <para/>
            If an exception was thrown during the processing of an entry, 
            either by the <see cref="T:Apache.Ignite.Core.Cache.ICacheEntryProcessor`4"/> itself 
            or by the Caching implementation, the exceptions will be wrapped and re-thrown as a 
            <see cref="T:Apache.Ignite.Core.Cache.CacheEntryProcessorException"/> when calling this property.
            </summary>
            <value>
            The result.
            </value>
        </member>
        <member name="T:Apache.Ignite.Core.Cache.ICacheLock">
            <summary>
            Cache locking interface.
            <para/>
            All members are thread-safe and may be used concurrently from multiple threads.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.ICacheLock.Enter">
            <summary>
            Acquires an exclusive lock.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.ICacheLock.TryEnter">
            <summary>
            Acquires an exclusive lock only if it is free at the time of invocation.
            </summary>
            <returns>True if the current thread acquires the lock; otherwise, false.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.ICacheLock.TryEnter(System.TimeSpan)">
            <summary>
            Attempts, for the specified amount of time, to acquire an exclusive lock.
            </summary>
            <param name="timeout">
            A <see cref="T:System.TimeSpan"/> representing the amount of time to wait for the lock. 
            A value of -1 millisecond specifies an infinite wait.
            </param>
            <returns>True if the current thread acquires the lock; otherwise, false.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.ICacheLock.Exit">
            <summary>
            Releases an exclusive lock on the specified object.
            <see cref="M:System.IDisposable.Dispose"/> does not call this method and will throw 
            <see cref="T:System.Threading.SynchronizationLockException"/> if this lock is acquired.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Cache.ICacheMetrics">
            <summary>
            Cache metrics used to obtain statistics on cache itself.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.ICacheMetrics.CacheHits">
            <summary>
            The number of get requests that were satisfied by the cache.
            </summary>
            <returns>
            The number of hits.
            </returns>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.ICacheMetrics.CacheHitPercentage">
            <summary>
            This is a measure of cache efficiency.
            </summary>
            <returns>
            The percentage of successful hits, as a decimal e.g 75.
            </returns>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.ICacheMetrics.CacheMisses">
            <summary>
            A miss is a get request that is not satisfied.
            </summary>
            <returns>
            The number of misses.
            </returns>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.ICacheMetrics.CacheMissPercentage">
            <summary>
            Returns the percentage of cache accesses that did not find a requested entry in the cache.
            </summary>
            <returns>
            The percentage of accesses that failed to find anything.
            </returns>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.ICacheMetrics.CacheGets">
            <summary>
            The total number of requests to the cache. This will be equal to the sum of the hits and misses.
            </summary>
            <returns>
            The number of gets.
            </returns>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.ICacheMetrics.CachePuts">
            <summary>
            The total number of puts to the cache.
            </summary>
            <returns>
            The number of puts.
            </returns>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.ICacheMetrics.CacheRemovals">
            <summary>
            The total number of removals from the cache. This does not include evictions, where the cache itself
            initiates the removal to make space.
            </summary>
            <returns>
            The number of removals.
            </returns>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.ICacheMetrics.CacheEvictions">
            <summary>
            The total number of evictions from the cache. An eviction is a removal initiated by the cache itself
            to free up space. An eviction is not treated as a removal and does not appear in the removal counts.
            </summary>
            <returns>
            The number of evictions.
            </returns>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.ICacheMetrics.AverageGetTime">
            <summary>
            The mean time to execute gets.
            </summary>
            <returns>
            The time in ms.
            </returns>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.ICacheMetrics.AveragePutTime">
            <summary>
            The mean time to execute puts.
            </summary>
            <returns>
            The time in s.
            </returns>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.ICacheMetrics.AverageRemoveTime">
            <summary>
            The mean time to execute removes.
            </summary>
            <returns>
            The time in ms.
            </returns>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.ICacheMetrics.AverageTxCommitTime">
            <summary>
            The mean time to execute tx commit.
            </summary>
            <returns>
            The time in ms.
            </returns>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.ICacheMetrics.AverageTxRollbackTime">
            <summary>
            The mean time to execute tx rollbacks.
            </summary>
            <returns>
            Number of transaction rollbacks.
            </returns>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.ICacheMetrics.CacheTxCommits">
            <summary>
            Gets total number of transaction commits.
            </summary>
            <returns>
            Number of transaction commits.
            </returns>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.ICacheMetrics.CacheTxRollbacks">
            <summary>
            Gets total number of transaction rollbacks.
            </summary>
            <returns>
            Number of transaction rollbacks.
            </returns>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.ICacheMetrics.CacheName">
            <summary>
            Gets cache name.
            </summary>
            <returns>
            Cache name.
            </returns>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.ICacheMetrics.OffHeapGets">
            <summary>
            The total number of get requests to the off-heap memory.
            </summary>
            <returns>
            The number of gets.
            </returns>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.ICacheMetrics.OffHeapPuts">
            <summary>
            The total number of put requests to the off-heap memory.
            </summary>
            <returns>
            The number of puts.
            </returns>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.ICacheMetrics.OffHeapRemovals">
            <summary>
            The total number of removals from the off-heap memory. This does not include evictions.
            </summary>
            <returns>
            The number of removals.
            </returns>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.ICacheMetrics.OffHeapEvictions">
            <summary>
            The total number of evictions from the off-heap memory.
            </summary>
            <returns>
            The number of evictions.
            </returns>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.ICacheMetrics.OffHeapHits">
            <summary>
            The number of get requests that were satisfied by the off-heap memory.
            </summary>
            <returns>
            The off-heap hits number.
            </returns>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.ICacheMetrics.OffHeapHitPercentage">
            <summary>
            Gets the percentage of hits on off-heap memory.
            </summary>
            <returns>
            The percentage of hits on off-heap memory.
            </returns>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.ICacheMetrics.OffHeapMisses">
            <summary>
            A miss is a get request that is not satisfied by off-heap memory.
            </summary>
            <returns>
            The off-heap misses number.
            </returns>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.ICacheMetrics.OffHeapMissPercentage">
            <summary>
            Gets the percentage of misses on off-heap memory.
            </summary>
            <returns>
            The percentage of misses on off-heap memory.
            </returns>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.ICacheMetrics.OffHeapEntriesCount">
            <summary>
            Gets number of entries stored in off-heap memory.
            </summary>
            <returns>
            Number of entries stored in off-heap memory.
            </returns>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.ICacheMetrics.OffHeapPrimaryEntriesCount">
            <summary>
            Gets the number of primary entries stored in off-heap memory.
            </summary>
            <returns>
            Number of primary entries stored in off-heap memory.
            </returns>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.ICacheMetrics.OffHeapBackupEntriesCount">
            <summary>
            Gets number of backup entries stored in off-heap memory.
            </summary>
            <returns>
            Number of backup entries stored in off-heap memory.
            </returns>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.ICacheMetrics.OffHeapAllocatedSize">
            <summary>
            Gets memory size allocated in off-heap.
            </summary>
            <returns>
            Memory size allocated in off-heap.
            </returns>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.ICacheMetrics.Size">
            <summary>
            Gets number of non-null values in the cache.
            </summary>
            <returns>
            Number of non-null values in the cache.
            </returns>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.ICacheMetrics.KeySize">
            <summary>
            Gets number of keys in the cache, possibly with null values.
            </summary>
            <returns>
            Number of keys in the cache.
            </returns>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.ICacheMetrics.IsEmpty">
            <summary>
            Returns true if this cache is empty.
            </summary>
            <returns>
            True if this cache is empty.
            </returns>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.ICacheMetrics.DhtEvictQueueCurrentSize">
            <summary>
            Gets current size of evict queue used to batch up evictions.
            </summary>
            <returns>
            Current size of evict queue.
            </returns>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.ICacheMetrics.TxThreadMapSize">
            <summary>
            Gets transaction per-thread map size.
            </summary>
            <returns>
            Thread map size.
            </returns>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.ICacheMetrics.TxXidMapSize">
            <summary>
            Gets transaction per-Xid map size.
            </summary>
            <returns>
            Transaction per-Xid map size.
            </returns>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.ICacheMetrics.TxCommitQueueSize">
            <summary>
            Gets committed transaction queue size.
            </summary>
            <returns>
            Committed transaction queue size.
            </returns>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.ICacheMetrics.TxPrepareQueueSize">
            <summary>
            Gets prepared transaction queue size.
            </summary>
            <returns>
            Prepared transaction queue size.
            </returns>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.ICacheMetrics.TxStartVersionCountsSize">
            <summary>
            Gets start version counts map size.
            </summary>
            <returns>
            Start version counts map size.
            </returns>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.ICacheMetrics.TxCommittedVersionsSize">
            <summary>
            Gets number of cached committed transaction IDs.
            </summary>
            <returns>
            Number of cached committed transaction IDs.
            </returns>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.ICacheMetrics.TxRolledbackVersionsSize">
            <summary>
            Gets number of cached rolled back transaction IDs.
            </summary>
            <returns>
            Number of cached rolled back transaction IDs.
            </returns>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.ICacheMetrics.TxDhtThreadMapSize">
            <summary>
            Gets transaction DHT per-thread map size.
            </summary>
            <returns>
            DHT thread map size.
            </returns>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.ICacheMetrics.TxDhtXidMapSize">
            <summary>
            Gets transaction DHT per-Xid map size.
            </summary>
            <returns>
            Transaction DHT per-Xid map size.
            </returns>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.ICacheMetrics.TxDhtCommitQueueSize">
            <summary>
            Gets committed DHT transaction queue size.
            </summary>
            <returns>
            Committed DHT transaction queue size.
            </returns>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.ICacheMetrics.TxDhtPrepareQueueSize">
            <summary>
            Gets prepared DHT transaction queue size.
            </summary>
            <returns>
            Prepared DHT transaction queue size.
            </returns>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.ICacheMetrics.TxDhtStartVersionCountsSize">
            <summary>
            Gets DHT start version counts map size.
            </summary>
            <returns>
            DHT start version counts map size.
            </returns>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.ICacheMetrics.TxDhtCommittedVersionsSize">
            <summary>
            Gets number of cached committed DHT transaction IDs.
            </summary>
            <returns>
            Number of cached committed DHT transaction IDs.
            </returns>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.ICacheMetrics.TxDhtRolledbackVersionsSize">
            <summary>
            Gets number of cached rolled back DHT transaction IDs.
            </summary>
            <returns>
            Number of cached rolled back DHT transaction IDs.
            </returns>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.ICacheMetrics.IsWriteBehindEnabled">
            <summary>
            Returns true if write-behind is enabled.
            </summary>
            <returns>
            True if write-behind is enabled.
            </returns>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.ICacheMetrics.WriteBehindFlushSize">
            <summary>
            Gets the maximum size of the write-behind buffer. When the count of unique keys in write buffer exceeds
            this value, the buffer is scheduled for write to the underlying store.
            <para />
            If this value is 0, then flush is performed only on time-elapsing basis.
            </summary>
            <returns>
            Buffer size that triggers flush procedure.
            </returns>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.ICacheMetrics.WriteBehindFlushThreadCount">
            <summary>
            Gets the number of flush threads that will perform store update operations.
            </summary>
            <returns>
            Count of worker threads.
            </returns>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.ICacheMetrics.WriteBehindFlushFrequency">
            <summary>
            Gets the cache flush frequency. All pending operations on the underlying store will be performed
            within time interval not less then this value.
            <para /> If this value is 0, then flush is performed only when buffer size exceeds flush size.
            </summary>
            <returns>
            Flush frequency in milliseconds.
            </returns>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.ICacheMetrics.WriteBehindStoreBatchSize">
            <summary>
            Gets the maximum count of similar (put or remove) operations that can be grouped to a single batch.
            </summary>
            <returns>
            Maximum size of batch.
            </returns>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.ICacheMetrics.WriteBehindTotalCriticalOverflowCount">
            <summary>
            Gets count of write buffer overflow events since initialization.
            Each overflow event causes the ongoing flush operation to be performed synchronously.
            </summary>
            <returns>
            Count of cache overflow events since start.
            </returns>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.ICacheMetrics.WriteBehindCriticalOverflowCount">
            <summary>
            Gets count of write buffer overflow events in progress at the moment.
            Each overflow event causes the ongoing flush operation to be performed synchronously.
            </summary>
            <returns>
            Count of cache overflow events since start.
            </returns>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.ICacheMetrics.WriteBehindErrorRetryCount">
            <summary>
            Gets count of cache entries that are in a store-retry state.
            An entry is assigned a store-retry state when underlying store failed due some reason
            and cache has enough space to retain this entry till the next try.
            </summary>
            <returns>
            Count of entries in store-retry state.
            </returns>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.ICacheMetrics.WriteBehindBufferSize">
            <summary>
            Gets count of entries that were processed by the write-behind store
            and have not been flushed to the underlying store yet.
            </summary>
            <returns>
            Total count of entries in cache store internal buffer.
            </returns>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.ICacheMetrics.KeyType">
            <summary>
            Determines the required type of keys for this cache, if any.
            </summary>
            <returns>
            The fully qualified class name of the key type, or "java.lang.Object" if the type is undefined.
            </returns>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.ICacheMetrics.ValueType">
            <summary>
            Determines the required type of values for this cache, if any.
            </summary>
            <returns>
            The fully qualified class name of the value type, or "java.lang.Object" if the type is undefined.
            </returns>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.ICacheMetrics.IsStoreByValue">
            <summary>
            Whether storeByValue true or storeByReference false. When true, both keys and values are stored by value. 
            <para />
            When false, both keys and values are stored by reference. Caches stored by reference are capable of
            mutation by any threads holding the reference.
            The effects are:
            - if the key is mutated, then the key may not be retrievable or removable
            - if the value is mutated, then all threads in the JVM can potentially observe those mutations, subject
            to the normal Java Memory Model rules.
            Storage by reference only applies to the local heap.
            If an entry is moved off heap it will need to be transformed into a representation.
            Any mutations that occur after transformation may not be reflected in the cache.
            <para />
            When a cache is storeByValue, any mutation to the key or value does not affect the key of value
            stored in the cache.
            <para />
            The default value is true.
            </summary>
            <returns>
            True if the cache is store by value.
            </returns>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.ICacheMetrics.IsStatisticsEnabled">
            <summary>
            Checks whether statistics collection is enabled in this cache.
            <para />
            The default value is false.
            </summary>
            <returns>
            True if statistics collection is enabled.
            </returns>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.ICacheMetrics.IsManagementEnabled">
            <summary>
            Checks whether management is enabled on this cache.
            <para />
            The default value is false.
            </summary>
            <returns>
            True if management is enabled.
            </returns>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.ICacheMetrics.IsReadThrough">
            <summary>
            Determines if a cache should operate in read-through mode.
            <para />
            The default value is false
            </summary>
            <returns>
            True when a cache is in "read-through" mode.
            </returns>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.ICacheMetrics.IsWriteThrough">
            <summary>
            Determines if a cache should operate in "write-through" mode.
            <para />
            Will appropriately cause the configured CacheWriter to be invoked.
            <para />
            The default value is false
            </summary>
            <returns>
            True when a cache is in "write-through" mode.
            </returns>
        </member>
        <member name="T:Apache.Ignite.Core.Cache.CacheResult`1">
            <summary>
            Represents a cache operation result with a success flag.
            </summary>
            <typeparam name="T">Operation result value type.</typeparam>
        </member>
        <member name="F:Apache.Ignite.Core.Cache.CacheResult`1._value">
            Value. 
        </member>
        <member name="F:Apache.Ignite.Core.Cache.CacheResult`1._success">
            Success flag. 
        </member>
        <member name="M:Apache.Ignite.Core.Cache.CacheResult`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Cache.CacheResult`1"/> struct with a specified value 
            and sets success flag to true.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.CacheResult`1.Equals(Apache.Ignite.Core.Cache.CacheResult{`0})">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/>, is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.CacheResult`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/>, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.CacheResult`1.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.CacheResult`1.op_Equality(Apache.Ignite.Core.Cache.CacheResult{`0},Apache.Ignite.Core.Cache.CacheResult{`0})">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.CacheResult`1.op_Inequality(Apache.Ignite.Core.Cache.CacheResult{`0},Apache.Ignite.Core.Cache.CacheResult{`0})">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.CacheResult`1.Value">
            <summary>
            Gets the cache value.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.CacheResult`1.Success">
            <summary>
            Gets a value indicating whether the operation completed successfully.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Cache.IMutableCacheEntry`2">
            <summary>
            Mutable representation of <see cref="T:Apache.Ignite.Core.Cache.ICacheEntry`2"/>
            </summary>
            <typeparam name="TK">Key type.</typeparam>
            <typeparam name="TV">Value type.</typeparam>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.IMutableCacheEntry`2.Remove">
            <summary>
            Removes the entry from the Cache.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.IMutableCacheEntry`2.Exists">
            <summary>
            Gets a value indicating whether cache entry exists in cache.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.IMutableCacheEntry`2.Value">
            <summary>
            Gets, sets or replaces the value associated with the key.
            <para/>
            If <see cref="P:Apache.Ignite.Core.Cache.IMutableCacheEntry`2.Exists"/> is false and setter is called then a mapping is added to the cache 
            visible once the EntryProcessor completes.
            <para/>
            After setter invocation <see cref="P:Apache.Ignite.Core.Cache.IMutableCacheEntry`2.Exists"/> will return true.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Cache.Query.Continuous.ContinuousQuery">
            <summary>
            Continuous query base class, see <see cref="T:Apache.Ignite.Core.Cache.Query.Continuous.ContinuousQuery`2"/>.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Cache.Query.Continuous.ContinuousQuery.DefaultBufferSize">
            <summary>
            Default buffer size.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Cache.Query.Continuous.ContinuousQuery.DefaultAutoUnsubscribe">
            <summary>
            Default auto-unsubscribe flag value.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Query.Continuous.ContinuousQuery.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Cache.Query.Continuous.ContinuousQuery"/> class.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Cache.Query.Continuous.ContinuousQuery.DefaultTimeInterval">
            <summary>
            Default time interval.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Cache.Query.Continuous.ContinuousQuery`2">
            <summary>
            API for configuring continuous cache queries.
            <para/>
            Continuous queries allow to register a remote and a listener for cache update events. 
            If an update event passes the filter, it will be sent to the node that executed the 
            query and listener will be notified on that node.
            <para/>
            Continuous query can either be executed on the whole topology or only on local node.
            <para/>
            In case query is distributed and a new node joins, it will get the filter for the query 
            during discovery process before it actually joins topology, so no updates will be missed.
            <para/>
            To execute the query use method 
            <see cref="M:Apache.Ignite.Core.Cache.ICache`2.QueryContinuous(Apache.Ignite.Core.Cache.Query.Continuous.ContinuousQuery{`0,`1})"/>.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Query.Continuous.ContinuousQuery`2.#ctor(Apache.Ignite.Core.Cache.Event.ICacheEntryEventListener{`0,`1})">
            <summary>
            Constructor.
            </summary>
            <param name="lsnr">Listener.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Query.Continuous.ContinuousQuery`2.#ctor(Apache.Ignite.Core.Cache.Event.ICacheEntryEventListener{`0,`1},System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="lsnr">Listener.</param>
            <param name="loc">Whether query should be executed locally.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Query.Continuous.ContinuousQuery`2.#ctor(Apache.Ignite.Core.Cache.Event.ICacheEntryEventListener{`0,`1},Apache.Ignite.Core.Cache.Event.ICacheEntryEventFilter{`0,`1})">
            <summary>
            Constructor.
            </summary>
            <param name="lsnr">Listener.</param>
            <param name="filter">Filter.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Query.Continuous.ContinuousQuery`2.#ctor(Apache.Ignite.Core.Cache.Event.ICacheEntryEventListener{`0,`1},Apache.Ignite.Core.Cache.Event.ICacheEntryEventFilter{`0,`1},System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="lsnr">Listener.</param>
            <param name="filter">Filter.</param>
            <param name="loc">Whether query should be executed locally.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Query.Continuous.ContinuousQuery`2.Validate">
            <summary>
            Validate continuous query state.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Query.Continuous.ContinuousQuery`2.Listener">
            <summary>
            Cache entry event listener. Invoked on the node where continuous query execution 
            has been started.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Query.Continuous.ContinuousQuery`2.Filter">
            <summary>
            Optional cache entry filter. Invoked on a node where cache event occurred. If filter
            returns <c>false</c>, then cache entry event will not be sent to a node where
            continuous query has been started.
            <para />
            Must be either binary or serializable in case query is not local.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Query.Continuous.ContinuousQuery`2.BufferSize">
            <summary>
            Buffer size. When a cache update happens, entry is first put into a buffer. 
            Entries from buffer will be sent to the master node only if the buffer is 
            full or time provided via <see cref="P:Apache.Ignite.Core.Cache.Query.Continuous.ContinuousQuery`2.TimeInterval"/> is exceeded.
            <para/>
            Defaults to <see cref="F:Apache.Ignite.Core.Cache.Query.Continuous.ContinuousQuery.DefaultBufferSize"/>
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Query.Continuous.ContinuousQuery`2.TimeInterval">
            <summary>
            Time interval. When a cache update happens, entry is first put into a buffer. 
            Entries from buffer will be sent to the master node only if the buffer is full 
            (its size can be provided via <see cref="P:Apache.Ignite.Core.Cache.Query.Continuous.ContinuousQuery`2.BufferSize"/> property) or time provided 
            via this method is exceeded.
            <para/>
            Defaults to <c>0</c> which means that time check is disabled and entries will be 
            sent only when buffer is full.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Query.Continuous.ContinuousQuery`2.AutoUnsubscribe">
            <summary>
            Automatic unsubscribe flag. This flag indicates that query filters on remote nodes 
            should be automatically unregistered if master node (node that initiated the query) 
            leaves topology. If this flag is <c>false</c>, filters will be unregistered only 
            when the query is cancelled from master node, and won't ever be unregistered if 
            master node leaves grid.
            <para />
            Defaults to <c>true</c>.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Query.Continuous.ContinuousQuery`2.Local">
            <summary>
            Local flag. When set query will be executed only on local node, so only local 
            entries will be returned as query result.
            <para />
            Defaults to <c>false</c>.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Cache.Query.Continuous.ContinuousQueryExtensions">
            <summary>
            Extensions for continuous queries.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Query.Continuous.ContinuousQueryExtensions.ToCacheEntryEventFilter``2(Apache.Ignite.Core.Interop.JavaObject)">
            <summary>
            Creates the cache event filter that delegates to the corresponding Java object.
            </summary>
            <typeparam name="TK">Key type.</typeparam>
            <typeparam name="TV">Value type.</typeparam>
        </member>
        <member name="T:Apache.Ignite.Core.Cache.Query.Continuous.IContinuousQueryHandle">
            <summary>
            Represents a continuous query handle.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Cache.Query.Continuous.IContinuousQueryHandle`1">
            <summary>
            Represents a continuous query handle.
            </summary>
            <typeparam name="T">Type of the initial query cursor.</typeparam>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Query.Continuous.IContinuousQueryHandle`1.GetInitialQueryCursor">
            <summary>
            Gets the cursor for initial query.
            Can be called only once, throws exception on consequent calls.
            </summary>
            <returns>Initial query cursor.</returns>
        </member>
        <member name="T:Apache.Ignite.Core.Cache.Query.QueryBase">
            <summary>
            Base class for all Ignite cache entry queries.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Cache.Query.QueryBase.DefaultPageSize">
            <summary> Default page size. </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Query.QueryBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Cache.Query.QueryBase"/> class.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Query.QueryBase.Write(Apache.Ignite.Core.Impl.Binary.BinaryWriter,System.Boolean)">
            <summary>
            Writes this instance to a stream created with a specified delegate.
            </summary>
            <param name="writer">Writer.</param>
            <param name="keepBinary">Keep binary flag.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Query.QueryBase.WriteQueryArgs(Apache.Ignite.Core.Binary.IBinaryRawWriter,System.Object[])">
            <summary>
            Write query arguments.
            </summary>
            <param name="writer">Writer.</param>
            <param name="args">Arguments.</param>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Query.QueryBase.Local">
            <summary>
            Local flag. When set query will be executed only on local node, so only local 
            entries will be returned as query result.
            <para />
            Defaults to <c>false</c>.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Query.QueryBase.PageSize">
            <summary>
            Optional page size. If set to <c>0</c>, then <c>CacheQueryConfiguration.pageSize</c> is used.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Query.QueryBase.OpId">
            <summary>
            Gets the interop opcode.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Cache.Query.ScanQuery`2">
            <summary>
            Scan query over cache entries. Will accept all the entries if no predicate was set.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Query.ScanQuery`2.#ctor(Apache.Ignite.Core.Cache.ICacheEntryFilter{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Cache.Query.ScanQuery`2"/> class.
            </summary>
            <param name="filter">The filter.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Query.ScanQuery`2.Write(Apache.Ignite.Core.Impl.Binary.BinaryWriter,System.Boolean)">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Query.ScanQuery`2.Filter">
            <summary>
            Gets or sets the predicate.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Query.ScanQuery`2.Partition">
            <summary>
            Gets or sets partition number over which this query should iterate. If null, query will iterate 
            over all partitions in the cache. Must be in the range [0, N) where N is partition number in the cache.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Query.ScanQuery`2.OpId">
            <inheritDoc /> 
        </member>
        <member name="T:Apache.Ignite.Core.Cache.Query.SqlFieldsQuery">
            <summary>
            SQL fields query.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Cache.Query.SqlFieldsQuery.DefaultPageSize">
            <summary> Default page size. </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Query.SqlFieldsQuery.#ctor(System.String,System.Object[])">
            <summary>
            Constructor.
            </summary>
            <param name="sql">SQL.</param>
            <param name="args">Arguments.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Query.SqlFieldsQuery.#ctor(System.String,System.Boolean,System.Object[])">
            <summary>
            Constructor,
            </summary>
            <param name="sql">SQL.</param>
            <param name="loc">Whether query should be executed locally.</param>
            <param name="args">Arguments.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Query.SqlFieldsQuery.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Query.SqlFieldsQuery.Sql">
            <summary>
            SQL.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Query.SqlFieldsQuery.Arguments">
            <summary>
            Arguments.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Query.SqlFieldsQuery.Local">
            <summary>
            Local flag. When set query will be executed only on local node, so only local 
            entries will be returned as query result.
            <para />
            Defaults to <c>false</c>.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Query.SqlFieldsQuery.PageSize">
            <summary>
            Optional page size.
            <para/>
            Defaults to <see cref="F:Apache.Ignite.Core.Cache.Query.SqlFieldsQuery.DefaultPageSize"/>.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Query.SqlFieldsQuery.EnableDistributedJoins">
            <summary>
            Gets or sets a value indicating whether distributed joins should be enabled for this query.
            <para />
            When disabled, join results will only contain colocated data (joins work locally).
            When enabled, joins work as expected, no matter how the data is distributed.
            </summary>
            <value>
            <c>true</c> if enable distributed joins should be enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Query.SqlFieldsQuery.EnforceJoinOrder">
            <summary>
            Gets or sets a value indicating whether join order of tables should be enforced.
            <para />
            When true, query optimizer will not reorder tables in join.
            <para />
            It is not recommended to enable this property until you are sure that your indexes
            and the query itself are correct and tuned as much as possible but
            query optimizer still produces wrong join order.
            </summary>
            <value>
              <c>true</c> if join order should be enforced; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Query.SqlFieldsQuery.Timeout">
            <summary>
            Gets or sets the query timeout. Query will be automatically cancelled if the execution timeout is exceeded.
            Default is <see cref="F:System.TimeSpan.Zero"/>, which means no timeout.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Query.SqlFieldsQuery.ReplicatedOnly">
            <summary>
            Gets or sets a value indicating whether this query contains only replicated tables.
            This is a hint for potentially more effective execution.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Query.SqlFieldsQuery.Colocated">
            <summary>
            Gets or sets a value indicating whether this query operates on colocated data.
            <para />
            Whenever Ignite executes a distributed query, it sends sub-queries to individual cluster members.
            If you know in advance that the elements of your query selection are colocated together on the same
            node and you group by colocated key (primary or affinity key), then Ignite can make significant
            performance and network optimizations by grouping data on remote nodes.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Query.SqlFieldsQuery.Schema">
            <summary>
            Gets or sets the default schema name for the query.
            <para />
            If not set, current cache name is used,
            which means you can omit schema name for tables within the current cache.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Query.SqlFieldsQuery.Lazy">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Apache.Ignite.Core.Cache.Query.SqlFieldsQuery"/> is lazy.
            <para/>
            By default Ignite attempts to fetch the whole query result set to memory and send it to the client.
            For small and medium result sets this provides optimal performance and minimize duration of internal
            database locks, thus increasing concurrency.
            <para/>
            If result set is too big to fit in available memory this could lead to excessive GC pauses and even
            OutOfMemoryError. Use this flag as a hint for Ignite to fetch result set lazily, thus minimizing memory
            consumption at the cost of moderate performance hit.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Cache.Query.SqlQuery">
            <summary>
            SQL Query.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Query.SqlQuery.#ctor(System.Type,System.String,System.Object[])">
            <summary>
            Constructor.
            </summary>
            <param name="queryType">Type.</param>
            <param name="sql">SQL.</param>
            <param name="args">Arguments.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Query.SqlQuery.#ctor(System.Type,System.String,System.Boolean,System.Object[])">
            <summary>
            Constructor.
            </summary>
            <param name="queryType">Type.</param>
            <param name="sql">SQL.</param>
            <param name="local">Whether query should be executed locally.</param>
            <param name="args">Arguments.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Query.SqlQuery.#ctor(System.String,System.String,System.Object[])">
            <summary>
            Constructor.
            </summary>
            <param name="queryType">Type.</param>
            <param name="sql">SQL.</param>
            <param name="args">Arguments.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Query.SqlQuery.#ctor(System.String,System.String,System.Boolean,System.Object[])">
            <summary>
            Constructor.
            </summary>
            <param name="queryType">Type.</param>
            <param name="sql">SQL.</param>
            <param name="local">Whether query should be executed locally.</param>
            <param name="args">Arguments.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Query.SqlQuery.Write(Apache.Ignite.Core.Impl.Binary.BinaryWriter,System.Boolean)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Query.SqlQuery.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Query.SqlQuery.QueryType">
            <summary>
            Type.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Query.SqlQuery.Sql">
            <summary>
            SQL.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Query.SqlQuery.Arguments">
            <summary>
            Arguments.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Query.SqlQuery.EnableDistributedJoins">
            <summary>
            Gets or sets a value indicating whether distributed joins should be enabled for this query.
            <para />
            When disabled, join results will only contain colocated data (joins work locally).
            When enabled, joins work as expected, no matter how the data is distributed.
            </summary>
            <value>
            <c>true</c> if enable distributed joins should be enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Query.SqlQuery.Timeout">
            <summary>
            Gets or sets the query timeout. Query will be automatically cancelled if the execution timeout is exceeded.
            Default is <see cref="F:System.TimeSpan.Zero"/>, which means no timeout.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Query.SqlQuery.ReplicatedOnly">
            <summary>
            Gets or sets a value indicating whether this query contains only replicated tables.
            This is a hint for potentially more effective execution.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Query.SqlQuery.OpId">
            <inheritDoc /> 
        </member>
        <member name="T:Apache.Ignite.Core.Cache.Query.TextQuery">
            <summary>
            Text query.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Query.TextQuery.#ctor(System.Type,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="queryType">Type.</param>
            <param name="text">Text.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Query.TextQuery.#ctor(System.Type,System.String,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="queryType">Type.</param>
            <param name="text">Text.</param>
            <param name="local">Whether query should be executed locally.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Query.TextQuery.#ctor(System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="queryType">Type.</param>
            <param name="text">Text.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Query.TextQuery.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="queryType">Type.</param>
            <param name="text">Text.</param>
            <param name="local">Whether query should be executed locally.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Query.TextQuery.Write(Apache.Ignite.Core.Impl.Binary.BinaryWriter,System.Boolean)">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Query.TextQuery.QueryType">
            <summary>
            Type.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Query.TextQuery.Text">
            <summary>
            Text.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Query.TextQuery.OpId">
            <inheritDoc /> 
        </member>
        <member name="T:Apache.Ignite.Core.Cache.Store.CacheParallelLoadStoreAdapter`3">
            <summary>
            Cache storage adapter with parallel loading in LoadAll method. 
            </summary>
            <remarks>
            LoadCache calls GetInputData() and iterates over it in parallel.
            GetInputData().GetEnumerator() result will be disposed if it implements IDisposable.
            Any additional post-LoadCache steps can be performed by overriding LoadCache method.
            </remarks>
            <typeparam name="TK">Key type.</typeparam>
            <typeparam name="TV">Value type.</typeparam>
            <typeparam name="TData">Custom data entry type.</typeparam>
        </member>
        <member name="T:Apache.Ignite.Core.Cache.Store.ICacheStore`2">
             <summary>
             API for cache persistent storage for read-through and write-through behavior.
             <para/>
             Generic argument types depend on <see cref="P:Apache.Ignite.Core.Cache.Configuration.CacheConfiguration.KeepBinaryInStore"/> property.
             When <c>true</c> (default), cache store operates on <see cref="T:Apache.Ignite.Core.Binary.IBinaryObject"/> instances.
             Otherwise, generic arguments should be the same as in corresponding <see cref="T:Apache.Ignite.Core.Cache.ICache`2"/>.
             <para/>
             Persistent store is configured in Ignite's Spring XML configuration file via
             <c>CacheConfiguration.setStore()</c> property. If you have an implementation
             of cache store in .NET, you should use special Java wrapper which accepts assembly name and
             class name of .NET store implementation (both properties are mandatory).
             
             Optionally, you may specify "properies" property to set any property values on an instance of your store.
             <example>
             Here is an example:
             <code>
             &lt;bean class="org.apache.ignite.configuration.CacheConfiguration"&gt;
                 ...
                 &lt;property name="cacheStoreFactory"&gt;
                     &lt;bean class="org.apache.ignite.platform.dotnet.PlatformDotNetCacheStoreFactory"&gt;
                         &lt;property name="assemblyName" value="MyAssembly"/&gt;
                         &lt;property name="className" value="MyApp.MyCacheStore"/&gt;
                         &lt;property name="properties"&gt;
                             &lt;map&gt;
                                 &lt;entry key="IntProperty"&gt;
                                     &lt;value type="java.lang.Integer"&gt;42&lt;/value&gt;
                                 &lt;/entry&gt;
                                 &lt;entry key="StringProperty" value="String value"/&gt;
                             &lt;/map&gt;
                         &lt;/property&gt;
                     &lt;/bean&gt;
                 &lt;/property&gt;
                 ...
             &lt;/bean&gt;
             </code>
             </example>
             Assemply name and class name are passed to <a target="_blank" href="http://msdn.microsoft.com/en-us/library/d133hta4.aspx"><b>System.Activator.CreateInstance(String, String)</b></a>
             method during node startup to create an instance of cache store. Refer to its documentation for details.
             <para/>
             All transactional operations of this API are provided with ongoing <see cref="T:Apache.Ignite.Core.Transactions.ITransaction"/>,
             if any. You can attach any metadata to transaction, e.g. to recognize if several operations 
             belong to the same transaction or not.
             <example>
             Here is an example of how attach a ODBC connection as transaction metadata:
             <code>
             OdbcConnection conn = tx.Meta("some.name");
            
             if (conn == null)
             {
                 conn = ...; // Create or get connection.
            
                 // Store connection in transaction metadata, so it can be accessed
                 // for other operations on the same transaction.
                 tx.AddMeta("some.name", conn);
             }
             </code>
             </example>
             </summary>
             <typeparam name="TK">Key type.</typeparam>
             <typeparam name="TV">Value type.</typeparam>
        </member>
        <member name="T:Apache.Ignite.Core.Cache.Store.ICacheStore">
            <summary>
            Non-generic base type for <see cref="T:Apache.Ignite.Core.Cache.Store.ICacheStore`2"/>, used only for configuration property.
            Users should implement generic <see cref="T:Apache.Ignite.Core.Cache.Store.ICacheStore`2"/>.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Store.ICacheStore`2.LoadCache(System.Action{`0,`1},System.Object[])">
            <summary>
            Loads all values from underlying persistent storage. Note that keys are
            not passed, so it is up to implementation to figure out what to load.
            This method is called whenever <see cref="M:Apache.Ignite.Core.Cache.ICache`2.LocalLoadCache(Apache.Ignite.Core.Cache.ICacheEntryFilter{`0,`1},System.Object[])"/>
            method is invoked which is usually to preload the cache from persistent storage.
            <para/>
            This method is optional, and cache implementation
            does not depend on this method to do anything.
            <para/>
            For every loaded value method provided action should be called.
            The action will then make sure that the loaded value is stored in cache.
            </summary>
            <param name="act">Action for loaded values.</param>
            <param name="args">Optional arguemnts passed to <see cref="M:Apache.Ignite.Core.Cache.ICache`2.LocalLoadCache(Apache.Ignite.Core.Cache.ICacheEntryFilter{`0,`1},System.Object[])"/> method.</param>
            <exception cref="T:Apache.Ignite.Core.Cache.Store.CacheStoreException"/>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Store.ICacheStore`2.Load(`0)">
            <summary>
            Loads an object. Application developers should implement this method to customize the loading 
            of a value for a cache entry. 
            This method is called by a cache when a requested entry is not in the cache. 
            If the object can't be loaded <c>null</c> should be returned.
            </summary>
            <param name="key">The key identifying the object being loaded.</param>
            <returns>The value for the entry that is to be stored in the cache 
            or <c>null</c> if the object can't be loaded</returns>
            <exception cref="T:Apache.Ignite.Core.Cache.Store.CacheStoreException"/>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Store.ICacheStore`2.LoadAll(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Loads multiple objects. Application developers should implement this method to customize 
            the loading of cache entries. This method is called when the requested object is not in the cache. 
            If an object can't be loaded, it is not returned in the resulting map.
            </summary>
            <param name="keys">Keys identifying the values to be loaded.</param>
            <returns>A map of key, values to be stored in the cache.</returns>
            <exception cref="T:Apache.Ignite.Core.Cache.Store.CacheStoreException"/>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Store.ICacheStore`2.Write(`0,`1)">
            <summary>
            Write the specified value under the specified key to the external resource.
            <para/>
            This method is intended to support both key/value creation and value update.
            </summary>
            <param name="key">Key to write.</param>
            <param name="val">Value to write.</param>
            <exception cref="T:Apache.Ignite.Core.Cache.Store.CacheStoreException"/>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Store.ICacheStore`2.WriteAll(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
            Write the specified entries to the external resource. 
            This method is intended to support both insert and update.
            <para/>
            The order that individual writes occur is undefined.
            <para/>
            If this operation fails (by throwing an exception) after a partial success, 
            the writer must remove any successfully written entries from the entries collection 
            so that the caching implementation knows what succeeded and can mutate the cache.
            </summary>
            <param name="entries">a mutable collection to write. Upon invocation,  it contains the entries 
            to write for write-through. Upon return the collection must only contain entries 
            that were not successfully written. (see partial success above).</param>
            <exception cref="T:Apache.Ignite.Core.Cache.Store.CacheStoreException"/>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Store.ICacheStore`2.Delete(`0)">
            <summary>
            Delete the cache entry from the external resource.
            <para/>
            Expiry of a cache entry is not a delete hence will not cause this method to be invoked.
            <para/>
            This method is invoked even if no mapping for the key exists.
            </summary>
            <param name="key">The key that is used for the delete operation.</param>
            <exception cref="T:Apache.Ignite.Core.Cache.Store.CacheStoreException"/>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Store.ICacheStore`2.DeleteAll(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Remove data and keys from the external resource for the given collection of keys, if present.
            <para/>
            The order that individual deletes occur is undefined.
            <para/>
            If this operation fails (by throwing an exception) after a partial success, 
            the writer must remove any successfully written entries from the entries collection 
            so that the caching implementation knows what succeeded and can mutate the cache.
            <para/>
            Expiry of a cache entry is not a delete hence will not cause this method to be invoked.
            <para/>
            This method may include keys even if there is no mapping for that key, 
            in which case the data represented by that key should be removed from the underlying resource.
            </summary>
            <param name="keys">a mutable collection of keys for entries to delete. Upon invocation, 
            it contains the keys to delete for write-through. Upon return the collection must only contain 
            the keys that were not successfully deleted.</param>
            <exception cref="T:Apache.Ignite.Core.Cache.Store.CacheStoreException"/>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Store.ICacheStore`2.SessionEnd(System.Boolean)">
            <summary>
            Tells store to commit or rollback a transaction depending on the value of the
            <c>commit</c> parameter.
            </summary>
            <param name="commit"><c>True</c> if transaction should commit, <c>false</c> for rollback.</param>
            <exception cref="T:Apache.Ignite.Core.Cache.Store.CacheStoreException"/>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Store.CacheParallelLoadStoreAdapter`3.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Store.CacheParallelLoadStoreAdapter`3.LoadCache(System.Action{`0,`1},System.Object[])">
            <summary>
            Loads all values from underlying persistent storage. Note that keys are
            not passed, so it is up to implementation to figure out what to load.
            This method is called whenever <see cref="M:Apache.Ignite.Core.Cache.ICache`2.LocalLoadCache(Apache.Ignite.Core.Cache.ICacheEntryFilter{`0,`1},System.Object[])"/>
            method is invoked which is usually to preload the cache from persistent storage.
            <para/>
            This method is optional, and cache implementation
            does not depend on this method to do anything.
            <para/>
            For every loaded value method provided action should be called.
            The action will then make sure that the loaded value is stored in cache.
            </summary>
            <param name="act">Action for loaded values.</param>
            <param name="args">Optional arguemnts passed to <see cref="M:Apache.Ignite.Core.Cache.ICache`2.LocalLoadCache(Apache.Ignite.Core.Cache.ICacheEntryFilter{`0,`1},System.Object[])"/> method.</param>
            <exception cref="T:Apache.Ignite.Core.Cache.Store.CacheStoreException"/>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Store.CacheParallelLoadStoreAdapter`3.GetInputData">
            <summary>
            Gets the input data sequence to be used in LoadCache.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Store.CacheParallelLoadStoreAdapter`3.Parse(`2,System.Object[])">
            <summary>
            This method should transform raw data records from GetInputData
            into valid key-value pairs to be stored into cache.        
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Store.CacheParallelLoadStoreAdapter`3.Load(`0)">
            <summary>
            Loads an object. Application developers should implement this method to customize the loading
            of a value for a cache entry.
            This method is called by a cache when a requested entry is not in the cache.
            If the object can't be loaded <c>null</c> should be returned.
            </summary>
            <param name="key">The key identifying the object being loaded.</param>
            <returns>
            The value for the entry that is to be stored in the cache
            or <c>null</c> if the object can't be loaded
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Store.CacheParallelLoadStoreAdapter`3.LoadAll(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Loads multiple objects. Application developers should implement this method to customize
            the loading of cache entries. This method is called when the requested object is not in the cache.
            If an object can't be loaded, it is not returned in the resulting map.
            </summary>
            <param name="keys">Keys identifying the values to be loaded.</param>
            <returns>
            A map of key, values to be stored in the cache.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Store.CacheParallelLoadStoreAdapter`3.Write(`0,`1)">
            <summary>
            Write the specified value under the specified key to the external resource.
            <para />
            This method is intended to support both key/value creation and value update.
            </summary>
            <param name="key">Key to write.</param>
            <param name="val">Value to write.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Store.CacheParallelLoadStoreAdapter`3.WriteAll(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
            Write the specified entries to the external resource.
            This method is intended to support both insert and update.
            <para />
            The order that individual writes occur is undefined.
            <para />
            If this operation fails (by throwing an exception) after a partial success,
            the writer must remove any successfully written entries from the entries collection
            so that the caching implementation knows what succeeded and can mutate the cache.
            </summary>
            <param name="entries">a mutable collection to write. Upon invocation,  it contains the entries
            to write for write-through. Upon return the collection must only contain entries
            that were not successfully written. (see partial success above).</param>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Store.CacheParallelLoadStoreAdapter`3.Delete(`0)">
            <summary>
            Delete the cache entry from the external resource.
            <para />
            Expiry of a cache entry is not a delete hence will not cause this method to be invoked.
            <para />
            This method is invoked even if no mapping for the key exists.
            </summary>
            <param name="key">The key that is used for the delete operation.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Store.CacheParallelLoadStoreAdapter`3.DeleteAll(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Remove data and keys from the external resource for the given collection of keys, if present.
            <para />
            The order that individual deletes occur is undefined.
            <para />
            If this operation fails (by throwing an exception) after a partial success,
            the writer must remove any successfully written entries from the entries collection
            so that the caching implementation knows what succeeded and can mutate the cache.
            <para />
            Expiry of a cache entry is not a delete hence will not cause this method to be invoked.
            <para />
            This method may include keys even if there is no mapping for that key,
            in which case the data represented by that key should be removed from the underlying resource.
            </summary>
            <param name="keys">a mutable collection of keys for entries to delete. Upon invocation,
            it contains the keys to delete for write-through. Upon return the collection must only contain
            the keys that were not successfully deleted.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Store.CacheParallelLoadStoreAdapter`3.SessionEnd(System.Boolean)">
            <summary>
            Tells store to commit or rollback a transaction depending on the value of the
            <c>commit</c> parameter.
            </summary>
            <param name="commit"><c>True</c> if transaction should commit, <c>false</c> for rollback.</param>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Store.CacheParallelLoadStoreAdapter`3.MaxDegreeOfParallelism">
            <summary>
            Gets or sets the maximum degree of parallelism to use in LoadCache. 
            Must be either positive or -1 for unlimited amount of threads.
            <para/>
            Defaults to <see cref="P:System.Environment.ProcessorCount"/>.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Cache.Store.CacheStoreAdapter`2">
            <summary>
            Cache storage convenience adapter. It provides default implementation for 
            bulk operations, such as <c>LoadAll</c>, <c>PutAll</c> and
            <c>RemoveAll</c> by sequentially calling corresponding <c>Load</c>,
            <c>Put</c> and <c>Remove</c> operations. Use this adapter whenever 
            such behaviour is acceptable. However in many cases it maybe more preferable 
            to take advantage of database batch update functionality, and therefore default 
            adapter implementation may not be the best option.
            <para/>
            Note that <c>LoadCache</c> method has empty implementation because it is 
            essentially up to the user to invoke it with specific arguments.
            </summary>
            <typeparam name="TK">Key type.</typeparam>
            <typeparam name="TV">Value type.</typeparam>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Store.CacheStoreAdapter`2.LoadCache(System.Action{`0,`1},System.Object[])">
            <summary>
            Loads all values from underlying persistent storage. Note that keys are
            not passed, so it is up to implementation to figure out what to load.
            This method is called whenever <see cref="M:Apache.Ignite.Core.Cache.ICache`2.LocalLoadCache(Apache.Ignite.Core.Cache.ICacheEntryFilter{`0,`1},System.Object[])"/>
            method is invoked which is usually to preload the cache from persistent storage.
            <para/>
            This method is optional, and cache implementation
            does not depend on this method to do anything.
            <para/>
            For every loaded value method provided action should be called.
            The action will then make sure that the loaded value is stored in cache.
            </summary>
            <param name="act">Action for loaded values.</param>
            <param name="args">Optional arguemnts passed to <see cref="M:Apache.Ignite.Core.Cache.ICache`2.LocalLoadCache(Apache.Ignite.Core.Cache.ICacheEntryFilter{`0,`1},System.Object[])"/> method.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Store.CacheStoreAdapter`2.LoadAll(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Loads multiple objects. Application developers should implement this method to customize
            the loading of cache entries. This method is called when the requested object is not in the cache.
            If an object can't be loaded, it is not returned in the resulting map.
            </summary>
            <param name="keys">Keys identifying the values to be loaded.</param>
            <returns>
            A map of key, values to be stored in the cache.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Store.CacheStoreAdapter`2.WriteAll(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
            Writes all.
            </summary>
            <param name="entries">The map.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Store.CacheStoreAdapter`2.DeleteAll(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Remove data and keys from the external resource for the given collection of keys, if present.
            <para />
            The order that individual deletes occur is undefined.
            <para />
            If this operation fails (by throwing an exception) after a partial success,
            the writer must remove any successfully written entries from the entries collection
            so that the caching implementation knows what succeeded and can mutate the cache.
            <para />
            Expiry of a cache entry is not a delete hence will not cause this method to be invoked.
            <para />
            This method may include keys even if there is no mapping for that key,
            in which case the data represented by that key should be removed from the underlying resource.
            </summary>
            <param name="keys">a mutable collection of keys for entries to delete. Upon invocation,
            it contains the keys to delete for write-through. Upon return the collection must only contain
            the keys that were not successfully deleted.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Store.CacheStoreAdapter`2.SessionEnd(System.Boolean)">
            <summary>
            Tells store to commit or rollback a transaction depending on the value of the
            <c>commit</c> parameter.
            </summary>
            <param name="commit"><c>True</c> if transaction should commit, <c>false</c> for rollback.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Store.CacheStoreAdapter`2.Load(`0)">
            <summary>
            Loads an object. Application developers should implement this method to customize the loading
            of a value for a cache entry.
            This method is called by a cache when a requested entry is not in the cache.
            If the object can't be loaded <c>null</c> should be returned.
            </summary>
            <param name="key">The key identifying the object being loaded.</param>
            <returns>
            The value for the entry that is to be stored in the cache
            or <c>null</c> if the object can't be loaded
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Store.CacheStoreAdapter`2.Write(`0,`1)">
            <summary>
            Write the specified value under the specified key to the external resource.
            <para />
            This method is intended to support both key/value creation and value update.
            </summary>
            <param name="key">Key to write.</param>
            <param name="val">Value to write.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Store.CacheStoreAdapter`2.Delete(`0)">
            <summary>
            Delete the cache entry from the external resource.
            <para />
            Expiry of a cache entry is not a delete hence will not cause this method to be invoked.
            <para />
            This method is invoked even if no mapping for the key exists.
            </summary>
            <param name="key">The key that is used for the delete operation.</param>
        </member>
        <member name="T:Apache.Ignite.Core.Cache.Store.CacheStoreException">
            <summary>
            Indicates an error during CacheStore operation.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Store.CacheStoreException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Cache.Store.CacheStoreException"/> class.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Store.CacheStoreException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Cache.Store.CacheStoreException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Store.CacheStoreException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Cache.Store.CacheStoreException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="cause">The cause.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Store.CacheStoreException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Cache.Store.CacheStoreException"/> class.
            </summary>
            <param name="info">Serialization information.</param>
            <param name="ctx">Streaming context.</param>
        </member>
        <member name="T:Apache.Ignite.Core.Common.IFactory`1">
            <summary>
            Factory that produces instances of a specific type.
            Implementation can be passed over the wire and thus should be marked with <see cref="T:System.SerializableAttribute"/>.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Common.IFactory`1.CreateInstance">
            <summary>
            Creates an instance of the cache store.
            </summary>
            <returns>New instance of the cache store.</returns>
        </member>
        <member name="T:Apache.Ignite.Core.Cache.Store.ICacheStoreSession">
            <summary>
            Session for the cache store operations. The main purpose of cache store session
            is to hold context between multiple store invocations whenever in transaction. For example,
            you can save current database connection in the session <see cref="P:Apache.Ignite.Core.Cache.Store.ICacheStoreSession.Properties"/> map. You can then
            commit this connection in the <see cref="M:Apache.Ignite.Core.Cache.Store.ICacheStore`2.SessionEnd(System.Boolean)"/> method.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Store.ICacheStoreSession.CacheName">
            <summary>
            Cache name for the current store operation. Note that if the same store
            is reused between different caches, then the cache name will change between
            different store operations.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Store.ICacheStoreSession.Properties">
            <summary>
            Current session properties. You can add properties directly to the returned map.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Common.ClientDisconnectedException">
            <summary>
            Indicates that client-mode local node has been disconnected from the cluster.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Common.ClientDisconnectedException._clientReconnectTask">
            <summary>
            The client reconnect task.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Common.ClientDisconnectedException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Common.ClientDisconnectedException"/> class.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Common.ClientDisconnectedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Common.ClientDisconnectedException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Common.ClientDisconnectedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Common.ClientDisconnectedException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="cause">The cause.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Common.ClientDisconnectedException.#ctor(System.String,System.Exception,System.Threading.Tasks.Task{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Common.ClientDisconnectedException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="cause">The cause.</param>
            <param name="clientReconnectTask">The client reconnect task.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Common.ClientDisconnectedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Common.ClientDisconnectedException"/> class.
            </summary>
            <param name="info">Serialization information.</param>
            <param name="ctx">Streaming context.</param>
        </member>
        <member name="P:Apache.Ignite.Core.Common.ClientDisconnectedException.ClientReconnectTask">
            <summary>
            Gets the client reconnect task, if present.
            </summary>
            <value>
            The client reconnect task, or null.
            </value>
        </member>
        <member name="T:Apache.Ignite.Core.Cluster.ClusterGroupEmptyException">
            <summary>
            Indicates an illegal call on empty projection. Thrown by projection when operation
            that requires at least one node is called on empty projection.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Cluster.ClusterGroupEmptyException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Cluster.ClusterGroupEmptyException"/> class.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Cluster.ClusterGroupEmptyException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Cluster.ClusterGroupEmptyException"/> class.
            </summary>
            <param name="msg">Exception message.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Cluster.ClusterGroupEmptyException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Cluster.ClusterGroupEmptyException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="cause">The cause.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Cluster.ClusterGroupEmptyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Cluster.ClusterGroupEmptyException"/> class.
            </summary>
            <param name="info">Serialization info.</param>
            <param name="ctx">Streaming context.</param>
        </member>
        <member name="T:Apache.Ignite.Core.Cluster.ClusterTopologyException">
            <summary>
            Indicates an error with grid topology (e.g., crashed node, etc.)
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Cluster.ClusterTopologyException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Cluster.ClusterTopologyException"/> class.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Cluster.ClusterTopologyException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Cluster.ClusterTopologyException"/> class.
            </summary>
            <param name="msg">Exception message.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Cluster.ClusterTopologyException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Cluster.ClusterTopologyException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="cause">The cause.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Cluster.ClusterTopologyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Cluster.ClusterTopologyException"/> class.
            </summary>
            <param name="info">Serialization info.</param>
            <param name="ctx">Streaming context.</param>
        </member>
        <member name="T:Apache.Ignite.Core.Cluster.ICluster">
            <summary>
            Represents whole cluster (group of all nodes in a cluster).
            <para/>
            All members are thread-safe and may be used concurrently from multiple threads.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Cluster.IClusterGroup">
            <summary>
            Defines grid projection which represents a common functionality over a group of nodes.
            Grid projection allows to group Ignite nodes into various subgroups to perform distributed
            operations on them. All ForXXX(...)' methods will create a child grid projection
            from existing projection. If you create a new projection from current one, then the resulting
            projection will include a subset of nodes from current projection. The following code snippet
            shows how to create grid projections:
            <code>
            var g = Ignition.GetIgnite();
            
            // Projection over remote nodes.
            var remoteNodes = g.ForRemotes();
            
            // Projection over random remote node.
            var randomNode = g.ForRandom();
            
            // Projection over all nodes with cache named "myCache" enabled.
            var cacheNodes = g.ForCacheNodes("myCache");
            
            // Projection over all nodes that have user attribute "group" set to value "worker".
            var workerNodes = g.ForAttribute("group", "worker");
            </code>
            Grid projection provides functionality for executing tasks and closures over 
            nodes in this projection using <see cref="M:Apache.Ignite.Core.Cluster.IClusterGroup.GetCompute"/>.
            <para/>
            All members are thread-safe and may be used concurrently from multiple threads.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Cluster.IClusterGroup.GetCompute">
            <summary>
            Gets compute functionality over this grid projection. All operations
            on the returned ICompute instance will only include nodes from
            this projection.
            </summary>
            <returns>Compute instance over this grid projection.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Cluster.IClusterGroup.ForNodes(System.Collections.Generic.IEnumerable{Apache.Ignite.Core.Cluster.IClusterNode})">
            <summary>
            Creates a grid projection over a given set of nodes.
            </summary>
            <param name="nodes">Collection of nodes to create a projection from.</param>
            <returns>Projection over provided Ignite nodes.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Cluster.IClusterGroup.ForNodes(Apache.Ignite.Core.Cluster.IClusterNode[])">
            <summary>
            Creates a grid projection over a given set of nodes.
            </summary>
            <param name="nodes">Collection of nodes to create a projection from.</param>
            <returns>Projection over provided Ignite nodes.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Cluster.IClusterGroup.ForNodeIds(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Creates a grid projection over a given set of node IDs.
            </summary>
            <param name="ids">Collection of node IDs to create a projection from.</param>
            <returns>Projection over provided Ignite node IDs.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Cluster.IClusterGroup.ForNodeIds(System.Guid[])">
            <summary>
            Creates a grid projection over a given set of node IDs.
            </summary>
            <param name="ids">Collection of node IDs to create a projection from.</param>
            <returns>Projection over provided Ignite node IDs.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Cluster.IClusterGroup.ForPredicate(System.Func{Apache.Ignite.Core.Cluster.IClusterNode,System.Boolean})">
            <summary>
            Creates a grid projection which includes all nodes that pass the given predicate filter.
            </summary>
            <param name="p">Predicate filter for nodes to include into this projection.</param>
            <returns>Grid projection for nodes that passed the predicate filter.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Cluster.IClusterGroup.ForAttribute(System.String,System.String)">
            <summary>
            Creates projection for nodes containing given name and value
            specified in user attributes.
            </summary>
            <param name="name">Name of the attribute.</param>
            <param name="val">Optional attribute value to match.</param>
            <returns>Grid projection for nodes containing specified attribute.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Cluster.IClusterGroup.ForCacheNodes(System.String)">
            <summary>
            Creates projection for all nodes that have cache with specified name running.
            </summary>
            <param name="name">Cache name to include into projection.</param>
            <returns>Projection over nodes that have specified cache running.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Cluster.IClusterGroup.ForDataNodes(System.String)">
            <summary>
            Creates projection for all nodes that have cache with specified name running 
            and cache distribution mode is PARTITIONED_ONLY or NEAR_PARTITIONED.
            </summary>
            <param name="name">Cache name to include into projection.</param>
            <returns>Projection over nodes that have specified cache running.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Cluster.IClusterGroup.ForClientNodes(System.String)">
            <summary>
            Creates projection for all nodes that have cache with specified name running 
            and cache distribution mode is CLIENT_ONLY or NEAR_ONLY.
            </summary>
            <param name="name">Cache name to include into projection.</param>
            <returns>Projection over nodes that have specified cache running.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Cluster.IClusterGroup.ForRemotes">
            <summary>
            Gets grid projection consisting from the nodes in this projection excluding the local node.
            </summary>
            <returns>Grid projection consisting from the nodes in this projection excluding the local node.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Cluster.IClusterGroup.ForDaemons">
            <summary>
            Gets a cluster group consisting of the daemon nodes.
            <para />
            Daemon nodes are the usual grid nodes that participate in topology but not visible on the main APIs, 
            i.e. they are not part of any cluster group. The only way to see daemon nodes is to use this method.
            <para />
            Daemon nodes are used primarily for management and monitoring functionality that
            is build on Ignite and needs to participate in the topology, but also needs to be
            excluded from the "normal" topology, so that it won't participate in the task execution
            or in-memory data grid storage.
            </summary>
            <returns>Cluster group consisting of the daemon nodes.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Cluster.IClusterGroup.ForHost(Apache.Ignite.Core.Cluster.IClusterNode)">
            <summary>
            Gets grid projection consisting from the nodes in this projection residing on the
            same host as given node.
            </summary>
            <param name="node">Node residing on the host for which projection is created.</param>
            <returns>Projection for nodes residing on the same host as passed in node.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Cluster.IClusterGroup.ForRandom">
            <summary>
            Creates grid projection with one random node from current projection.
            </summary>
            <returns>Grid projection with one random node from current projection.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Cluster.IClusterGroup.ForOldest">
            <summary>
            Creates grid projection with one oldest node in the current projection.
            The resulting projection is dynamic and will always pick the next oldest
            node if the previous one leaves topology even after the projection has
            been created.
            </summary>
            <returns>Grid projection with one oldest node from the current projection.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Cluster.IClusterGroup.ForYoungest">
            <summary>
            Creates grid projection with one youngest node in the current projection.
            The resulting projection is dynamic and will always pick the newest
            node in the topology, even if more nodes entered after the projection
            has been created.
            </summary>
            <returns>Grid projection with one youngest node from the current projection.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Cluster.IClusterGroup.ForDotNet">
            <summary>
            Creates grid projection for nodes supporting .Net, i.e. for nodes started with Apache.Ignite.exe.
            </summary>
            <returns>Grid projection for nodes supporting .Net.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Cluster.IClusterGroup.ForServers">
            <summary>
            Creates a cluster group of nodes started in server mode (<see cref="P:Apache.Ignite.Core.IgniteConfiguration.ClientMode"/>).
            </summary>
            <returns>Cluster group of nodes started in server mode.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Cluster.IClusterGroup.GetNodes">
            <summary>
            Gets read-only collections of nodes in this projection.
            </summary>
            <returns>All nodes in this projection.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Cluster.IClusterGroup.GetNode(System.Guid)">
            <summary>
            Gets a node for given ID from this grid projection.
            </summary>
            <param name="id">Node ID.</param>
            <returns>Node with given ID from this projection or null if such node does not 
            exist in this projection.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Cluster.IClusterGroup.GetNode">
            <summary>
            Gets first node from the list of nodes in this projection.
            </summary>
            <returns>Node.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Cluster.IClusterGroup.GetMetrics">
            <summary>
            Gets a metrics snapshot for this projection
            </summary>
            <returns>Grid projection metrics snapshot.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Cluster.IClusterGroup.GetMessaging">
            <summary>
            Gets messaging facade over nodes within this cluster group.  All operations on the returned 
            <see cref="T:Apache.Ignite.Core.Messaging.IMessaging"/>&gt; instance will only include nodes from current cluster group.
            </summary>
            <returns>Messaging instance over this cluster group.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Cluster.IClusterGroup.GetEvents">
            <summary>
            Gets events facade over nodes within this cluster group.  All operations on the returned 
            <see cref="T:Apache.Ignite.Core.Events.IEvents"/>&gt; instance will only include nodes from current cluster group.
            </summary>
            <returns>Events instance over this cluster group.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Cluster.IClusterGroup.GetServices">
            <summary>
            Gets services facade over nodes within this cluster group.  All operations on the returned 
            <see cref="T:Apache.Ignite.Core.Services.IServices"/>&gt; instance will only include nodes from current cluster group.
            </summary>
            <returns>Services instance over this cluster group.</returns>
        </member>
        <member name="P:Apache.Ignite.Core.Cluster.IClusterGroup.Ignite">
            <summary>
            Instance of Ignite.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Cluster.ICluster.ForLocal">
            <summary>
            Gets monadic projection consisting from the local node.
            </summary>
            <returns>Monadic projection consisting from the local node.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Cluster.ICluster.GetLocalNode">
            <summary>
            Gets local Ignite node.
            </summary>
            <returns>Local Ignite node.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Cluster.ICluster.PingNode(System.Guid)">
            <summary>
            Pings a remote node.
            </summary>
            <param name="nodeId">ID of a node to ping.</param>
            <returns>True if node for a given ID is alive, false otherwise.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Cluster.ICluster.GetTopology(System.Int64)">
            <summary>
            Gets a topology by version. Returns null if topology history storage doesn't contain 
            specified topology version (history currently keeps the last 1000 snapshots).
            </summary>
            <param name="ver">Topology version.</param>
            <returns>Collection of Ignite nodes which represented by specified topology version, 
            if it is present in history storage, null otherwise.</returns>
            <exception cref="T:Apache.Ignite.Core.Common.IgniteException">If underlying SPI implementation does not support 
            topology history. Currently only <c>org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi</c>
            supports topology history.</exception>
        </member>
        <member name="M:Apache.Ignite.Core.Cluster.ICluster.ResetMetrics">
            <summary>
            Resets local I/O, job, and task execution metrics.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cluster.ICluster.TopologyVersion">
            <summary>
            Gets current topology version. In case of TCP discovery topology versions are sequential 
            - they start from 1 and get incremented every time whenever a node joins or leaves. 
            For other discovery SPIs topology versions may not be (and likely are not) sequential.
            </summary>
            <value>
            Current topology version.
            </value>
        </member>
        <member name="P:Apache.Ignite.Core.Cluster.ICluster.ClientReconnectTask">
            <summary>
            Gets the reconnect task, which will transition to Completed state 
            when local client node reconnects to the cluster. 
            <para />
            Result of the task indicates whether cluster has been restarted.
            <para />
            If local node is not in client mode or is not disconnected, returns completed task.
            </summary>
            <value>
            The reconnect task.
            </value>
        </member>
        <member name="T:Apache.Ignite.Core.Cluster.IClusterMetrics">
            <summary>
            Represents runtime information of a cluster. Apart from obvious
            statistical value, this information is used for implementation of
            load balancing, failover, and collision SPIs. For example, collision SPI
            in combination with fail-over SPI could check if other nodes don't have
            any active or waiting jobs and fail-over some jobs to those nodes.
            <para/>
            Node metrics for any node can be accessed via <see cref="M:Apache.Ignite.Core.Cluster.IClusterNode.GetMetrics"/> 
            method. Keep in mind that there will be a certain network delay (usually
            equal to heartbeat delay) for the accuracy of node metrics. However, when accessing
            metrics on local node the metrics are always accurate and up to date.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cluster.IClusterMetrics.LastUpdateTime">
            <summary>
            Last update time of this node metrics.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cluster.IClusterMetrics.MaximumActiveJobs">
            <summary>
            Maximum number of jobs that ever ran concurrently on this node.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cluster.IClusterMetrics.CurrentActiveJobs">
            <summary>
            Number of currently active jobs concurrently executing on the node.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cluster.IClusterMetrics.AverageActiveJobs">
            <summary>
            Average number of active jobs. 
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cluster.IClusterMetrics.MaximumWaitingJobs">
            <summary>
            Maximum number of waiting jobs.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cluster.IClusterMetrics.CurrentWaitingJobs">
            <summary>
            Number of queued jobs currently waiting to be executed.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cluster.IClusterMetrics.AverageWaitingJobs">
            <summary>
            Average number of waiting jobs.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cluster.IClusterMetrics.MaximumRejectedJobs">
            <summary>
            Maximum number of jobs rejected at once.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cluster.IClusterMetrics.CurrentRejectedJobs">
            <summary>
            Number of jobs rejected after more recent collision resolution operation.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cluster.IClusterMetrics.AverageRejectedJobs">
            <summary>
            Average number of jobs this node rejects during collision resolution operations.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cluster.IClusterMetrics.TotalRejectedJobs">
            <summary>
            Total number of jobs this node rejects during collision resolution operations since node startup.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cluster.IClusterMetrics.MaximumCancelledJobs">
            <summary>
            Maximum number of cancelled jobs ever had running concurrently.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cluster.IClusterMetrics.CurrentCancelledJobs">
            <summary>
            Number of cancelled jobs that are still running.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cluster.IClusterMetrics.AverageCancelledJobs">
            <summary>
            Average number of cancelled jobs.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cluster.IClusterMetrics.TotalCancelledJobs">
            <summary>
            Total number of cancelled jobs since node startup.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cluster.IClusterMetrics.TotalExecutedJobs">
            <summary>
            Total number of jobs handled by the node since node startup.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cluster.IClusterMetrics.MaximumJobWaitTime">
            <summary>
            Maximum time a job ever spent waiting in a queue to be executed.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cluster.IClusterMetrics.CurrentJobWaitTime">
            <summary>
            Current time an oldest jobs has spent waiting to be executed.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cluster.IClusterMetrics.AverageJobWaitTime">
            <summary>
            Average time jobs spend waiting in the queue to be executed.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cluster.IClusterMetrics.MaximumJobExecuteTime">
            <summary>
            Time it took to execute the longest job on the node.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cluster.IClusterMetrics.CurrentJobExecuteTime">
            <summary>
            Longest time a current job has been executing for.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cluster.IClusterMetrics.AverageJobExecuteTime">
            <summary>
            Average job execution time.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cluster.IClusterMetrics.TotalExecutedTasks">
            <summary>
            Total number of jobs handled by the node. 
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cluster.IClusterMetrics.TotalBusyTime">
            <summary>
            Total time this node spent executing jobs.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cluster.IClusterMetrics.TotalIdleTime">
            <summary>
            Total time this node spent idling.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cluster.IClusterMetrics.CurrentIdleTime">
            <summary>
            Time this node spend idling since executing last job.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cluster.IClusterMetrics.BusyTimePercentage">
            <summary>
            Percentage of time this node is busy.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cluster.IClusterMetrics.IdleTimePercentage">
            <summary>
            Percentage of time this node is idle
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cluster.IClusterMetrics.TotalCpus">
            <summary>
            Returns the number of CPUs available to the Java Virtual Machine.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cluster.IClusterMetrics.CurrentCpuLoad">
            <summary>
            Returns the CPU usage usage in [0, 1] range.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cluster.IClusterMetrics.AverageCpuLoad">
            <summary>
            Average of CPU load values in [0, 1] range over all metrics kept in the history.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cluster.IClusterMetrics.CurrentGcCpuLoad">
            <summary>
            Average time spent in CG since the last update.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cluster.IClusterMetrics.HeapMemoryInitialized">
            <summary>
            Amount of heap memory in bytes that the JVM
            initially requests from the operating system for memory management.
            This method returns <c>-1</c> if the initial memory size is undefined.
            <para />
            This value represents a setting of the heap memory for Java VM and is
            not a sum of all initial heap values for all memory pools.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cluster.IClusterMetrics.HeapMemoryUsed">
            <summary>
            Current heap size that is used for object allocation.
            The heap consists of one or more memory pools. This value is
            the sum of used heap memory values of all heap memory pools.
            <para />
            The amount of used memory in the returned is the amount of memory
            occupied by both live objects and garbage objects that have not
            been collected, if any.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cluster.IClusterMetrics.HeapMemoryCommitted">
            <summary>
            Amount of heap memory in bytes that is committed for the JVM to use. This amount of memory is
            guaranteed for the JVM to use. The heap consists of one or more memory pools. This value is
            the sum of committed heap memory values of all heap memory pools.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cluster.IClusterMetrics.HeapMemoryMaximum">
            <summary>
            Mmaximum amount of heap memory in bytes that can be used for memory management.
            This method returns <c>-1</c> if the maximum memory size is undefined.
            <para />
            This amount of memory is not guaranteed to be available for memory management if 
            it is greater than the amount of committed memory. The JVM may fail to allocate
            memory even if the amount of used memory does not exceed this maximum size.
            <para />
            This value represents a setting of the heap memory for Java VM and is
            not a sum of all initial heap values for all memory pools.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cluster.IClusterMetrics.HeapMemoryTotal">
            <summary>
            Total amount of heap memory in bytes. This method returns <c>-1</c>
            if the total memory size is undefined.
            <para />
            This amount of memory is not guaranteed to be available for memory management if it is 
            greater than the amount of committed memory. The JVM may fail to allocate memory even 
            if the amount of used memory does not exceed this maximum size.
            <para />
            This value represents a setting of the heap memory for Java VM and is
            not a sum of all initial heap values for all memory pools.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cluster.IClusterMetrics.NonHeapMemoryInitialized">
            <summary>
            Amount of non-heap memory in bytes that the JVM initially requests from the operating 
            system for memory management.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cluster.IClusterMetrics.NonHeapMemoryUsed">
            <summary>
            Current non-heap memory size that is used by Java VM.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cluster.IClusterMetrics.NonHeapMemoryCommitted">
            <summary>
            Amount of non-heap memory in bytes that is committed for the JVM to use. 
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cluster.IClusterMetrics.NonHeapMemoryMaximum">
            <summary>
            Maximum amount of non-heap memory in bytes that can be used for memory management.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cluster.IClusterMetrics.NonHeapMemoryTotal">
            <summary>
            Total amount of non-heap memory in bytes that can be used for memory management. 
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cluster.IClusterMetrics.Uptime">
            <summary>
            Uptime of the JVM in milliseconds.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cluster.IClusterMetrics.StartTime">
            <summary>
            Start time of the JVM in milliseconds.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cluster.IClusterMetrics.NodeStartTime">
            <summary>
            Start time of the Ignite node in milliseconds.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cluster.IClusterMetrics.CurrentThreadCount">
            <summary>
            Current number of live threads.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cluster.IClusterMetrics.MaximumThreadCount">
            <summary>
            The peak live thread count.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cluster.IClusterMetrics.TotalStartedThreadCount">
            <summary>
            The total number of threads started.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cluster.IClusterMetrics.CurrentDaemonThreadCount">
            <summary>
            Current number of live daemon threads.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cluster.IClusterMetrics.LastDataVersion">
            <summary>
            Ignite assigns incremental versions to all cache operations. This property provides
            the latest data version on the node.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cluster.IClusterMetrics.SentMessagesCount">
            <summary>
            Sent messages count 
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cluster.IClusterMetrics.SentBytesCount">
            <summary>
            Sent bytes count.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cluster.IClusterMetrics.ReceivedMessagesCount">
            <summary>
            Received messages count.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cluster.IClusterMetrics.ReceivedBytesCount">
            <summary>
            Received bytes count.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cluster.IClusterMetrics.OutboundMessagesQueueSize">
            <summary>
            Outbound messages queue size.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cluster.IClusterMetrics.TotalNodes">
            <summary>
            Gets total number of nodes.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Cluster.IClusterNode">
            <summary>
            Interface representing a single cluster node. Use <see cref="M:Apache.Ignite.Core.Cluster.IClusterNode.GetAttribute``1(System.String)"/> or
            <see cref="M:Apache.Ignite.Core.Cluster.IClusterNode.GetMetrics"/> to get static and dynamic information about remote nodes.
            You can get a list of all nodes in grid by calling <see cref="M:Apache.Ignite.Core.Cluster.IClusterGroup.GetNodes"/> 
            on <see cref="T:Apache.Ignite.Core.IIgnite"/> instance.
            <para/>
            You can use Ignite node attributes to provide static information about a node.
            This information is initialized once within grid, during node startup, and
            remains the same throughout the lifetime of a node. 
            <para/>
            All members are thread-safe and may be used concurrently from multiple threads.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Cluster.IClusterNode.GetAttribute``1(System.String)">
            <summary>
            Gets node's attribute. Attributes are assigned to nodes at startup.
            <para />
            Note that attributes cannot be changed at runtime.
            </summary>
            <param name="name">Attribute name.</param>
            <returns>Attribute value.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Cluster.IClusterNode.TryGetAttribute``1(System.String,``0@)">
            <summary>
            Try getting node's attribute. Attributes are assigned to nodes at startup.
            <para />
            Note that attributes cannot be changed at runtime.
            </summary>
            <param name="name">Attribute name.</param>
            <param name="attr">Attribute value.</param>
            <returns><c>true</c> in case such attribute exists.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Cluster.IClusterNode.GetAttributes">
            <summary>
            Gets all node attributes. Attributes are assigned to nodes at startup.
            <para />
            Note that attributes cannot be changed at runtime.
            </summary>
            <returns>All node attributes.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Cluster.IClusterNode.GetMetrics">
            <summary>
            Gets metrics snapshot for this node. Note that node metrics are constantly updated
            and provide up to date information about nodes. For example, you can get
            an idea about CPU load on remote node via <see cref="P:Apache.Ignite.Core.Cluster.IClusterMetrics.CurrentCpuLoad"/>.
            <para/>
            Node metrics are updated with some delay which is directly related to heartbeat
            frequency. For example, when used with default <c>GridTcpDiscoverySpi</c> the 
            update will happen every <c>2</c> seconds.
            </summary>
            <returns>Runtime metrics snapshot for this node.</returns>
        </member>
        <member name="P:Apache.Ignite.Core.Cluster.IClusterNode.Id">
            <summary>
            Globally unique node ID. A new ID is generated every time a node restarts.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cluster.IClusterNode.Addresses">
            <summary>
            Collection of addresses this node is known by. 
            </summary>
            <returns>Collection of addresses.</returns>
        </member>
        <member name="P:Apache.Ignite.Core.Cluster.IClusterNode.HostNames">
            <summary>
            Collection of host names this node is known by.
            </summary>
            <returns>Collection of host names.</returns>
        </member>
        <member name="P:Apache.Ignite.Core.Cluster.IClusterNode.Order">
            <summary>
            Node order within grid topology. Discovery SPIs that support node ordering will
            assign a proper order to each node and will guarantee that discovery event notifications
            for new nodes will come in proper order. All other SPIs not supporting ordering
            may choose to return node startup time here.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cluster.IClusterNode.IsLocal">
            <summary>
            Tests whether or not this node is a local node.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cluster.IClusterNode.IsDaemon">
            <summary>
            Tests whether or not this node is a daemon.
            <p/>
            Daemon nodes are the usual Ignite nodes that participate in topology but not
            visible on the main APIs, i.e. they are not part of any projections.
            <p/>
            Daemon nodes are used primarily for management and monitoring functionality that
            is build on Ignite and needs to participate in the topology but should be
            excluded from "normal" topology so that it won't participate in task execution
            or in-memory database.
            <p/>
            Application code should never use daemon nodes.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cluster.IClusterNode.IsClient">
            <summary>
            Gets a value indicating whether or not this node is connected to cluster as a client.
            <para />
            Do not confuse client in terms of discovery and client in terms of cache. 
            Cache clients cannot carry data, while topology clients connect to the topology in a different way.
            </summary>
            <value>   
            <c>true</c> if this node is a client node, <c>false otherwise.</c>.
            </value>
        </member>
        <member name="T:Apache.Ignite.Core.Cluster.IClusterNodeFilter">
            <summary>
            Represents cluster node filter.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Cluster.IClusterNodeFilter.Invoke(Apache.Ignite.Core.Cluster.IClusterNode)">
            <summary>
            Returns a value indicating whether provided node satisfies this predicate.
            </summary>
            <param name="node">Cluster node.</param>
            <returns>Value indicating whether provided node satisfies this predicate.</returns>
        </member>
        <member name="T:Apache.Ignite.Core.Common.IgniteFutureCancelledException">
            <summary>
            Indicates future cancellation within Ignite.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Common.IgniteFutureCancelledException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Common.IgniteFutureCancelledException"/> class.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Common.IgniteFutureCancelledException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Common.IgniteFutureCancelledException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Common.IgniteFutureCancelledException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Common.IgniteFutureCancelledException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="cause">The cause.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Common.IgniteFutureCancelledException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Common.IgniteFutureCancelledException"/> class.
            </summary>
            <param name="info">Serialization information.</param>
            <param name="ctx">Streaming context.</param>
        </member>
        <member name="T:Apache.Ignite.Core.Common.IgniteGuid">
            <summary>
            Ignite guid with additional local ID.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Common.IgniteGuid._globalId">
            Global id. 
        </member>
        <member name="F:Apache.Ignite.Core.Common.IgniteGuid._localId">
            Local id. 
        </member>
        <member name="M:Apache.Ignite.Core.Common.IgniteGuid.#ctor(System.Guid,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Common.IgniteGuid"/> struct.
            </summary>
            <param name="globalId">The global id.</param>
            <param name="localId">The local id.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Common.IgniteGuid.#ctor(Apache.Ignite.Core.Binary.IBinaryRawReader)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Common.IgniteGuid"/> struct.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Common.IgniteGuid.Equals(Apache.Ignite.Core.Common.IgniteGuid)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Common.IgniteGuid.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/>, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Common.IgniteGuid.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and
            data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Common.IgniteGuid.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Common.IgniteGuid.op_Equality(Apache.Ignite.Core.Common.IgniteGuid,Apache.Ignite.Core.Common.IgniteGuid)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="a">First item.</param>
            <param name="b">Second item.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Common.IgniteGuid.op_Inequality(Apache.Ignite.Core.Common.IgniteGuid,Apache.Ignite.Core.Common.IgniteGuid)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="a">First item.</param>
            <param name="b">Second item.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Common.IgniteGuid.Apache#Ignite#Core#Impl#Binary#IBinaryWriteAware#WriteBinary(Apache.Ignite.Core.Binary.IBinaryWriter)">
            <summary>
            Writes this object to the given writer.
            </summary>
            <param name="writer">Writer.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:Apache.Ignite.Core.Common.IgniteGuid.GlobalId">
            <summary>
            Gets the global id.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Common.IgniteGuid.LocalId">
            <summary>
            Gets the local id.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Binary.Metadata.BinaryField">
            <summary>
            Binary field metadata.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.Metadata.BinaryField._typeId">
            Type ID. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.Metadata.BinaryField._fieldId">
            Field ID. 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.Metadata.BinaryField.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Impl.Binary.Metadata.BinaryField"/> class.
            </summary>
            <param name="typeId">Type ID.</param>
            <param name="fieldId">Field ID.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.Metadata.BinaryField.#ctor(Apache.Ignite.Core.Binary.IBinaryRawReader)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Impl.Binary.Metadata.BinaryField"/> class.
            </summary>
            <param name="reader">Reader.</param>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.Metadata.BinaryField.TypeId">
            <summary>
            Type ID.
            </summary>
            <returns>Type ID</returns>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.Metadata.BinaryField.FieldId">
            <summary>
            Field ID.
            </summary>
            <returns>Field ID</returns>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Binary.SerializableSerializer">
            <summary>
            Serializes classes that implement <see cref="T:System.Runtime.Serialization.ISerializable"/>.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.SerializableSerializer._serializableTypeDesc">
            
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.SerializableSerializer.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Impl.Binary.SerializableSerializer"/> class.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.SerializableSerializer.WriteBinary``1(``0,Apache.Ignite.Core.Impl.Binary.BinaryWriter)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.SerializableSerializer.ReadBinary``1(Apache.Ignite.Core.Impl.Binary.BinaryReader,Apache.Ignite.Core.Impl.Binary.IBinaryTypeDescriptor,System.Int32,System.Type)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.SerializableSerializer.WriteDotNetFields(Apache.Ignite.Core.Binary.IBinaryRawWriter,System.Collections.Generic.ICollection{System.String})">
            <summary>
            Writes .NET-specific fields.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.SerializableSerializer.ReadDotNetFields(Apache.Ignite.Core.Binary.IBinaryRawReader)">
            <summary>
            Writes .NET-specific fields.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.SerializableSerializer.WriteFieldNames(Apache.Ignite.Core.Impl.Binary.BinaryWriter,System.Runtime.Serialization.SerializationInfo)">
            <summary>
            Writes the field names.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.SerializableSerializer.ReadFieldNames(Apache.Ignite.Core.Impl.Binary.BinaryReader,Apache.Ignite.Core.Impl.Binary.IBinaryTypeDescriptor)">
            <summary>
            Gets the field names.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.SerializableSerializer.GetBinaryTypeFields(Apache.Ignite.Core.Impl.Binary.BinaryReader,Apache.Ignite.Core.Impl.Binary.IBinaryTypeDescriptor)">
            <summary>
            Gets the binary type fields.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.SerializableSerializer.WriteCustomTypeInfo(Apache.Ignite.Core.Impl.Binary.BinaryWriter,System.Type)">
            <summary>
            Writes the custom type information.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.SerializableSerializer.GetCustomType(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.ISerializable)">
            <summary>
            Gets the custom serialization type.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.SerializableSerializer.ReadCustomTypeInfo(Apache.Ignite.Core.Impl.Binary.BinaryReader)">
            <summary>
            Reads the custom type information.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.SerializableSerializer.WriteSerializationInfo(Apache.Ignite.Core.Binary.IBinaryWriter,System.Runtime.Serialization.SerializationInfo)">
            <summary>
            Writes the serialization information.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.SerializableSerializer.WriteEntry(Apache.Ignite.Core.Binary.IBinaryWriter,System.Runtime.Serialization.SerializationEntry)">
            <summary>
            Writes the serialization entry.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.SerializableSerializer.GetEntries(System.Runtime.Serialization.SerializationInfo)">
            <summary>
            Gets the entries.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.SerializableSerializer.ReadSerializationInfo(Apache.Ignite.Core.Impl.Binary.BinaryReader,System.Collections.Generic.IEnumerable{System.String},System.Type,System.Collections.Generic.ICollection{System.Int32})">
            <summary>
            Reads the serialization information.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.SerializableSerializer.ReadAsCustomType(System.Type,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Reads the object as a custom type.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.SerializableSerializer.GetStreamingContext">
            <summary>
            Gets the streaming context.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.SerializableSerializer.ReadField(Apache.Ignite.Core.Binary.IBinaryReader,System.String,System.Collections.Generic.ICollection{System.Int32})">
            <summary>
            Reads the field.
            <para />
            Java side does not have counterparts for byte, ushort, uint, ulong.
            For such fields we write a special boolean field indicating the type.
            If special field is present, then the value has to be converted to .NET-specific type.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.SerializableSerializer.ConvertArray``2(``0[])">
            <summary>
            Converts the array.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.SerializableSerializer.SupportsHandles">
            <inheritdoc /> 
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Binary.BinaryWriterExtensions">
            <summary>
            Writer extensions.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryWriterExtensions.WriteBooleanNullable(Apache.Ignite.Core.Binary.IBinaryRawWriter,System.Nullable{System.Boolean})">
            <summary>
            Writes the nullable boolean.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryWriterExtensions.WriteIntNullable(Apache.Ignite.Core.Binary.IBinaryRawWriter,System.Nullable{System.Int32})">
            <summary>
            Writes the nullable boolean.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryWriterExtensions.WriteTimeSpanAsLong(Apache.Ignite.Core.Binary.IBinaryRawWriter,System.TimeSpan)">
            <summary>
            Writes the timespan.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryWriterExtensions.WriteTimeSpanAsLongNullable(Apache.Ignite.Core.Binary.IBinaryRawWriter,System.Nullable{System.TimeSpan})">
            <summary>
            Writes the nullable boolean.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryWriterExtensions.WriteCollection``2(Apache.Ignite.Core.Impl.Binary.BinaryWriter,System.Collections.Generic.ICollection{``0},System.Func{``0,``1})">
            <summary>
            Write collection.
            </summary>
            <param name="writer">Writer.</param>
            <param name="vals">Values.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The same writer for chaining.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryWriterExtensions.WriteEnumerable``1(Apache.Ignite.Core.Impl.Binary.BinaryWriter,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Write enumerable.
            </summary>
            <param name="writer">Writer.</param>
            <param name="vals">Values.</param>
            <returns>The same writer for chaining.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryWriterExtensions.WriteEnumerable``2(Apache.Ignite.Core.Impl.Binary.BinaryWriter,System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Write enumerable.
            </summary>
            <param name="writer">Writer.</param>
            <param name="vals">Values.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The same writer for chaining.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryWriterExtensions.WriteDictionary``2(Apache.Ignite.Core.Impl.Binary.BinaryWriter,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            Write dictionary.
            </summary>
            <param name="writer">Writer.</param>
            <param name="vals">Values.</param>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Binary.DeserializationCallbackProcessor">
            <summary>
            Tracks object graph and invokes <see cref="T:System.Runtime.Serialization.IDeserializationCallback"/>.
            <para/>
            <see cref="M:System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System.Object)"/> must be called after entire object graph has been
            deserialized. We preserve all objects in a thread-local list and invoke callbacks once all objects
            are fully deserialized.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.DeserializationCallbackProcessor.Graph">
            <summary>
            Object graph for current thread.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.DeserializationCallbackProcessor.Push(System.Object)">
            <summary>
            Register an object for deserialization callback.
            </summary>
            <param name="obj">The object.</param>
            <returns>Id of the object.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.DeserializationCallbackProcessor.Pop">
            <summary>
            Called when deserialization of an object has completed.
            When Pop() has been called for all registered objects, all callbacks are invoked.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.DeserializationCallbackProcessor.Clear">
            <summary>
            Clears all registered objects.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Binary.DeserializationCallbackProcessor.ObjectGraph">
            <summary>
            Object graph.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.DeserializationCallbackProcessor.ObjectGraph._objects">
            
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.DeserializationCallbackProcessor.ObjectGraph.Depth">
            <summary>
            Gets or sets the depth.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.DeserializationCallbackProcessor.ObjectGraph.Objects">
            <summary>
            Gets the objects.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Binary.ReflectionUtils">
            <summary>
            Reflection utils.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.ReflectionUtils.GetAllFields(System.Type)">
            <summary>
            Gets all fields, including base classes.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Binary.TypeNameParser">
            <summary>
            Parses .NET-style type names and deconstructs them into parts.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.TypeNameParser._start">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.TypeNameParser._typeName">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.TypeNameParser._pos">
            
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.TypeNameParser.#ctor(System.String,System.Int32@)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Impl.Binary.TypeNameParser"/> class.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.TypeNameParser.Parse(System.String)">
            <summary>
            Parses the specified type name.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.TypeNameParser.GetName">
            <summary>
            Gets the type name (without namespace).
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.TypeNameParser.GetNameWithNamespace">
            <summary>
            Gets the full type name (with namespace).
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.TypeNameParser.GetFullName">
            <summary>
            Gets the full name (with namespace, generics and arrays).
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.TypeNameParser.GetArray">
            <summary>
            Gets the array part.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.TypeNameParser.GetAssemblyName">
            <summary>
            Gets assembly name part.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.TypeNameParser.Parse">
            <summary>
            Parses this instance.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.TypeNameParser.ParseTypeName">
            <summary>
            Parses the type name with namespace.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.TypeNameParser.ParseGeneric">
            <summary>
            Parses the generic part.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.TypeNameParser.ParseArrayDefinition">
            <summary>
            Parses the array definition.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.TypeNameParser.ParseAssemblyName">
            <summary>
            Parses assembly name part.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.TypeNameParser.Shift">
            <summary>
            Shifts the position forward.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.TypeNameParser.RequireShift">
            <summary>
            Requires position shift or throws an error.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.TypeNameParser.SkipSpaces">
            <summary>
            Skips the spaces.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.TypeNameParser.ToString">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.TypeNameParser.NameStart">
            <summary>
            Gets the name start.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.TypeNameParser.NameEnd">
            <summary>
            Gets the name end.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.TypeNameParser.FullNameEnd">
            <summary>
            Gets the name end.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.TypeNameParser.AssemblyStart">
            <summary>
            Gets the start of the assembly name.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.TypeNameParser.AssemblyEnd">
            <summary>
            Gets the start of the assembly name.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.TypeNameParser.ArrayStart">
            <summary>
            Gets the start of the array definition.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.TypeNameParser.ArrayEnd">
            <summary>
            Gets the start of the array definition.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.TypeNameParser.Generics">
            <summary>
            Gets the generics.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.TypeNameParser.End">
            <summary>
            Gets a value indicating whether we are at the end of the string.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.TypeNameParser.Char">
            <summary>
            Gets the current character.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Cache.IQueryEntityInternal">
            <summary>
            Extended QueryEntity interface for internal needs.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.IQueryEntityInternal.GetAlias(System.String)">
            <summary>
            Gets the alias by field name, or null when no match found.
            This method constructs a dictionary lazily to perform lookups.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Cache.MemoryMetrics">
            <summary>
            Memory metrics.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.MemoryMetrics.#ctor(Apache.Ignite.Core.Binary.IBinaryRawReader)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Impl.Cache.MemoryMetrics"/> class.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.MemoryMetrics.Name">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.MemoryMetrics.TotalAllocatedPages">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.MemoryMetrics.AllocationRate">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.MemoryMetrics.EvictionRate">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.MemoryMetrics.LargeEntriesPagesPercentage">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.MemoryMetrics.PageFillFactor">
            <inheritdoc /> 
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Cache.Store.CacheStore">
            <summary>
            Interop cache store, delegates to generic <see cref="T:Apache.Ignite.Core.Impl.Cache.Store.CacheStoreInternal`2"/> wrapper.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.Store.CacheStore._store">
            Store. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.Store.CacheStore._handle">
            
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.Store.CacheStore.#ctor(Apache.Ignite.Core.Impl.Cache.Store.ICacheStoreInternal,Apache.Ignite.Core.Impl.Handle.HandleRegistry)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Impl.Cache.Store.CacheStore"/> class.
            </summary>
            <param name="store">Store.</param>
            <param name="registry">The handle registry.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.Store.CacheStore.CreateInstance(System.Int64,Apache.Ignite.Core.Impl.Handle.HandleRegistry)">
            <summary>
            Creates interop cache store from a stream.
            </summary>
            <param name="memPtr">Memory pointer.</param>
            <param name="registry">The handle registry.</param>
            <returns>
            Interop cache store.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.Store.CacheStore.Init(Apache.Ignite.Core.Impl.Ignite)">
            <summary>
            Initializes this instance with a grid.
            </summary>
            <param name="grid">Grid.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.Store.CacheStore.Invoke(Apache.Ignite.Core.Impl.Memory.PlatformMemoryStream,Apache.Ignite.Core.Impl.Ignite)">
            <summary>
            Invokes a store operation.
            </summary>
            <param name="stream">Input stream.</param>
            <param name="grid">Grid.</param>
            <returns>Invocation result.</returns>
            <exception cref="T:Apache.Ignite.Core.Common.IgniteException">Invalid operation type:  + opType</exception>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.Store.CacheStore.GetCacheStoreInterface(Apache.Ignite.Core.Cache.Store.ICacheStore)">
            <summary>
            Gets the generic <see cref="T:Apache.Ignite.Core.Cache.Store.ICacheStore`2"/> interface type.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.Store.CacheStore.Handle">
            <summary>
            Gets the handle.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Cache.Store.ICacheStoreInternal">
            <summary>
            Provides a non-generic way to work with <see cref="T:Apache.Ignite.Core.Impl.Cache.Store.CacheStoreInternal`2"/>.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.Store.ICacheStoreInternal.Invoke(Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream,Apache.Ignite.Core.Impl.Ignite)">
            <summary>
            Invokes a store operation.
            </summary>
            <param name="stream">Input stream.</param>
            <param name="grid">Grid.</param>
            <returns>Invocation result.</returns>
            <exception cref="T:Apache.Ignite.Core.Common.IgniteException">Invalid operation type:  + opType</exception>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.Store.ICacheStoreInternal.Init(Apache.Ignite.Core.Impl.Ignite)">
            <summary>
            Initializes this instance with a grid.
            </summary>
            <param name="grid">Grid.</param>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Transactions.CacheTransactionManager">
            <summary>
            Cache transaction enlistment manager, 
            allows using Ignite transactions via standard <see cref="T:System.Transactions.TransactionScope"/>.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Transactions.CacheTransactionManager._transactions">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Transactions.CacheTransactionManager.Enlistment">
            
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Transactions.CacheTransactionManager.#ctor(Apache.Ignite.Core.Transactions.ITransactions)">
            <summary>
            Initializes a new instance of <see cref="T:Apache.Ignite.Core.Impl.Transactions.CacheTransactionManager"/> class.
            </summary>
            <param name="transactions">Transactions.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Transactions.CacheTransactionManager.StartTx">
            <summary>
            If ambient transaction is present, starts an Ignite transaction and enlists it.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Transactions.CacheTransactionManager.System#Transactions#IEnlistmentNotification#Prepare(System.Transactions.PreparingEnlistment)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Transactions.CacheTransactionManager.System#Transactions#IEnlistmentNotification#Commit(System.Transactions.Enlistment)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Transactions.CacheTransactionManager.System#Transactions#IEnlistmentNotification#Rollback(System.Transactions.Enlistment)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Transactions.CacheTransactionManager.System#Transactions#IEnlistmentNotification#InDoubt(System.Transactions.Enlistment)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Transactions.CacheTransactionManager.ConvertTransactionIsolation(System.Transactions.IsolationLevel)">
            <summary>
            Converts the isolation level from .NET-specific to Ignite-specific.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Cache.Expiry.ExpiryPolicyFactory">
            <summary>
            Factory.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.Expiry.ExpiryPolicyFactory._expiryPolicy">
            
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.Expiry.ExpiryPolicyFactory.#ctor(Apache.Ignite.Core.Cache.Expiry.IExpiryPolicy)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Impl.Cache.Expiry.ExpiryPolicyFactory"/> class.
            </summary>
            <param name="expiryPolicy">The expiry policy.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.Expiry.ExpiryPolicyFactory.CreateInstance">
            <inheritdoc /> 
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Cache.Expiry.ExpiryPolicySerializer">
            <summary>
            Writer for <see cref="T:Apache.Ignite.Core.Cache.Expiry.IExpiryPolicy"/>.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.Expiry.ExpiryPolicySerializer.DurUnchanged">
            Duration: unchanged. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.Expiry.ExpiryPolicySerializer.DurEternal">
            Duration: eternal. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.Expiry.ExpiryPolicySerializer.DurZero">
            Duration: zero. 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.Expiry.ExpiryPolicySerializer.WritePolicy(Apache.Ignite.Core.Binary.IBinaryRawWriter,Apache.Ignite.Core.Cache.Expiry.IExpiryPolicy)">
            <summary>
            Writes the policy.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.Expiry.ExpiryPolicySerializer.ReadPolicy(Apache.Ignite.Core.Binary.IBinaryRawReader)">
            <summary>
            Reads the policy.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.Expiry.ExpiryPolicySerializer.WritePolicyFactory(Apache.Ignite.Core.Binary.IBinaryRawWriter,Apache.Ignite.Core.Common.IFactory{Apache.Ignite.Core.Cache.Expiry.IExpiryPolicy})">
            <summary>
            Writes the policy factory.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.Expiry.ExpiryPolicySerializer.ReadPolicyFactory(Apache.Ignite.Core.Binary.IBinaryRawReader)">
            <summary>
            Reads the expiry policy factory.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.Expiry.ExpiryPolicySerializer.ConvertDuration(System.Nullable{System.TimeSpan})">
            <summary>
            Convert TimeSpan to duration recognizable by Java.
            </summary>
            <param name="dur">.NET duration.</param>
            <returns>Java duration in milliseconds.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.Expiry.ExpiryPolicySerializer.ConvertDuration(System.Int64)">
            <summary>
            Convert duration recognizable by Java to TimeSpan.
            </summary>
            <param name="dur">Java duration.</param>
            <returns>.NET duration.</returns>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Cache.ICacheLockInternal">
            <summary>
            Internal cache locking interface.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.ICacheLockInternal.Enter(System.Int64)">
            <summary>
            Enters the lock.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.ICacheLockInternal.TryEnter(System.Int64,System.TimeSpan)">
            <summary>
            Tries to enter the lock.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.ICacheLockInternal.Exit(System.Int64)">
            <summary>
            Exits the lock.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.ICacheLockInternal.Close(System.Int64)">
            <summary>
            Closes the lock.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Common.Listenable">
            <summary>
            Platform listenable.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Common.Listenable.OpCancel">
            
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Common.Listenable.#ctor(Apache.Ignite.Core.Impl.IPlatformTargetInternal)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Impl.Common.Listenable"/> class.
            </summary>
            <param name="target">Target.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Common.Listenable.Cancel">
            <summary>
            Cancels the listenable.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Common.Platform">
            <summary>
            Represents an Ignite platform.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Common.Platform.Java">
            <summary>
            Java platform.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Common.Platform.DotNet">
            <summary>
            .NET platform.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Binary.UserSerializerProxy">
            <summary>
            User-defined serializer wrapper.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.UserSerializerProxy._serializer">
            
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.UserSerializerProxy.#ctor(Apache.Ignite.Core.Binary.IBinarySerializer)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Impl.Binary.UserSerializerProxy"/> class.
            </summary>
            <param name="serializer">The serializer.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.UserSerializerProxy.WriteBinary``1(``0,Apache.Ignite.Core.Impl.Binary.BinaryWriter)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.UserSerializerProxy.ReadBinary``1(Apache.Ignite.Core.Impl.Binary.BinaryReader,Apache.Ignite.Core.Impl.Binary.IBinaryTypeDescriptor,System.Int32,System.Type)">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.UserSerializerProxy.SupportsHandles">
            <inheritdoc /> 
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Cache.Affinity.AffinityFunctionSerializer">
            <summary>
            Affinity function read/write methods.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.Affinity.AffinityFunctionSerializer.TypeCodeNull">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.Affinity.AffinityFunctionSerializer.TypeCodeRendezvous">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.Affinity.AffinityFunctionSerializer.TypeCodeUser">
            
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.Affinity.AffinityFunctionSerializer.Write(Apache.Ignite.Core.Binary.IBinaryRawWriter,Apache.Ignite.Core.Cache.Affinity.IAffinityFunction,System.Object)">
            <summary>
            Writes the instance.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.Affinity.AffinityFunctionSerializer.Read(Apache.Ignite.Core.Binary.IBinaryRawReader)">
            <summary>
            Reads the instance.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.Affinity.AffinityFunctionSerializer.WritePartitions(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{Apache.Ignite.Core.Cluster.IClusterNode}},Apache.Ignite.Core.Impl.Memory.PlatformMemoryStream,Apache.Ignite.Core.Impl.Binary.Marshaller)">
            <summary>
            Writes the partitions assignment to a stream.
            </summary>
            <param name="parts">The parts.</param>
            <param name="stream">The stream.</param>
            <param name="marsh">The marshaller.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.Affinity.AffinityFunctionSerializer.ReadPartitions(Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream,Apache.Ignite.Core.Impl.Binary.Marshaller)">
            <summary>
            Reads the partitions assignment from a stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="marsh">The marshaller.</param>
            <returns>Partitions assignment.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.Affinity.AffinityFunctionSerializer.GetOverrideFlags(System.Type)">
            <summary>
            Gets the override flags.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.Affinity.AffinityFunctionSerializer.WriteUserFunc(Apache.Ignite.Core.Binary.IBinaryRawWriter,Apache.Ignite.Core.Cache.Affinity.IAffinityFunction,System.Object)">
            <summary>
            Writes the user function.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Cache.Affinity.AffinityFunctionSerializer.UserOverrides">
            <summary>
            Overridden function flags.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Cache.Affinity.PlatformAffinityFunction">
            <summary>
            Affinity function that delegates to Java.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.Affinity.PlatformAffinityFunction.#ctor(Apache.Ignite.Core.Impl.IPlatformTargetInternal)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Impl.Cache.Affinity.PlatformAffinityFunction"/> class.
            </summary>
            <param name="target">Target.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.Affinity.PlatformAffinityFunction.GetPartition(System.Object)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.Affinity.PlatformAffinityFunction.RemoveNode(System.Guid)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.Affinity.PlatformAffinityFunction.AssignPartitions(Apache.Ignite.Core.Cache.Affinity.AffinityFunctionContext)">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.Affinity.PlatformAffinityFunction.Partitions">
            <inheritdoc /> 
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Cache.Affinity.PlatformAffinityFunction.Op">
            Opcodes. 
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Common.ObjectInfoHolder">
            <summary>
            Holds the information to instantiate an object and set its properties.
            Typically used for .NET objects defined in Spring XML.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Common.ObjectInfoHolder._typeName">
            Type name. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Common.ObjectInfoHolder._properties">
            Properties. 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Common.ObjectInfoHolder.#ctor(Apache.Ignite.Core.Binary.IBinaryRawReader)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Impl.Common.ObjectInfoHolder"/> class.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Common.ObjectInfoHolder.CreateInstance``1">
            <summary>
            Creates an instance according to type name and properties.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Common.ObjectInfoHolder.WriteBinary(Apache.Ignite.Core.Binary.IBinaryWriter)">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Common.ObjectInfoHolder.TypeName">
            <summary>
            Gets the name of the type.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Common.ObjectInfoHolder.Properties">
            <summary>
            Gets the properties.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Cache.Event.JavaCacheEntryEventFilter`2">
            <summary>
            Cache entry event filter that delegates to Java.
            </summary>
            <typeparam name="TK">Key type.</typeparam>
            <typeparam name="TV">Value type.</typeparam>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Common.PlatformJavaObjectFactoryProxy">
            <summary>
            Maps to PlatformJavaObjectFactoryProxy in Java.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Common.PlatformJavaObjectFactoryProxy._factoryType">
            Type code. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Common.PlatformJavaObjectFactoryProxy._factoryClassName">
            Java class name 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Common.PlatformJavaObjectFactoryProxy._payload">
            Optional payload. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Common.PlatformJavaObjectFactoryProxy._properties">
            Properties to set 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Common.PlatformJavaObjectFactoryProxy.#ctor(Apache.Ignite.Core.Impl.Common.PlatformJavaObjectFactoryProxy.FactoryType,System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Impl.Common.PlatformJavaObjectFactoryProxy"/> class.
            </summary>
            <param name="type">The type.</param>
            <param name="factoryClassName">Name of the factory class.</param>
            <param name="payload">The payload.</param>
            <param name="properties">The properties.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Common.PlatformJavaObjectFactoryProxy.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Impl.Common.PlatformJavaObjectFactoryProxy"/> class.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Common.PlatformJavaObjectFactoryProxy.WriteBinary(Apache.Ignite.Core.Binary.IBinaryWriter)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Common.PlatformJavaObjectFactoryProxy.GetRawProxy">
            <summary>
            Gets the raw proxy (not the derived type) for serialization.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Common.PlatformJavaObjectFactoryProxy.FactoryType">
            <summary>
            Represents the factory type.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.Event.JavaCacheEntryEventFilter`2.Evaluate(Apache.Ignite.Core.Cache.Event.ICacheEntryEvent{`0,`1})">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.Event.JavaCacheEntryEventFilter`2.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Impl.Cache.Event.JavaCacheEntryEventFilter`2"/> class.
            </summary>
            <param name="factoryClassName">Name of the factory class.</param>
            <param name="properties">The properties.</param>
        </member>
        <member name="T:Apache.Ignite.Core.Compute.ComputeExecutionRejectedException">
            <summary>
            Indicates a situation when execution service provided by the user in configuration rejects execution.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Compute.ComputeExecutionRejectedException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Compute.ComputeExecutionRejectedException"/> class.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Compute.ComputeExecutionRejectedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Compute.ComputeExecutionRejectedException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Compute.ComputeExecutionRejectedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Compute.ComputeExecutionRejectedException"/> class.
            </summary>
            <param name="info">Serialization information.</param>
            <param name="ctx">Streaming context.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Compute.ComputeExecutionRejectedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Compute.ComputeExecutionRejectedException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="cause">The cause.</param>
        </member>
        <member name="T:Apache.Ignite.Core.Compute.ComputeJobAdapter`1">
            <summary>
            Convenience adapter for <see cref="T:Apache.Ignite.Core.Compute.IComputeJob`1"/> implementations. It provides the following functionality:
            <ul>
            <li>
                 Default implementation of <see cref="M:Apache.Ignite.Core.Compute.IComputeJob`1.Cancel"/> method and ability
                 to check whether cancellation occurred with <see cref="M:Apache.Ignite.Core.Compute.ComputeJobAdapter`1.IsCancelled"/> method.
            </li>
            <li>
                 Ability to set and get job arguments via <see cref="M:Apache.Ignite.Core.Compute.ComputeJobAdapter`1.SetArguments(System.Object[])"/>
                 and <see cref="M:Apache.Ignite.Core.Compute.ComputeJobAdapter`1.GetArgument``1(System.Int32)"/> methods.
            </li>
            </ul>
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Compute.IComputeJob`1">
            <summary>
            Defines executable unit for <see cref="T:Apache.Ignite.Core.Compute.IComputeTask`3"/>. Ignite task gets split into jobs
            when <see cref="M:Apache.Ignite.Core.Compute.IComputeTask`3.Map(System.Collections.Generic.IList{Apache.Ignite.Core.Cluster.IClusterNode},`0)"/> method is called. This
            method returns all jobs for the task mapped to their corresponding Ignite nodes for execution. 
            Grid will then serialize this jobs and send them to requested nodes for execution.
            <para/>
            Once job execution is complete, the return value will be sent back to parent task and will 
            be passed into 
            <see cref="M:Apache.Ignite.Core.Compute.IComputeTask`3.OnResult(Apache.Ignite.Core.Compute.IComputeJobResult{`1},System.Collections.Generic.IList{Apache.Ignite.Core.Compute.IComputeJobResult{`1}})"/>
            method via <see cref="T:Apache.Ignite.Core.Compute.IComputeJobResult`1"/> instance. 
            <para/>
            Ignite job implementation can be injected with <see cref="T:Apache.Ignite.Core.IIgnite"/> using 
            <see cref="T:Apache.Ignite.Core.Resource.InstanceResourceAttribute"/> attribute.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Compute.IComputeJob`1.Execute">
            <summary>
            Executes this job.
            </summary>
            <returns>Job execution result (possibly <c>null</c>). This result will be returned
            in <see cref="T:Apache.Ignite.Core.Compute.IComputeJobResult`1"/> object passed into 
            <see cref="M:Apache.Ignite.Core.Compute.IComputeTask`3.OnResult(Apache.Ignite.Core.Compute.IComputeJobResult{`1},System.Collections.Generic.IList{Apache.Ignite.Core.Compute.IComputeJobResult{`1}})"/>
            on caller node.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Compute.IComputeJob`1.Cancel">
            <summary>
            This method is called when system detects that completion of this
            job can no longer alter the overall outcome (for example, when parent task
            has already reduced the results). 
            <para />
            Note that job cancellation is only a hint, and it is really up to the actual job
            instance to gracefully finish execution and exit.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Compute.ComputeJobAdapter`1._cancelled">
            Cancelled flag 
        </member>
        <member name="F:Apache.Ignite.Core.Compute.ComputeJobAdapter`1._args">
            Arguments. 
        </member>
        <member name="M:Apache.Ignite.Core.Compute.ComputeJobAdapter`1.#ctor">
            <summary>
            No-arg constructor.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Compute.ComputeJobAdapter`1.#ctor(System.Object[])">
            <summary>
            Creates job with specified arguments.
            </summary>
            <param name="args">Optional job arguments.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Compute.ComputeJobAdapter`1.Cancel">
            <summary>
            This method is called when system detects that completion of this
            job can no longer alter the overall outcome (for example, when parent task
            has already reduced the results).
            <para />
            Note that job cancellation is only a hint, and it is really up to the actual job
            instance to gracefully finish execution and exit.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Compute.ComputeJobAdapter`1.SetArguments(System.Object[])">
            <summary>
            Sets given arguments.
            </summary>
            <param name="args">Optional job arguments to set.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Compute.ComputeJobAdapter`1.GetArgument``1(System.Int32)">
            <summary>
            Sets given arguments.
            </summary>
            <param name="idx">Index of the argument.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Compute.ComputeJobAdapter`1.IsCancelled">
            <summary>
            This method tests whether or not this job was cancelled. This method
            is thread-safe and can be called without extra synchronization.
            <p/>
            This method can be periodically called in <see cref="M:Apache.Ignite.Core.Compute.IComputeJob`1.Execute"/> method
            implementation to check whether or not this job cancelled. Note that system
            calls <see cref="M:Apache.Ignite.Core.Compute.IComputeJob`1.Cancel"/> method only as a hint and this is a responsibility of
            the implementation of the job to properly cancel its execution.
            </summary>
            <returns><c>True</c> if this job was cancelled, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Compute.ComputeJobAdapter`1.Execute">
            <summary>
            Executes this job.
            </summary>
            <returns>
            Job execution result (possibly <c>null</c>). This result will be returned
            in <see cref="T:Apache.Ignite.Core.Compute.IComputeJobResult`1"/> object passed into
            <see cref="M:Apache.Ignite.Core.Compute.IComputeTask`3.OnResult(Apache.Ignite.Core.Compute.IComputeJobResult{`1},System.Collections.Generic.IList{Apache.Ignite.Core.Compute.IComputeJobResult{`1}})"/>
            on caller node.
            </returns>
        </member>
        <member name="T:Apache.Ignite.Core.Compute.ComputeJobFailoverException">
            <summary>
            This runtime exception can be thrown from <see cref="M:Apache.Ignite.Core.Compute.IComputeJob`1.Execute"/>
            method to force job failover to another node within task topology.
            <see cref="T:Apache.Ignite.Core.Compute.IComputeFunc`2"/> or <see cref="T:Apache.Ignite.Core.Compute.IComputeFunc`1"/>
            passed into any of the <see cref="T:Apache.Ignite.Core.Compute.ICompute"/> methods can also throw this exception
            to force failover.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Compute.ComputeJobFailoverException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Compute.ComputeJobFailoverException"/> class.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Compute.ComputeJobFailoverException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Compute.ComputeJobFailoverException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Compute.ComputeJobFailoverException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Compute.ComputeJobFailoverException"/> class.
            </summary>
            <param name="info">Serialization information.</param>
            <param name="ctx">Streaming context.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Compute.ComputeJobFailoverException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Compute.ComputeJobFailoverException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="cause">The cause.</param>
        </member>
        <member name="T:Apache.Ignite.Core.Compute.ComputeJobResultPolicy">
            <summary>
            This enumeration provides different types of actions following the last received job result. See 
            <see cref="M:Apache.Ignite.Core.Compute.IComputeTask`3.OnResult(Apache.Ignite.Core.Compute.IComputeJobResult{`1},System.Collections.Generic.IList{Apache.Ignite.Core.Compute.IComputeJobResult{`1}})"/>
            for more details.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Compute.ComputeJobResultPolicy.Wait">
            <summary>
            Wait for results if any are still expected. If all results have been received -
            it will start reducing results.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Compute.ComputeJobResultPolicy.Reduce">
            <summary>
            Ignore all not yet received results and start reducing results.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Compute.ComputeJobResultPolicy.Failover">
            <summary>
            Fail-over job to execute on another node.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Compute.ComputeTaskAdapter`3">
            <summary>
            Convenience adapter for <see cref="T:Apache.Ignite.Core.Compute.IComputeTask`3"/> interface
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Compute.IComputeTask`3">
            <summary>
            Ignite task interface defines a task that can be executed on the grid. Ignite task
            is responsible for splitting business logic into multiple Ignite jobs, receiving
            results from individual Ignite jobs executing on remote nodes, and reducing
            (aggregating) received jobs' results into final Ignite task result.
            <para/>
            Upon request to execute a task, the system will do the following:
            <list type="bullet">
                <item>
                    <description>Inject annotated resources into task instance.</description>
                </item>
                <item>
                    <description>Apply <see cref="M:Apache.Ignite.Core.Compute.IComputeTask`3.Map(System.Collections.Generic.IList{Apache.Ignite.Core.Cluster.IClusterNode},`0)"/>.
                    This method is responsible for splitting business logic into multiple jobs 
                    (units of execution) and mapping them to Ignite nodes.</description>
                </item>
                <item>
                    <description>System will send mapped Ignite jobs to their respective nodes.</description>
                </item>
                <item>
                    <description>Once job execution results become available, <see cref="M:Apache.Ignite.Core.Compute.IComputeTask`3.OnResult(Apache.Ignite.Core.Compute.IComputeJobResult{`1},System.Collections.Generic.IList{Apache.Ignite.Core.Compute.IComputeJobResult{`1}})"/> method
                    will be called for ech received job result. The policy returned by this method will
                    determine the way task reacts to every job result.
                    <para/>
                    If <see cref="F:Apache.Ignite.Core.Compute.ComputeJobResultPolicy.Wait"/> is returned, task will continue to wait
                    for other job results. If this result is the last job result, then reduce phase will be
                    started.
                    <para/>
                    If <see cref="F:Apache.Ignite.Core.Compute.ComputeJobResultPolicy.Reduce"/> is returned, reduce phase will be started
                    right away without waiting for other jobs completion (all remaining jobs will receive cancel 
                    request).
                    <para/>
                    If <see cref="F:Apache.Ignite.Core.Compute.ComputeJobResultPolicy.Failover"/> is returned, job will be failed over to 
                    another node for execution. Note that if you use <see cref="T:Apache.Ignite.Core.Compute.ComputeTaskAdapter`3"/>, it will
                    automatically fail jobs to another node for 2 well-known failure cases: 1) job has failed to due
                    to node crash (in this case <see cref="P:Apache.Ignite.Core.Compute.IComputeJobResult`1.Exception"/> will return 
                    <see cref="T:Apache.Ignite.Core.Cluster.ClusterTopologyException"/>); 2) job execution was rejected, i.e. remote node 
                    has cancelled job before it got a chance to execute, while it still was on the waiting list. 
                    (in this case <see cref="P:Apache.Ignite.Core.Compute.IComputeJobResult`1.Exception"/> will return 
                    <see cref="T:Apache.Ignite.Core.Compute.ComputeExecutionRejectedException"/>).
                    </description>
                </item>
                <item>
                    <description>Once all results are received or  <see cref="M:Apache.Ignite.Core.Compute.IComputeTask`3.OnResult(Apache.Ignite.Core.Compute.IComputeJobResult{`1},System.Collections.Generic.IList{Apache.Ignite.Core.Compute.IComputeJobResult{`1}})"/>
                    method returned <see cref="F:Apache.Ignite.Core.Compute.ComputeJobResultPolicy.Reduce"/> policy, method <see cref="M:Apache.Ignite.Core.Compute.IComputeTask`3.Reduce(System.Collections.Generic.IList{Apache.Ignite.Core.Compute.IComputeJobResult{`1}})"/>
                    is called to aggregate received results into one final result. Once this method is finished the 
                    execution of the Ignite task is complete. This result will be returned to the user through future.
                    </description>    
                </item>
            </list>
            </summary>
            <typeparam name="TArg">Argument type.</typeparam>
            <typeparam name="TJobRes">Type of job result.</typeparam>
            <typeparam name="TRes">Type of final task result after reduce.</typeparam>
        </member>
        <member name="M:Apache.Ignite.Core.Compute.IComputeTask`3.Map(System.Collections.Generic.IList{Apache.Ignite.Core.Cluster.IClusterNode},`0)">
            <summary>
            This method is called to map or split Ignite task into multiple Ignite jobs. This is the
            first method that gets called when task execution starts.
            </summary>
            <param name="subgrid">Nodes available for this task execution. Note that order of nodes is
            guaranteed to be randomized by container. This ensures that every time you simply iterate 
            through Ignite nodes, the order of nodes will be random which over time should result into 
            all nodes being used equally.</param>
            <param name="arg">Task execution argument. Can be <c>null</c>. This is the same argument
            as the one passed into <c>ICompute.Execute()</c> methods.</param>
            <returns>Map of Ignite jobs assigned to subgrid node. If <c>null</c> or empty map is returned,
            exception will be thrown.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Compute.IComputeTask`3.OnResult(Apache.Ignite.Core.Compute.IComputeJobResult{`1},System.Collections.Generic.IList{Apache.Ignite.Core.Compute.IComputeJobResult{`1}})">
            <summary>
            Asynchronous callback invoked every time a result from remote execution is
            received. It is ultimately upto this method to return a policy based
            on which the system will either wait for more results, reduce results
            received so far, or failover this job to another node. See 
            <see cref="T:Apache.Ignite.Core.Compute.ComputeJobResultPolicy"/> for more information.
            </summary>
            <param name="res">Received remote Ignite executable result.</param>
            <param name="rcvd">All previously received results. Note that if task class has
            <see cref="T:Apache.Ignite.Core.Compute.ComputeTaskNoResultCacheAttribute"/> attribute, then this list will be empty.</param>
            <returns>Result policy that dictates how to process further upcoming job results.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Compute.IComputeTask`3.Reduce(System.Collections.Generic.IList{Apache.Ignite.Core.Compute.IComputeJobResult{`1}})">
            <summary>
            Reduces (or aggregates) results received so far into one compound result to be returned to 
            caller via future.
            <para/>
            Note, that if some jobs did not succeed and could not be failed over then the list of
            results passed into this method will include the failed results. Otherwise, failed
            results will not be in the list.
            </summary>
            <param name="results">Received job results. Note that if task class has 
            <see cref="T:Apache.Ignite.Core.Compute.ComputeTaskNoResultCacheAttribute"/> attribute, then this list will be empty.</param>
            <returns>Task result constructed from results of remote executions.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Compute.ComputeTaskAdapter`3.OnResult(Apache.Ignite.Core.Compute.IComputeJobResult{`1},System.Collections.Generic.IList{Apache.Ignite.Core.Compute.IComputeJobResult{`1}})">
            <summary>
            Default implementation which will wait for all jobs to complete before
            calling <see cref="M:Apache.Ignite.Core.Compute.IComputeTask`3.Reduce(System.Collections.Generic.IList{Apache.Ignite.Core.Compute.IComputeJobResult{`1}})"/> method.
            <p/>
            If remote job resulted in exception <see cref="P:Apache.Ignite.Core.Compute.IComputeJobResult`1.Exception"/> 
            is not <c>null</c>),
            then <see cref="F:Apache.Ignite.Core.Compute.ComputeJobResultPolicy.Failover"/>  policy will be returned if 
            the exception is instance of <see cref="T:Apache.Ignite.Core.Cluster.ClusterTopologyException"/> 
            or <see cref="T:Apache.Ignite.Core.Compute.ComputeExecutionRejectedException"/>, which means that
            remote node either failed or job execution was rejected before it got a chance to start. In all
            other cases the exception will be rethrown which will ultimately cause task to fail.
            </summary>
            <param name="res">Received remote Ignite executable result.</param>
            <param name="rcvd">All previously received results.</param>
            <returns>Result policy that dictates how to process further upcoming job results.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Compute.ComputeTaskAdapter`3.Map(System.Collections.Generic.IList{Apache.Ignite.Core.Cluster.IClusterNode},`0)">
            <summary>
            This method is called to map or split Ignite task into multiple Ignite jobs. This is the
            first method that gets called when task execution starts.
            </summary>
            <param name="subgrid">Nodes available for this task execution. Note that order of nodes is
            guaranteed to be randomized by container. This ensures that every time you simply iterate
            through Ignite nodes, the order of nodes will be random which over time should result into
            all nodes being used equally.</param>
            <param name="arg">Task execution argument. Can be <c>null</c>. This is the same argument
            as the one passed into <c>ICompute.Execute()</c> methods.</param>
            <returns>
            Map of Ignite jobs assigned to subgrid node. If <c>null</c> or empty map is returned,
            exception will be thrown.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Compute.ComputeTaskAdapter`3.Reduce(System.Collections.Generic.IList{Apache.Ignite.Core.Compute.IComputeJobResult{`1}})">
            <summary>
            Reduces (or aggregates) results received so far into one compound result to be returned to
            caller via task.
            <para/>
            Note, that if some jobs did not succeed and could not be failed over then the list of
            results passed into this method will include the failed results. Otherwise, failed
            results will not be in the list.
            </summary>
            <param name="results">Received job results. Note that if task class has
            <see cref="T:Apache.Ignite.Core.Compute.ComputeTaskNoResultCacheAttribute"/> attribute, then this list will be empty.</param>
            <returns>
            Task result constructed from results of remote executions.
            </returns>
        </member>
        <member name="T:Apache.Ignite.Core.Compute.ComputeTaskCancelledException">
            <summary>
            This exception indicates that Ignite task was cancelled.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Compute.ComputeTaskCancelledException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Compute.ComputeTaskCancelledException"/> class.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Compute.ComputeTaskCancelledException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Compute.ComputeTaskCancelledException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Compute.ComputeTaskCancelledException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Compute.ComputeTaskCancelledException"/> class.
            </summary>
            <param name="info">Serialization information.</param>
            <param name="ctx">Streaming context.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Compute.ComputeTaskCancelledException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Compute.ComputeTaskCancelledException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="cause">The cause.</param>
        </member>
        <member name="T:Apache.Ignite.Core.Compute.ComputeTaskNoResultCacheAttribute">
            <summary>
            This attribute disables caching of task results when attached to <see cref="T:Apache.Ignite.Core.Compute.IComputeTask`3"/> 
            instance. Use it when number of jobs within task grows too big, or jobs themselves are too large 
            to keep in memory throughout task execution. By default all results are cached and passed into
            <see cref="M:Apache.Ignite.Core.Compute.IComputeTask`3.OnResult(Apache.Ignite.Core.Compute.IComputeJobResult{`1},System.Collections.Generic.IList{Apache.Ignite.Core.Compute.IComputeJobResult{`1}})"/> 
            and <see cref="M:Apache.Ignite.Core.Compute.IComputeTask`3.Reduce(System.Collections.Generic.IList{Apache.Ignite.Core.Compute.IComputeJobResult{`1}})"/> methods. When this 
            attribute is attached to a task class, then this list of job results will always be empty.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Compute.ComputeTaskSplitAdapter`3">
            <summary>
            This class defines simplified adapter for <see cref="T:Apache.Ignite.Core.Compute.IComputeTask`3"/>. This adapter can be used
            when jobs can be randomly assigned to available Ignite nodes. This adapter is sufficient
            in most homogeneous environments where all nodes are equally suitable for executing grid
            job, see <see cref="M:Apache.Ignite.Core.Compute.ComputeTaskSplitAdapter`3.Split(System.Int32,`0)"/> method for more details.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Compute.ComputeTaskSplitAdapter`3.Split(System.Int32,`0)">
            <summary>
            This is a simplified version of <see cref="M:Apache.Ignite.Core.Compute.IComputeTask`3.Map(System.Collections.Generic.IList{Apache.Ignite.Core.Cluster.IClusterNode},`0)"/> method.
            <p/>
            This method basically takes given argument and splits it into a collection
            of <see cref="T:Apache.Ignite.Core.Impl.Compute.IComputeJob"/> using provided grid size as indication of how many node are
            available. These jobs will be randomly mapped to available Ignite nodes. Note that
            if number of jobs is greater than number of Ignite nodes (i.e, grid size), the grid
            nodes will be reused and some jobs will end up on the same Ignite nodes.
            </summary>
            <param name="gridSize">Number of available Ignite nodes. Note that returned number of jobs can be less, 
             equal or greater than this grid size.</param>
            <param name="arg">Task execution argument. Can be <c>null</c>.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Compute.ComputeTaskSplitAdapter`3.Map(System.Collections.Generic.IList{Apache.Ignite.Core.Cluster.IClusterNode},`0)">
            <summary>
            This method is called to map or split Ignite task into multiple Ignite jobs. This is the
            first method that gets called when task execution starts.
            </summary>
            <param name="subgrid">Nodes available for this task execution. Note that order of nodes is
            guaranteed to be randomized by container. This ensures that every time you simply iterate
            through Ignite nodes, the order of nodes will be random which over time should result into
            all nodes being used equally.</param>
            <param name="arg">Task execution argument. Can be <c>null</c>. This is the same argument
            as the one passed into <c>ICompute.Execute()</c> methods.</param>
            <returns>
            Map of Ignite jobs assigned to subgrid node. If <c>null</c> or empty map is returned,
            exception will be thrown.
            </returns>
            <exception cref="T:Apache.Ignite.Core.Common.IgniteException">Split returned no jobs.</exception>
        </member>
        <member name="T:Apache.Ignite.Core.Compute.ComputeTaskTimeoutException">
            <summary>
            Indicates that task execution timed out.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Compute.ComputeTaskTimeoutException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Compute.ComputeTaskTimeoutException"/> class.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Compute.ComputeTaskTimeoutException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Compute.ComputeTaskTimeoutException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Compute.ComputeTaskTimeoutException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Compute.ComputeTaskTimeoutException"/> class.
            </summary>
            <param name="info">Serialization information.</param>
            <param name="ctx">Streaming context.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Compute.ComputeTaskTimeoutException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Compute.ComputeTaskTimeoutException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="cause">The cause.</param>
        </member>
        <member name="T:Apache.Ignite.Core.Compute.ComputeUserUndeclaredException">
            <summary>
            This exception is thrown when user's code throws undeclared runtime exception. By user core it is
            assumed the code in Ignite task, Ignite job or SPI. In most cases it should be an indication of unrecoverable
            error condition such as assertion, out of memory error, etc.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Compute.ComputeUserUndeclaredException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Compute.ComputeUserUndeclaredException"/> class.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Compute.ComputeUserUndeclaredException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Compute.ComputeUserUndeclaredException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Compute.ComputeUserUndeclaredException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Compute.ComputeUserUndeclaredException"/> class.
            </summary>
            <param name="info">Serialization information.</param>
            <param name="ctx">Streaming context.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Compute.ComputeUserUndeclaredException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Compute.ComputeUserUndeclaredException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="cause">The cause.</param>
        </member>
        <member name="T:Apache.Ignite.Core.Compute.ICompute">
            <summary>
            Defines Ignite functionality for executing tasks and closures over nodes
            in the <see cref="T:Apache.Ignite.Core.Cluster.IClusterGroup"/>. Instance of <see cref="T:Apache.Ignite.Core.Compute.ICompute"/>
            is obtained from grid projection using <see cref="M:Apache.Ignite.Core.Cluster.IClusterGroup.GetCompute"/> method.
            <para/>
            Note that if attempt is made to execute a computation over an empty projection (i.e. projection that does
            not have any alive nodes), <c>ClusterGroupEmptyException</c> will be thrown out of result task.
            <para/>
            Ignite must select a node for a computation to be executed. The node will be selected based on the
            underlying <c>GridLoadBalancingSpi</c>, which by default sequentially picks next available node from
            grid projection. Other load balancing policies, such as <c>random</c> or <c>adaptive</c>, can be
            configured as well by selecting different load balancing SPI in Ignite configuration. If your logic requires
            some custom load balancing behavior, consider implementing <c>ComputeTask</c> in Java directly.
            <para/>
            Ignite guarantees that as long as there is at least one Ignite node standing, every job will be
            executed. Jobs will automatically failover to another node if a remote node crashed or has rejected
            execution due to lack of resources. By default, in case of failover, next load balanced node will be
            picked for job execution. Also jobs will never be re-routed to the nodes they have failed on. This
            behavior can be changed by configuring any of the existing or a custom <c>FailoverSpi</c> in Ignite
            configuration.
            <para/>
            All members are thread-safe and may be used concurrently from multiple threads.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Compute.ICompute.WithNoFailover">
            <summary>
            Sets no-failover flag for the next executed task on this projection in the current thread.
            If flag is set, job will be never failed over even if remote node crashes or rejects execution.
            When task starts execution, the no-failover flag is reset, so all other task will use default
            failover policy, unless this flag is set again.
            </summary>
            <returns>This compute instance for chaining calls.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Compute.ICompute.WithTimeout(System.Int64)">
            <summary>
            Sets task timeout for the next executed task on this projection in the current thread.
            When task starts execution, the timeout is reset, so one timeout is used only once.
            </summary>
            <param name="timeout">Computation timeout in milliseconds.</param>
            <returns>This compute instance for chaining calls.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Compute.ICompute.WithKeepBinary">
            <summary>
            Sets keep-binary flag for the next executed Java task on this projection in the current
            thread so that task argument passed to Java and returned task results will not be
            deserialized.
            </summary>
            <returns>This compute instance for chaining calls.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Compute.ICompute.ExecuteJavaTask``1(System.String,System.Object)">
            <summary>
            Executes given Java task on the grid projection. If task for given name has not been deployed yet,
            then 'taskName' will be used as task class name to auto-deploy the task.
            </summary>
            <param name="taskName">Java task name</param>
            <param name="taskArg">Optional argument of task execution, can be null.</param>
            <returns>Task result.</returns>
            <typeparam name="TRes">Type of task result.</typeparam>
        </member>
        <member name="M:Apache.Ignite.Core.Compute.ICompute.ExecuteJavaTaskAsync``1(System.String,System.Object)">
            <summary>
            Executes given Java task on the grid projection. If task for given name has not been deployed yet,
            then 'taskName' will be used as task class name to auto-deploy the task.
            </summary>
            <param name="taskName">Java task name</param>
            <param name="taskArg">Optional argument of task execution, can be null.</param>
            <returns>Task result.</returns>
            <typeparam name="TRes">Type of task result.</typeparam>
        </member>
        <member name="M:Apache.Ignite.Core.Compute.ICompute.ExecuteJavaTaskAsync``1(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Executes given Java task on the grid projection. If task for given name has not been deployed yet,
            then 'taskName' will be used as task class name to auto-deploy the task.
            </summary>
            <typeparam name="TRes">Type of task result.</typeparam>
            <param name="taskName">Java task name</param>
            <param name="taskArg">Optional argument of task execution, can be null.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            Task result.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Compute.ICompute.Execute``3(Apache.Ignite.Core.Compute.IComputeTask{``0,``1,``2},``0)">
            <summary>
            Executes given task on the grid projection. For step-by-step explanation of task execution process
            refer to <see cref="T:Apache.Ignite.Core.Compute.IComputeTask`3"/> documentation.
            </summary>
            <param name="task">Task to execute.</param>
            <param name="taskArg">Optional task argument.</param>
            <returns>Task result.</returns>
            <typeparam name="TArg">Argument type.</typeparam>
            <typeparam name="TJobRes">Type of job result.</typeparam>
            <typeparam name="TRes">Type of final task result.</typeparam>
        </member>
        <member name="M:Apache.Ignite.Core.Compute.ICompute.ExecuteAsync``3(Apache.Ignite.Core.Compute.IComputeTask{``0,``1,``2},``0)">
            <summary>
            Executes given task on the grid projection. For step-by-step explanation of task execution process
            refer to <see cref="T:Apache.Ignite.Core.Compute.IComputeTask`3"/> documentation.
            </summary>
            <param name="task">Task to execute.</param>
            <param name="taskArg">Optional task argument.</param>
            <returns>Task result.</returns>
            <typeparam name="TArg">Argument type.</typeparam>
            <typeparam name="TJobRes">Type of job result.</typeparam>
            <typeparam name="TRes">Type of final task result.</typeparam>
        </member>
        <member name="M:Apache.Ignite.Core.Compute.ICompute.ExecuteAsync``3(Apache.Ignite.Core.Compute.IComputeTask{``0,``1,``2},``0,System.Threading.CancellationToken)">
            <summary>
            Executes given task on the grid projection. For step-by-step explanation of task execution process
            refer to <see cref="T:Apache.Ignite.Core.Compute.IComputeTask`3"/> documentation.
            </summary>
            <typeparam name="TArg">Argument type.</typeparam>
            <typeparam name="TJobRes">Type of job result.</typeparam>
            <typeparam name="TRes">Type of final task result.</typeparam>
            <param name="task">Task to execute.</param>
            <param name="taskArg">Optional task argument.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            Task result.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Compute.ICompute.Execute``2(Apache.Ignite.Core.Compute.IComputeTask{``0,``1})">
            <summary>
            Executes given task on the grid projection. For step-by-step explanation of task execution process
            refer to <see cref="T:Apache.Ignite.Core.Compute.IComputeTask`3"/> documentation.
            </summary>
            <param name="task">Task to execute.</param>
            <returns>Task result.</returns>
            <typeparam name="TJobRes">Type of job result.</typeparam>
            <typeparam name="TRes">Type of reduce result.</typeparam>
        </member>
        <member name="M:Apache.Ignite.Core.Compute.ICompute.ExecuteAsync``2(Apache.Ignite.Core.Compute.IComputeTask{``0,``1})">
            <summary>
            Executes given task on the grid projection. For step-by-step explanation of task execution process
            refer to <see cref="T:Apache.Ignite.Core.Compute.IComputeTask`3"/> documentation.
            </summary>
            <param name="task">Task to execute.</param>
            <returns>Task result.</returns>
            <typeparam name="TJobRes">Type of job result.</typeparam>
            <typeparam name="TRes">Type of reduce result.</typeparam>
        </member>
        <member name="M:Apache.Ignite.Core.Compute.ICompute.ExecuteAsync``2(Apache.Ignite.Core.Compute.IComputeTask{``0,``1},System.Threading.CancellationToken)">
            <summary>
            Executes given task on the grid projection. For step-by-step explanation of task execution process
            refer to <see cref="T:Apache.Ignite.Core.Compute.IComputeTask`3"/> documentation.
            </summary>
            <typeparam name="TJobRes">Type of job result.</typeparam>
            <typeparam name="TRes">Type of reduce result.</typeparam>
            <param name="task">Task to execute.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            Task result.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Compute.ICompute.Execute``3(System.Type,``0)">
            <summary>
            Executes given task on the grid projection. For step-by-step explanation of task execution process
            refer to <see cref="T:Apache.Ignite.Core.Compute.IComputeTask`3"/> documentation.
            </summary>
            <param name="taskType">Task type.</param>
            <param name="taskArg">Optional task argument.</param>
            <returns>Task result.</returns>
            <typeparam name="TArg">Argument type.</typeparam>
            <typeparam name="TJobRes">Type of job result.</typeparam>
            <typeparam name="TRes">Type of reduce result.</typeparam>
        </member>
        <member name="M:Apache.Ignite.Core.Compute.ICompute.ExecuteAsync``3(System.Type,``0)">
            <summary>
            Executes given task on the grid projection. For step-by-step explanation of task execution process
            refer to <see cref="T:Apache.Ignite.Core.Compute.IComputeTask`3"/> documentation.
            </summary>
            <param name="taskType">Task type.</param>
            <param name="taskArg">Optional task argument.</param>
            <returns>Task result.</returns>
            <typeparam name="TArg">Argument type.</typeparam>
            <typeparam name="TJobRes">Type of job result.</typeparam>
            <typeparam name="TRes">Type of reduce result.</typeparam>
        </member>
        <member name="M:Apache.Ignite.Core.Compute.ICompute.ExecuteAsync``3(System.Type,``0,System.Threading.CancellationToken)">
            <summary>
            Executes given task on the grid projection. For step-by-step explanation of task execution process
            refer to <see cref="T:Apache.Ignite.Core.Compute.IComputeTask`3"/> documentation.
            </summary>
            <typeparam name="TArg">Argument type.</typeparam>
            <typeparam name="TJobRes">Type of job result.</typeparam>
            <typeparam name="TRes">Type of reduce result.</typeparam>
            <param name="taskType">Task type.</param>
            <param name="taskArg">Optional task argument.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            Task result.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Compute.ICompute.Execute``2(System.Type)">
            <summary>
            Executes given task on the grid projection. For step-by-step explanation of task execution process
            refer to <see cref="T:Apache.Ignite.Core.Compute.IComputeTask`3"/> documentation.
            </summary>
            <param name="taskType">Task type.</param>
            <returns>Task result.</returns>
            <typeparam name="TJobRes">Type of job result.</typeparam>
            <typeparam name="TRes">Type of reduce result.</typeparam>
        </member>
        <member name="M:Apache.Ignite.Core.Compute.ICompute.ExecuteAsync``2(System.Type)">
            <summary>
            Executes given task on the grid projection. For step-by-step explanation of task execution process
            refer to <see cref="T:Apache.Ignite.Core.Compute.IComputeTask`3"/> documentation.
            </summary>
            <param name="taskType">Task type.</param>
            <returns>Task result.</returns>
            <typeparam name="TJobRes">Type of job result.</typeparam>
            <typeparam name="TRes">Type of reduce result.</typeparam>
        </member>
        <member name="M:Apache.Ignite.Core.Compute.ICompute.ExecuteAsync``2(System.Type,System.Threading.CancellationToken)">
            <summary>
            Executes given task on the grid projection. For step-by-step explanation of task execution process
            refer to <see cref="T:Apache.Ignite.Core.Compute.IComputeTask`3"/> documentation.
            </summary>
            <typeparam name="TJobRes">Type of job result.</typeparam>
            <typeparam name="TRes">Type of reduce result.</typeparam>
            <param name="taskType">Task type.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            Task result.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Compute.ICompute.Call``1(Apache.Ignite.Core.Compute.IComputeFunc{``0})">
            <summary>
            Executes provided job on a node in this grid projection. The result of the
            job execution is returned from the result closure.
            </summary>
            <param name="clo">Job to execute.</param>
            <returns>Job result for this execution.</returns>
            <typeparam name="TRes">Type of job result.</typeparam>
        </member>
        <member name="M:Apache.Ignite.Core.Compute.ICompute.CallAsync``1(Apache.Ignite.Core.Compute.IComputeFunc{``0})">
            <summary>
            Executes provided job on a node in this grid projection. The result of the
            job execution is returned from the result closure.
            </summary>
            <param name="clo">Job to execute.</param>
            <returns>Job result for this execution.</returns>
            <typeparam name="TRes">Type of job result.</typeparam>
        </member>
        <member name="M:Apache.Ignite.Core.Compute.ICompute.CallAsync``1(Apache.Ignite.Core.Compute.IComputeFunc{``0},System.Threading.CancellationToken)">
            <summary>
            Executes provided job on a node in this grid projection. The result of the
            job execution is returned from the result closure.
            </summary>
            <typeparam name="TRes">Type of job result.</typeparam>
            <param name="clo">Job to execute.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            Job result for this execution.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Compute.ICompute.AffinityCall``1(System.String,System.Object,Apache.Ignite.Core.Compute.IComputeFunc{``0})">
            <summary>
            Executes given job on the node where data for provided affinity key is located
            (a.k.a. affinity co-location).
            </summary>
            <param name="cacheName">Name of the cache to use for affinity co-location.</param>
            <param name="affinityKey">Affinity key.</param>
            <param name="clo">Job to execute.</param>
            <returns>Job result for this execution.</returns>
            <typeparam name="TRes">Type of job result.</typeparam>
        </member>
        <member name="M:Apache.Ignite.Core.Compute.ICompute.AffinityCallAsync``1(System.String,System.Object,Apache.Ignite.Core.Compute.IComputeFunc{``0})">
            <summary>
            Executes given job on the node where data for provided affinity key is located
            (a.k.a. affinity co-location).
            </summary>
            <param name="cacheName">Name of the cache to use for affinity co-location.</param>
            <param name="affinityKey">Affinity key.</param>
            <param name="clo">Job to execute.</param>
            <returns>Job result for this execution.</returns>
            <typeparam name="TRes">Type of job result.</typeparam>
        </member>
        <member name="M:Apache.Ignite.Core.Compute.ICompute.AffinityCallAsync``1(System.String,System.Object,Apache.Ignite.Core.Compute.IComputeFunc{``0},System.Threading.CancellationToken)">
            <summary>
            Executes given job on the node where data for provided affinity key is located
            (a.k.a. affinity co-location).
            </summary>
            <typeparam name="TRes">Type of job result.</typeparam>
            <param name="cacheName">Name of the cache to use for affinity co-location.</param>
            <param name="affinityKey">Affinity key.</param>
            <param name="clo">Job to execute.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            Job result for this execution.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Compute.ICompute.Call``2(System.Collections.Generic.IEnumerable{Apache.Ignite.Core.Compute.IComputeFunc{``0}},Apache.Ignite.Core.Compute.IComputeReducer{``0,``1})">
            <summary>
            Executes collection of jobs on nodes within this grid projection.
            </summary>
            <param name="clos">Collection of jobs to execute.</param>
            <param name="reducer">Reducer to reduce all job results into one individual return value.</param>
            <returns>Reduced job result for this execution.</returns>
            <typeparam name="TFuncRes">Type of function result.</typeparam>
            <typeparam name="TRes">Type of result after reduce.</typeparam>
        </member>
        <member name="M:Apache.Ignite.Core.Compute.ICompute.CallAsync``2(System.Collections.Generic.IEnumerable{Apache.Ignite.Core.Compute.IComputeFunc{``0}},Apache.Ignite.Core.Compute.IComputeReducer{``0,``1})">
            <summary>
            Executes collection of jobs on nodes within this grid projection.
            </summary>
            <param name="clos">Collection of jobs to execute.</param>
            <param name="reducer">Reducer to reduce all job results into one individual return value.</param>
            <returns>Reduced job result for this execution.</returns>
            <typeparam name="TFuncRes">Type of function result.</typeparam>
            <typeparam name="TRes">Type of result after reduce.</typeparam>
        </member>
        <member name="M:Apache.Ignite.Core.Compute.ICompute.CallAsync``2(System.Collections.Generic.IEnumerable{Apache.Ignite.Core.Compute.IComputeFunc{``0}},Apache.Ignite.Core.Compute.IComputeReducer{``0,``1},System.Threading.CancellationToken)">
            <summary>
            Executes collection of jobs on nodes within this grid projection.
            </summary>
            <typeparam name="TFuncRes">Type of function result.</typeparam>
            <typeparam name="TRes">Type of result after reduce.</typeparam>
            <param name="clos">Collection of jobs to execute.</param>
            <param name="reducer">Reducer to reduce all job results into one individual return value.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            Reduced job result for this execution.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Compute.ICompute.Call``1(System.Collections.Generic.IEnumerable{Apache.Ignite.Core.Compute.IComputeFunc{``0}})">
            <summary>
            Executes collection of jobs on nodes within this grid projection.
            </summary>
            <param name="clos">Collection of jobs to execute.</param>
            <returns>Collection of job results for this execution.</returns>
            <typeparam name="TRes">Type of job result.</typeparam>
        </member>
        <member name="M:Apache.Ignite.Core.Compute.ICompute.CallAsync``1(System.Collections.Generic.IEnumerable{Apache.Ignite.Core.Compute.IComputeFunc{``0}})">
            <summary>
            Executes collection of jobs on nodes within this grid projection.
            </summary>
            <param name="clos">Collection of jobs to execute.</param>
            <returns>Collection of job results for this execution.</returns>
            <typeparam name="TRes">Type of job result.</typeparam>
        </member>
        <member name="M:Apache.Ignite.Core.Compute.ICompute.CallAsync``1(System.Collections.Generic.IEnumerable{Apache.Ignite.Core.Compute.IComputeFunc{``0}},System.Threading.CancellationToken)">
            <summary>
            Executes collection of jobs on nodes within this grid projection.
            </summary>
            <typeparam name="TRes">Type of job result.</typeparam>
            <param name="clos">Collection of jobs to execute.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            Collection of job results for this execution.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Compute.ICompute.Broadcast``1(Apache.Ignite.Core.Compute.IComputeFunc{``0})">
            <summary>
            Broadcasts given job to all nodes in grid projection. Every participating node will return a job result.
            </summary>
            <param name="clo">Job to broadcast to all projection nodes.</param>
            <returns>Collection of results for this execution.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Compute.ICompute.BroadcastAsync``1(Apache.Ignite.Core.Compute.IComputeFunc{``0})">
            <summary>
            Broadcasts given job to all nodes in grid projection. Every participating node will return a job result.
            </summary>
            <param name="clo">Job to broadcast to all projection nodes.</param>
            <returns>Collection of results for this execution.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Compute.ICompute.BroadcastAsync``1(Apache.Ignite.Core.Compute.IComputeFunc{``0},System.Threading.CancellationToken)">
            <summary>
            Broadcasts given job to all nodes in grid projection. Every participating node will return a job result.
            </summary>
            <typeparam name="TRes">The type of the resource.</typeparam>
            <param name="clo">Job to broadcast to all projection nodes.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            Collection of results for this execution.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Compute.ICompute.Broadcast``2(Apache.Ignite.Core.Compute.IComputeFunc{``0,``1},``0)">
            <summary>
            Broadcasts given closure job with passed in argument to all nodes in grid projection.
            Every participating node will return a job result.
            </summary>
            <param name="clo">Job to broadcast to all projection nodes.</param>
            <param name="arg">Job closure argument.</param>
            <returns>Collection of results for this execution.</returns>
            <typeparam name="TArg">Type of argument.</typeparam>
            <typeparam name="TRes">Type of job result.</typeparam>
        </member>
        <member name="M:Apache.Ignite.Core.Compute.ICompute.BroadcastAsync``2(Apache.Ignite.Core.Compute.IComputeFunc{``0,``1},``0)">
            <summary>
            Broadcasts given closure job with passed in argument to all nodes in grid projection.
            Every participating node will return a job result.
            </summary>
            <param name="clo">Job to broadcast to all projection nodes.</param>
            <param name="arg">Job closure argument.</param>
            <returns>Collection of results for this execution.</returns>
            <typeparam name="TArg">Type of argument.</typeparam>
            <typeparam name="TRes">Type of job result.</typeparam>
        </member>
        <member name="M:Apache.Ignite.Core.Compute.ICompute.BroadcastAsync``2(Apache.Ignite.Core.Compute.IComputeFunc{``0,``1},``0,System.Threading.CancellationToken)">
            <summary>
            Broadcasts given closure job with passed in argument to all nodes in grid projection.
            Every participating node will return a job result.
            </summary>
            <typeparam name="TArg">Type of argument.</typeparam>
            <typeparam name="TRes">Type of job result.</typeparam>
            <param name="clo">Job to broadcast to all projection nodes.</param>
            <param name="arg">Job closure argument.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            Collection of results for this execution.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Compute.ICompute.Broadcast(Apache.Ignite.Core.Compute.IComputeAction)">
            <summary>
            Broadcasts given job to all nodes in grid projection.
            </summary>
            <param name="action">Job to broadcast to all projection nodes.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Compute.ICompute.BroadcastAsync(Apache.Ignite.Core.Compute.IComputeAction)">
            <summary>
            Broadcasts given job to all nodes in grid projection.
            </summary>
            <param name="action">Job to broadcast to all projection nodes.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Compute.ICompute.BroadcastAsync(Apache.Ignite.Core.Compute.IComputeAction,System.Threading.CancellationToken)">
            <summary>
            Broadcasts given job to all nodes in grid projection.
            </summary>
            <param name="action">Job to broadcast to all projection nodes.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Compute.ICompute.Run(Apache.Ignite.Core.Compute.IComputeAction)">
            <summary>
            Executes provided job on a node in this grid projection.
            </summary>
            <param name="action">Job to execute.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Compute.ICompute.RunAsync(Apache.Ignite.Core.Compute.IComputeAction)">
            <summary>
            Executes provided job on a node in this grid projection.
            </summary>
            <param name="action">Job to execute.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Compute.ICompute.RunAsync(Apache.Ignite.Core.Compute.IComputeAction,System.Threading.CancellationToken)">
            <summary>
            Executes provided job on a node in this grid projection.
            </summary>
            <param name="action">Job to execute.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Compute.ICompute.AffinityRun(System.String,System.Object,Apache.Ignite.Core.Compute.IComputeAction)">
            <summary>
            Executes given job on the node where data for provided affinity key is located
            (a.k.a. affinity co-location).
            </summary>
            <param name="cacheName">Name of the cache to use for affinity co-location.</param>
            <param name="affinityKey">Affinity key.</param>
            <param name="action">Job to execute.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Compute.ICompute.AffinityRunAsync(System.String,System.Object,Apache.Ignite.Core.Compute.IComputeAction)">
            <summary>
            Executes given job on the node where data for provided affinity key is located
            (a.k.a. affinity co-location).
            </summary>
            <param name="cacheName">Name of the cache to use for affinity co-location.</param>
            <param name="affinityKey">Affinity key.</param>
            <param name="action">Job to execute.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Compute.ICompute.AffinityRunAsync(System.String,System.Object,Apache.Ignite.Core.Compute.IComputeAction,System.Threading.CancellationToken)">
            <summary>
            Executes given job on the node where data for provided affinity key is located
            (a.k.a. affinity co-location).
            </summary>
            <param name="cacheName">Name of the cache to use for affinity co-location.</param>
            <param name="affinityKey">Affinity key.</param>
            <param name="action">Job to execute.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Compute.ICompute.Run(System.Collections.Generic.IEnumerable{Apache.Ignite.Core.Compute.IComputeAction})">
            <summary>
            Executes collection of jobs on Ignite nodes within this grid projection.
            </summary>
            <param name="actions">Jobs to execute.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Compute.ICompute.RunAsync(System.Collections.Generic.IEnumerable{Apache.Ignite.Core.Compute.IComputeAction})">
            <summary>
            Executes collection of jobs on Ignite nodes within this grid projection.
            </summary>
            <param name="actions">Jobs to execute.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Compute.ICompute.RunAsync(System.Collections.Generic.IEnumerable{Apache.Ignite.Core.Compute.IComputeAction},System.Threading.CancellationToken)">
            <summary>
            Executes collection of jobs on Ignite nodes within this grid projection.
            </summary>
            <param name="actions">Jobs to execute.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Compute.ICompute.Apply``2(Apache.Ignite.Core.Compute.IComputeFunc{``0,``1},``0)">
            <summary>
            Executes provided closure job on a node in this grid projection.
            </summary>
            <param name="clo">Job to run.</param>
            <param name="arg">Job argument.</param>
            <returns>Job result for this execution.</returns>
            <typeparam name="TArg">Type of argument.</typeparam>
            <typeparam name="TRes">Type of job result.</typeparam>
        </member>
        <member name="M:Apache.Ignite.Core.Compute.ICompute.ApplyAsync``2(Apache.Ignite.Core.Compute.IComputeFunc{``0,``1},``0)">
            <summary>
            Executes provided closure job on a node in this grid projection.
            </summary>
            <param name="clo">Job to run.</param>
            <param name="arg">Job argument.</param>
            <returns>Job result for this execution.</returns>
            <typeparam name="TArg">Type of argument.</typeparam>
            <typeparam name="TRes">Type of job result.</typeparam>
        </member>
        <member name="M:Apache.Ignite.Core.Compute.ICompute.ApplyAsync``2(Apache.Ignite.Core.Compute.IComputeFunc{``0,``1},``0,System.Threading.CancellationToken)">
            <summary>
            Executes provided closure job on a node in this grid projection.
            </summary>
            <typeparam name="TArg">Type of argument.</typeparam>
            <typeparam name="TRes">Type of job result.</typeparam>
            <param name="clo">Job to run.</param>
            <param name="arg">Job argument.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            Job result for this execution.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Compute.ICompute.Apply``2(Apache.Ignite.Core.Compute.IComputeFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Executes provided closure job on nodes within this grid projection. A new job is executed for
            every argument in the passed in collection. The number of actual job executions will be
            equal to size of the job arguments collection.
            </summary>
            <param name="clo">Job to run.</param>
            <param name="args">Job arguments.</param>
            <returns>Collection of job results.</returns>
            <typeparam name="TArg">Type of argument.</typeparam>
            <typeparam name="TRes">Type of job result.</typeparam>
        </member>
        <member name="M:Apache.Ignite.Core.Compute.ICompute.ApplyAsync``2(Apache.Ignite.Core.Compute.IComputeFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Executes provided closure job on nodes within this grid projection. A new job is executed for
            every argument in the passed in collection. The number of actual job executions will be
            equal to size of the job arguments collection.
            </summary>
            <param name="clo">Job to run.</param>
            <param name="args">Job arguments.</param>
            <returns>Collection of job results.</returns>
            <typeparam name="TArg">Type of argument.</typeparam>
            <typeparam name="TRes">Type of job result.</typeparam>
        </member>
        <member name="M:Apache.Ignite.Core.Compute.ICompute.ApplyAsync``2(Apache.Ignite.Core.Compute.IComputeFunc{``0,``1},System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)">
            <summary>
            Executes provided closure job on nodes within this grid projection. A new job is executed for
            every argument in the passed in collection. The number of actual job executions will be
            equal to size of the job arguments collection.
            </summary>
            <typeparam name="TArg">Type of argument.</typeparam>
            <typeparam name="TRes">Type of job result.</typeparam>
            <param name="clo">Job to run.</param>
            <param name="args">Job arguments.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            Collection of job results.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Compute.ICompute.Apply``3(Apache.Ignite.Core.Compute.IComputeFunc{``0,``1},System.Collections.Generic.IEnumerable{``0},Apache.Ignite.Core.Compute.IComputeReducer{``1,``2})">
            <summary>
            Executes provided closure job on nodes within this grid projection. A new job is executed for
            every argument in the passed in collection. The number of actual job executions will be
            equal to size of the job arguments collection. The returned job results will be reduced
            into an individual result by provided reducer.
            </summary>
            <param name="clo">Job to run.</param>
            <param name="args">Job arguments.</param>
            <param name="rdc">Reducer to reduce all job results into one individual return value.</param>
            <returns>Reduced job result for this execution.</returns>
            <typeparam name="TArg">Type of argument.</typeparam>
            <typeparam name="TFuncRes">Type of function result.</typeparam>
            <typeparam name="TRes">Type of result after reduce.</typeparam>
        </member>
        <member name="M:Apache.Ignite.Core.Compute.ICompute.ApplyAsync``3(Apache.Ignite.Core.Compute.IComputeFunc{``0,``1},System.Collections.Generic.IEnumerable{``0},Apache.Ignite.Core.Compute.IComputeReducer{``1,``2})">
            <summary>
            Executes provided closure job on nodes within this grid projection. A new job is executed for
            every argument in the passed in collection. The number of actual job executions will be
            equal to size of the job arguments collection. The returned job results will be reduced
            into an individual result by provided reducer.
            </summary>
            <param name="clo">Job to run.</param>
            <param name="args">Job arguments.</param>
            <param name="rdc">Reducer to reduce all job results into one individual return value.</param>
            <returns>Reduced job result for this execution.</returns>
            <typeparam name="TArg">Type of argument.</typeparam>
            <typeparam name="TFuncRes">Type of function result.</typeparam>
            <typeparam name="TRes">Type of result after reduce.</typeparam>
        </member>
        <member name="M:Apache.Ignite.Core.Compute.ICompute.ApplyAsync``3(Apache.Ignite.Core.Compute.IComputeFunc{``0,``1},System.Collections.Generic.IEnumerable{``0},Apache.Ignite.Core.Compute.IComputeReducer{``1,``2},System.Threading.CancellationToken)">
            <summary>
            Executes provided closure job on nodes within this grid projection. A new job is executed for
            every argument in the passed in collection. The number of actual job executions will be
            equal to size of the job arguments collection. The returned job results will be reduced
            into an individual result by provided reducer.
            </summary>
            <typeparam name="TArg">Type of argument.</typeparam>
            <typeparam name="TFuncRes">Type of function result.</typeparam>
            <typeparam name="TRes">Type of result after reduce.</typeparam>
            <param name="clo">Job to run.</param>
            <param name="args">Job arguments.</param>
            <param name="rdc">Reducer to reduce all job results into one individual return value.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            Reduced job result for this execution.
            </returns>
        </member>
        <member name="P:Apache.Ignite.Core.Compute.ICompute.ClusterGroup">
            <summary>
            Grid projection to which this compute instance belongs.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Compute.IComputeFunc`1">
            <summary>
            Defines function having no arguments.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Compute.IComputeFunc`1.Invoke">
            <summary>
            Invoke function.
            </summary>
            <returns>Result.</returns>
        </member>
        <member name="T:Apache.Ignite.Core.Compute.IComputeAction">
            <summary>
            Defines a void function having no arguments.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Compute.IComputeAction.Invoke">
            <summary>
            Invokes action.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Compute.IComputeJobResult`1">
            <summary>
            Job execution result which gets passed to 
            <see cref="M:Apache.Ignite.Core.Compute.IComputeTask`3.OnResult(Apache.Ignite.Core.Compute.IComputeJobResult{`1},System.Collections.Generic.IList{Apache.Ignite.Core.Compute.IComputeJobResult{`1}})"/>
            method.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Compute.IComputeJobResult`1.Data">
            <summary>
            Gets data returned by remote job if it didn't fail. This data is the
            object returned from <see cref="M:Apache.Ignite.Core.Compute.IComputeJob`1.Execute"/> method.
            <para/>
            Note that if task is annotated with <see cref="T:Apache.Ignite.Core.Compute.ComputeTaskNoResultCacheAttribute"/> 
            attribute, then job results will not be cached and will be available only in
            <see cref="M:Apache.Ignite.Core.Compute.IComputeTask`3.OnResult(Apache.Ignite.Core.Compute.IComputeJobResult{`1},System.Collections.Generic.IList{Apache.Ignite.Core.Compute.IComputeJobResult{`1}})"/>
            method for every individual job, but not in 
            <see cref="M:Apache.Ignite.Core.Compute.IComputeTask`3.Reduce(System.Collections.Generic.IList{Apache.Ignite.Core.Compute.IComputeJobResult{`1}})"/> method. 
            </summary>
            <returns>Data returned by job.</returns>
        </member>
        <member name="P:Apache.Ignite.Core.Compute.IComputeJobResult`1.Job">
            <summary>
            Gets local instance of remote job produced this result.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Apache.Ignite.Core.Compute.IComputeJobResult`1.Exception">
            <summary>
            Gets exception produced by execution of remote job, or <c>null</c> if no
            exception was produced.
            </summary>
            <value>Exception or <c>null</c> in case of success.</value>
        </member>
        <member name="P:Apache.Ignite.Core.Compute.IComputeJobResult`1.NodeId">
            <summary>
            ID of the node where actual job execution occurred.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Compute.IComputeJobResult`1.Cancelled">
            <summary>
            Whether the job was cancelled.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Compute.IComputeReducer`2">
            <summary>
            Compute reducer which is capable of result collecting and reducing.
            </summary>
            <typeparam name="TRes">Type of results passed for reducing.</typeparam>
            <typeparam name="TReduceRes">Type of reduced result.</typeparam>
        </member>
        <member name="M:Apache.Ignite.Core.Compute.IComputeReducer`2.Collect(`0)">
            <summary>
            Collect closure execution result.
            </summary>
            <param name="res">Result.</param>
            <returns><c>True</c> to continue collecting results until all closures are finished, 
            <c>false</c> to start reducing.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Compute.IComputeReducer`2.Reduce">
            <summary>
            Reduce closure execution results collected earlier.
            </summary>
            <returns>Reduce result.</returns>
        </member>
        <member name="T:Apache.Ignite.Core.Compute.IComputeTask`2">
            <summary>
            IComputeTask without an argument.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Cache.Configuration.CacheAtomicityMode">
            <summary>
            Cache atomicity mode.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Cache.Configuration.CacheAtomicityMode.Transactional">
            <summary>
            Specifies fully ACID-compliant transactional cache behavior.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Cache.Configuration.CacheAtomicityMode.Atomic">
            <summary>
            Specifies atomic-only cache behaviour. In this mode distributed transactions and distributed
            locking are not supported. Disabling transactions and locking allows to achieve much higher
            performance and throughput ratios.
            <para/>
            In addition to transactions and locking, one of the main differences to <see cref="F:Apache.Ignite.Core.Cache.Configuration.CacheAtomicityMode.Atomic"/> mode
            is that bulk writes, such as <see cref="M:Apache.Ignite.Core.Cache.ICache`2.PutAll(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})"/> 
            and <see cref="M:Apache.Ignite.Core.Cache.ICache`2.RemoveAll(System.Collections.Generic.IEnumerable{`0})"/> methods, 
            become simple batch operations which can partially fail. In case of partial
            failure, <see cref="T:Apache.Ignite.Core.Cache.CachePartialUpdateException"/>will be thrown which will contain a list of keys 
            for which the update failed. It is recommended that bulk writes are used
            whenever multiple keys need to be inserted or updated in cache, as they reduce number of network trips and
            provide better performance.
            <para/>
            Note that even without locking and transactions, <see cref="F:Apache.Ignite.Core.Cache.Configuration.CacheAtomicityMode.Atomic"/> mode still provides
            full consistency guarantees across all cache nodes.
            <para/>
            Also note that all data modifications in <see cref="F:Apache.Ignite.Core.Cache.Configuration.CacheAtomicityMode.Atomic"/> mode are guaranteed to be atomic
            and consistent with writes to the underlying persistent store, if one is configured.        
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Cache.Configuration.CacheConfiguration">
            <summary>
            Defines grid cache configuration.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Cache.Configuration.CacheConfiguration.DefaultRebalanceThreadPoolSize">
            <summary> Default size of rebalance thread pool. </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Cache.Configuration.CacheConfiguration.DefaultBackups">
            <summary> Default number of backups. </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Cache.Configuration.CacheConfiguration.DefaultCacheMode">
            <summary> Default caching mode. </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Cache.Configuration.CacheConfiguration.DefaultAtomicityMode">
            <summary> Default atomicity mode. </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Cache.Configuration.CacheConfiguration.DefaultCacheSize">
            <summary> Default cache size to use with eviction policy. </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Cache.Configuration.CacheConfiguration.DefaultInvalidate">
            <summary> Default value for 'invalidate' flag that indicates if this is invalidation-based cache. </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Cache.Configuration.CacheConfiguration.DefaultRebalanceMode">
            <summary> Default rebalance mode for distributed cache. </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Cache.Configuration.CacheConfiguration.DefaultRebalanceBatchSize">
            <summary> Default rebalance batch size in bytes. </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Cache.Configuration.CacheConfiguration.DefaultWriteSynchronizationMode">
            <summary> Default value for <see cref="P:Apache.Ignite.Core.Cache.Configuration.CacheConfiguration.WriteSynchronizationMode"/> property.</summary>
        </member>
        <member name="F:Apache.Ignite.Core.Cache.Configuration.CacheConfiguration.DefaultEagerTtl">
            <summary> Default value for eager ttl flag. </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Cache.Configuration.CacheConfiguration.DefaultMaxConcurrentAsyncOperations">
            <summary> Default value for 'maxConcurrentAsyncOps'. </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Cache.Configuration.CacheConfiguration.DefaultWriteBehindEnabled">
            <summary> Default value for 'writeBehindEnabled' flag. </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Cache.Configuration.CacheConfiguration.DefaultWriteBehindFlushSize">
            <summary> Default flush size for write-behind cache store. </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Cache.Configuration.CacheConfiguration.DefaultWriteBehindFlushThreadCount">
            <summary> Default count of flush threads for write-behind cache store. </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Cache.Configuration.CacheConfiguration.DefaultWriteBehindBatchSize">
            <summary> Default batch size for write-behind cache store. </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Cache.Configuration.CacheConfiguration.DefaultLoadPreviousValue">
            <summary> Default value for load previous value flag. </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Cache.Configuration.CacheConfiguration.DefaultReadFromBackup">
            <summary> Default value for 'readFromBackup' flag. </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Cache.Configuration.CacheConfiguration.DefaultKeepVinaryInStore">
            <summary> Default value for keep portable in store behavior .</summary>
        </member>
        <member name="F:Apache.Ignite.Core.Cache.Configuration.CacheConfiguration.DefaultKeepBinaryInStore">
            <summary> Default value for <see cref="P:Apache.Ignite.Core.Cache.Configuration.CacheConfiguration.KeepBinaryInStore"/> property.</summary>
        </member>
        <member name="F:Apache.Ignite.Core.Cache.Configuration.CacheConfiguration.DefaultCopyOnRead">
            <summary> Default value for 'copyOnRead' flag. </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Cache.Configuration.CacheConfiguration.DefaultReadThrough">
            <summary> Default value for read-through behavior. </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Cache.Configuration.CacheConfiguration.DefaultWriteThrough">
            <summary> Default value for write-through behavior. </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Cache.Configuration.CacheConfiguration.DefaultWriteBehindCoalescing">
            <summary> Default value for <see cref="P:Apache.Ignite.Core.Cache.Configuration.CacheConfiguration.WriteBehindCoalescing"/>. </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Cache.Configuration.CacheConfiguration.DefaultPartitionLossPolicy">
            <summary> Default value for <see cref="P:Apache.Ignite.Core.Cache.Configuration.CacheConfiguration.PartitionLossPolicy"/>. </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Cache.Configuration.CacheConfiguration.DefaultSqlIndexMaxInlineSize">
            <summary> Default value for <see cref="P:Apache.Ignite.Core.Cache.Configuration.CacheConfiguration.SqlIndexMaxInlineSize"/>. </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Cache.Configuration.CacheConfiguration.DefaultRebalanceTimeout">
            <summary> Default rebalance timeout.</summary>
        </member>
        <member name="F:Apache.Ignite.Core.Cache.Configuration.CacheConfiguration.DefaultRebalanceThrottle">
            <summary> Time to wait between rebalance messages to avoid overloading CPU. </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Cache.Configuration.CacheConfiguration.DefaultLockTimeout">
            <summary> Default lock timeout. </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Cache.Configuration.CacheConfiguration.DefaultWriteBehindFlushFrequency">
            <summary> Default flush frequency for write-behind cache store. </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Cache.Configuration.CacheConfiguration.DefaultLongQueryWarningTimeout">
            <summary> Default timeout after which long query warning will be printed. </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Configuration.CacheConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Cache.Configuration.CacheConfiguration"/> class.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Configuration.CacheConfiguration.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Cache.Configuration.CacheConfiguration"/> class.
            </summary>
            <param name="name">Cache name.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Configuration.CacheConfiguration.#ctor(System.String,System.Type[])">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Cache.Configuration.CacheConfiguration"/> class 
            and populates <see cref="P:Apache.Ignite.Core.Cache.Configuration.CacheConfiguration.QueryEntities"/> according to provided query types.
            </summary>
            <param name="name">Cache name.</param>
            <param name="queryTypes">
            Collection of types to be registered as query entities. These types should use 
            <see cref="T:Apache.Ignite.Core.Cache.Configuration.QuerySqlFieldAttribute"/> to configure query fields and properties.
            </param>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Configuration.CacheConfiguration.#ctor(System.String,Apache.Ignite.Core.Cache.Configuration.QueryEntity[])">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Cache.Configuration.CacheConfiguration"/> class.
            </summary>
            <param name="name">Cache name.</param>
            <param name="queryEntities">Query entities.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Configuration.CacheConfiguration.#ctor(Apache.Ignite.Core.Cache.Configuration.CacheConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Cache.Configuration.CacheConfiguration"/> class,
            performing a deep copy of specified cache configuration.
            </summary>
            <param name="other">The other configuration to perfrom deep copy from.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Configuration.CacheConfiguration.#ctor(Apache.Ignite.Core.Impl.Binary.BinaryReader)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Cache.Configuration.CacheConfiguration"/> class.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Configuration.CacheConfiguration.Read(Apache.Ignite.Core.Impl.Binary.BinaryReader)">
            <summary>
            Reads data into this instance from the specified reader.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Configuration.CacheConfiguration.Write(Apache.Ignite.Core.Impl.Binary.BinaryWriter)">
            <summary>
            Writes this instance to the specified writer.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Configuration.CacheConfiguration.CopyLocalProperties(Apache.Ignite.Core.Cache.Configuration.CacheConfiguration)">
            <summary>
            Copies the local properties (properties that are not written in Write method).
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Configuration.CacheConfiguration.GetQueryEntityKey(Apache.Ignite.Core.Cache.Configuration.QueryEntity)">
            <summary>
            Gets the query entity key.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Configuration.CacheConfiguration.Validate(Apache.Ignite.Core.Log.ILogger)">
            <summary>
            Validates this instance and outputs information to the log, if necessary.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Configuration.CacheConfiguration.Name">
            <summary>
            Gets or sets the cache name.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Configuration.CacheConfiguration.WriteSynchronizationMode">
            <summary>
            Gets or sets write synchronization mode. This mode controls whether the main        
            caller should wait for update on other nodes to complete or not.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Configuration.CacheConfiguration.EagerTtl">
            <summary>
            Gets or sets flag indicating whether expired cache entries will be eagerly removed from cache. 
            When set to false, expired entries will be removed on next entry access.        
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Configuration.CacheConfiguration.LoadPreviousValue">
            <summary>
            Gets or sets flag indicating whether value should be loaded from store if it is not in the cache 
            for the following cache operations:   
            <list type="bullet">
            <item><term><see cref="M:Apache.Ignite.Core.Cache.ICache`2.PutIfAbsent(`0,`1)"/></term></item>
            <item><term><see cref="M:Apache.Ignite.Core.Cache.ICache`2.Replace(`0,`1)"/></term></item>
            <item><term><see cref="M:Apache.Ignite.Core.Cache.ICache`2.Remove(`0)"/></term></item>
            <item><term><see cref="M:Apache.Ignite.Core.Cache.ICache`2.GetAndPut(`0,`1)"/></term></item>
            <item><term><see cref="M:Apache.Ignite.Core.Cache.ICache`2.GetAndRemove(`0)"/></term></item>
            <item><term><see cref="M:Apache.Ignite.Core.Cache.ICache`2.GetAndReplace(`0,`1)"/></term></item>
            <item><term><see cref="M:Apache.Ignite.Core.Cache.ICache`2.GetAndPutIfAbsent(`0,`1)"/></term></item>
            </list>     
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Configuration.CacheConfiguration.KeepBinaryInStore">
            <summary>
            Gets or sets the flag indicating whether <see cref="T:Apache.Ignite.Core.Cache.Store.ICacheStore"/> is working with binary objects 
            instead of deserialized objects.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Configuration.CacheConfiguration.CacheMode">
            <summary>
            Gets or sets caching mode to use.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Configuration.CacheConfiguration.AtomicityMode">
            <summary>
            Gets or sets cache atomicity mode.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Configuration.CacheConfiguration.Backups">
            <summary>
            Gets or sets number of nodes used to back up single partition for 
            <see cref="F:Apache.Ignite.Core.Cache.Configuration.CacheMode.Partitioned"/> cache.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Configuration.CacheConfiguration.LockTimeout">
            <summary>
            Gets or sets default lock acquisition timeout.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Configuration.CacheConfiguration.Invalidate">
            <summary>
            Invalidation flag. If true, values will be invalidated (nullified) upon commit in near cache.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Configuration.CacheConfiguration.RebalanceMode">
            <summary>
            Gets or sets cache rebalance mode.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Configuration.CacheConfiguration.RebalanceBatchSize">
            <summary>
            Gets or sets size (in number bytes) to be loaded within a single rebalance message.
            Rebalancing algorithm will split total data set on every node into multiple batches prior to sending data.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Configuration.CacheConfiguration.MaxConcurrentAsyncOperations">
            <summary>
            Gets or sets maximum number of allowed concurrent asynchronous operations, 0 for unlimited.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Configuration.CacheConfiguration.WriteBehindEnabled">
            <summary>
            Flag indicating whether Ignite should use write-behind behaviour for the cache store.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Configuration.CacheConfiguration.WriteBehindFlushSize">
            <summary>
            Maximum size of the write-behind cache. If cache size exceeds this value, all cached items are flushed 
            to the cache store and write cache is cleared.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Configuration.CacheConfiguration.WriteBehindFlushFrequency">
            <summary>
            Frequency with which write-behind cache is flushed to the cache store.
            This value defines the maximum time interval between object insertion/deletion from the cache
            at the moment when corresponding operation is applied to the cache store.
            <para/> 
            If this value is 0, then flush is performed according to the flush size.
            <para/>
            Note that you cannot set both
            <see cref="P:Apache.Ignite.Core.Cache.Configuration.CacheConfiguration.WriteBehindFlushSize"/> and <see cref="P:Apache.Ignite.Core.Cache.Configuration.CacheConfiguration.WriteBehindFlushFrequency"/> to 0.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Configuration.CacheConfiguration.WriteBehindFlushThreadCount">
            <summary>
            Number of threads that will perform cache flushing. Cache flushing is performed when cache size exceeds 
            value defined by <see cref="P:Apache.Ignite.Core.Cache.Configuration.CacheConfiguration.WriteBehindFlushSize"/>, or flush interval defined by 
            <see cref="P:Apache.Ignite.Core.Cache.Configuration.CacheConfiguration.WriteBehindFlushFrequency"/> is elapsed.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Configuration.CacheConfiguration.WriteBehindBatchSize">
            <summary>
            Maximum batch size for write-behind cache store operations. 
            Store operations (get or remove) are combined in a batch of this size to be passed to 
            <see cref="M:Apache.Ignite.Core.Cache.Store.ICacheStore`2.WriteAll(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})"/> or <see cref="M:Apache.Ignite.Core.Cache.Store.ICacheStore`2.DeleteAll(System.Collections.Generic.IEnumerable{`0})"/> methods. 
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Configuration.CacheConfiguration.RebalanceTimeout">
            <summary>
            Gets or sets rebalance timeout.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Configuration.CacheConfiguration.RebalanceDelay">
            <summary>
            Gets or sets delay upon a node joining or leaving topology (or crash) 
            after which rebalancing should be started automatically. 
            Rebalancing should be delayed if you plan to restart nodes
            after they leave topology, or if you plan to start multiple nodes at once or one after another
            and don't want to repartition and rebalance until all nodes are started.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Configuration.CacheConfiguration.RebalanceThrottle">
            <summary>
            Time to wait between rebalance messages to avoid overloading of CPU or network.
            When rebalancing large data sets, the CPU or network can get over-consumed with rebalancing messages,
            which consecutively may slow down the application performance. This parameter helps tune 
            the amount of time to wait between rebalance messages to make sure that rebalancing process
            does not have any negative performance impact. Note that application will continue to work
            properly while rebalancing is still in progress.
            <para/>
            Value of 0 means that throttling is disabled.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Configuration.CacheConfiguration.ReadFromBackup">
            <summary>
            Gets or sets flag indicating whether data can be read from backup.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Configuration.CacheConfiguration.CopyOnRead">
            <summary>
            Gets or sets flag indicating whether copy of the value stored in cache should be created
            for cache operation implying return value. 
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Configuration.CacheConfiguration.LongQueryWarningTimeout">
            <summary>
            Gets or sets the timeout after which long query warning will be printed.
            <para/>
            This property is obsolete, use <see cref="P:Apache.Ignite.Core.IgniteConfiguration.LongQueryWarningTimeout"/> instead.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Configuration.CacheConfiguration.SqlEscapeAll">
            <summary>
            If true all the SQL table and field names will be escaped with double quotes like 
            ({ "tableName"."fieldsName"}). This enforces case sensitivity for field names and
            also allows having special characters in table and field names.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Configuration.CacheConfiguration.CacheStoreFactory">
            <summary>
            Gets or sets the factory for underlying persistent storage for read-through and write-through operations.
            <para/>
            See <see cref="P:Apache.Ignite.Core.Cache.Configuration.CacheConfiguration.ReadThrough"/> and <see cref="P:Apache.Ignite.Core.Cache.Configuration.CacheConfiguration.WriteThrough"/> properties to enable read-through and 
            write-through behavior so that cache store is invoked on get and/or put operations.
            <para/>
            If both <see cref="P:Apache.Ignite.Core.Cache.Configuration.CacheConfiguration.ReadThrough"/> and <see cref="P:Apache.Ignite.Core.Cache.Configuration.CacheConfiguration.WriteThrough"/> are <code>false</code>, cache store 
            will be invoked only on <see cref="M:Apache.Ignite.Core.Cache.ICache`2.LoadCache(Apache.Ignite.Core.Cache.ICacheEntryFilter{`0,`1},System.Object[])"/> calls.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Configuration.CacheConfiguration.ReadThrough">
            <summary>
            Gets or sets a value indicating whether read-through should be enabled for cache operations.
            <para/>
            When in read-through mode, cache misses that occur due to cache entries not existing 
            as a result of performing a "get" operations will appropriately cause the 
            configured <see cref="T:Apache.Ignite.Core.Cache.Store.ICacheStore"/> (see <see cref="P:Apache.Ignite.Core.Cache.Configuration.CacheConfiguration.CacheStoreFactory"/>) to be invoked.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Configuration.CacheConfiguration.WriteThrough">
            <summary>
            Gets or sets a value indicating whether write-through should be enabled for cache operations.
            <para/>
            When in "write-through" mode, cache updates that occur as a result of performing "put" operations
            will appropriately cause the configured 
            <see cref="T:Apache.Ignite.Core.Cache.Store.ICacheStore"/> (see <see cref="P:Apache.Ignite.Core.Cache.Configuration.CacheConfiguration.CacheStoreFactory"/>) to be invoked.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Configuration.CacheConfiguration.QueryEntities">
            <summary>
            Gets or sets the query entity configuration.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Configuration.CacheConfiguration.NearConfiguration">
            <summary>
            Gets or sets the near cache configuration.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Configuration.CacheConfiguration.EvictionPolicy">
            <summary>
            Gets or sets the eviction policy.
            Null value means disabled evictions.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Configuration.CacheConfiguration.AffinityFunction">
            <summary>
            Gets or sets the affinity function to provide mapping from keys to nodes.
            <para/>
            Predefined implementations:
            <see cref="T:Apache.Ignite.Core.Cache.Affinity.Rendezvous.RendezvousAffinityFunction"/>.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Configuration.CacheConfiguration.ExpiryPolicyFactory">
            <summary>
            Gets or sets the factory for <see cref="T:Apache.Ignite.Core.Cache.Expiry.IExpiryPolicy"/> to be used for all cache operations,
            unless <see cref="M:Apache.Ignite.Core.Cache.ICache`2.WithExpiryPolicy(Apache.Ignite.Core.Cache.Expiry.IExpiryPolicy)"/> is called.
            <para/>
            Default is null, which means no expiration.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Configuration.CacheConfiguration.EnableStatistics">
            <summary>
            Gets or sets a value indicating whether statistics gathering is enabled on a cache.
            These statistics can be retrieved via <see cref="M:Apache.Ignite.Core.Cache.ICache`2.GetMetrics"/>.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Configuration.CacheConfiguration.PluginConfigurations">
            <summary>
            Gets or sets the plugin configurations.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Configuration.CacheConfiguration.MemoryPolicyName">
            <summary>
            Gets or sets the name of the <see cref="T:Apache.Ignite.Core.Cache.Configuration.MemoryPolicyConfiguration"/> for this cache.
            See <see cref="P:Apache.Ignite.Core.IgniteConfiguration.MemoryConfiguration"/>.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Configuration.CacheConfiguration.DataRegionName">
            <summary>
            Gets or sets the name of the data region, see <see cref="T:Apache.Ignite.Core.Configuration.DataRegionConfiguration"/>.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Configuration.CacheConfiguration.WriteBehindCoalescing">
            <summary>
            Gets or sets write coalescing flag for write-behind cache store operations.
            Store operations (get or remove) with the same key are combined or coalesced to single,
            resulting operation to reduce pressure to underlying cache store.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Configuration.CacheConfiguration.PartitionLossPolicy">
            <summary>
            Gets or sets the partition loss policy. This policy defines how Ignite will react to
            a situation when all nodes for some partition leave the cluster.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Configuration.CacheConfiguration.GroupName">
            <summary>
            Gets or sets the cache group name. Caches with the same group name share single underlying 'physical'
            cache (partition set), but are logically isolated. 
            <para/>
            Since underlying cache is shared, the following configuration properties should be the same within group:
            <see cref="P:Apache.Ignite.Core.Cache.Configuration.CacheConfiguration.AffinityFunction"/>, <see cref="P:Apache.Ignite.Core.Cache.Configuration.CacheConfiguration.CacheMode"/>, <see cref="P:Apache.Ignite.Core.Cache.Configuration.CacheConfiguration.PartitionLossPolicy"/>,
            <see cref="P:Apache.Ignite.Core.Cache.Configuration.CacheConfiguration.DataRegionName"/>
            <para/>
            Grouping caches reduces overall overhead, since internal data structures are shared.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Configuration.CacheConfiguration.SqlIndexMaxInlineSize">
            <summary>
            Gets or sets maximum inline size in bytes for sql indexes. See also <see cref="P:Apache.Ignite.Core.Cache.Configuration.QueryIndex.InlineSize"/>.
            -1 for automatic.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Cache.Configuration.CacheMode">
            <summary>
            Caching modes.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Cache.Configuration.CacheMode.Local">
            <summary>
            Specifies local-only cache behaviour. In this mode caches residing on
            different grid nodes will not know about each other.
            <para/>
            Other than distribution, <see cref="F:Apache.Ignite.Core.Cache.Configuration.CacheMode.Local"/> caches still have all
            the caching features, such as eviction, expiration, swapping,
            querying, etc... This mode is very useful when caching read-only data
            or data that automatically expires at a certain interval and
            then automatically reloaded from persistence store.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Cache.Configuration.CacheMode.Replicated">
            <summary>
            Specifies fully replicated cache behavior. In this mode all the keys are distributed
            to all participating nodes. 
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Cache.Configuration.CacheMode.Partitioned">
            <summary>
            Specifies partitioned cache behaviour. In this mode the overall
            key set will be divided into partitions and all partitions will be split
            equally between participating nodes. 
            <para />
            Note that partitioned cache is always fronted by local 'near' cache which stores most recent data. 
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Cache.Configuration.CacheRebalanceMode">
            <summary>
            Cache rebalance mode. When rebalancing is enabled (i.e. has value other than <see cref="F:Apache.Ignite.Core.Cache.Configuration.CacheRebalanceMode.None"/>), 
            distributed caches will attempt to rebalance all necessary values from other grid nodes. 
            <para/>
            Replicated caches will try to load the full set of cache entries from other nodes, 
            while partitioned caches will only load the entries for which current node is primary or backup.
            <para/>
            Note that rebalance mode only makes sense for <see cref="F:Apache.Ignite.Core.Cache.Configuration.CacheMode.Replicated"/> 
            and <see cref="F:Apache.Ignite.Core.Cache.Configuration.CacheMode.Partitioned"/> caches. Caches with <see cref="F:Apache.Ignite.Core.Cache.Configuration.CacheMode.Local"/> 
            mode are local by definition and therefore cannot rebalance any values from neighboring nodes.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Cache.Configuration.CacheRebalanceMode.Sync">
            <summary>
            Synchronous rebalance mode. Distributed caches will not start until all necessary data
            is loaded from other available grid nodes.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Cache.Configuration.CacheRebalanceMode.Async">
            <summary>
            Asynchronous rebalance mode. Distributed caches will start immediately and will load all necessary
            data from other available grid nodes in the background.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Cache.Configuration.CacheRebalanceMode.None">
            <summary>
            In this mode no rebalancing will take place which means that caches will be either loaded on
            demand from persistent store whenever data is accessed, or will be populated explicitly.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Cache.Configuration.CacheWriteSynchronizationMode">
            <summary>
            Mode indicating how Ignite should wait for write replies from other nodes.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Cache.Configuration.CacheWriteSynchronizationMode.FullSync">
            <summary>
            Mode indicating that Ignite should wait for write or commit replies from all nodes.
            This behavior guarantees that whenever any of the atomic or transactional writes
            complete, all other participating nodes which cache the written data have been updated.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Cache.Configuration.CacheWriteSynchronizationMode.FullAsync">
            <summary>
            Flag indicating that Ignite will not wait for write or commit responses from participating nodes,
            which means that remote nodes may get their state updated a bit after any of the cache write methods
            complete, or after {@link Transaction#commit()} method completes.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Cache.Configuration.CacheWriteSynchronizationMode.PrimarySync">
            <summary>
            This flag only makes sense for {@link CacheMode#PARTITIONED} mode. When enabled, Ignite will wait 
            for write or commit to complete on primary node, but will not wait for backups to be updated.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Discovery.Tcp.ITcpDiscoveryIpFinder">
            <summary>
            Represents an IP finder for <see cref="T:Apache.Ignite.Core.Discovery.Tcp.TcpDiscoverySpi"/>.
            Only predefined implementations are supported now: 
            <see cref="T:Apache.Ignite.Core.Discovery.Tcp.Static.TcpDiscoveryStaticIpFinder"/>, <see cref="T:Apache.Ignite.Core.Discovery.Tcp.Multicast.TcpDiscoveryMulticastIpFinder"/>.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Discovery.Tcp.TcpDiscoverySpi">
            <summary>
            TCP discover service provider.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Discovery.IDiscoverySpi">
            <summary>
            Represents a discovery service provider interface.
            Only predefined implementation is supported now: <see cref="T:Apache.Ignite.Core.Discovery.Tcp.TcpDiscoverySpi"/>.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Discovery.Tcp.TcpDiscoverySpi.DefaultReconnectCount">
            <summary>
            Default value for the <see cref="P:Apache.Ignite.Core.Discovery.Tcp.TcpDiscoverySpi.ReconnectCount"/> property.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Discovery.Tcp.TcpDiscoverySpi.DefaultLocalPort">
            <summary>
            Default value for the <see cref="P:Apache.Ignite.Core.Discovery.Tcp.TcpDiscoverySpi.LocalPort"/> property.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Discovery.Tcp.TcpDiscoverySpi.DefaultLocalPortRange">
            <summary>
            Default value for the <see cref="P:Apache.Ignite.Core.Discovery.Tcp.TcpDiscoverySpi.LocalPortRange"/> property.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Discovery.Tcp.TcpDiscoverySpi.DefaultThreadPriority">
            <summary>
            Default value for the <see cref="P:Apache.Ignite.Core.Discovery.Tcp.TcpDiscoverySpi.ThreadPriority"/> property.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Discovery.Tcp.TcpDiscoverySpi.DefaultTopologyHistorySize">
            <summary>
            Default value for the <see cref="P:Apache.Ignite.Core.Discovery.Tcp.TcpDiscoverySpi.TopologyHistorySize"/> property.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Discovery.Tcp.TcpDiscoverySpi.DefaultSocketTimeout">
            <summary>
            Default socket timeout.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Discovery.Tcp.TcpDiscoverySpi.DefaultAckTimeout">
            <summary>
            Default acknowledgement timeout.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Discovery.Tcp.TcpDiscoverySpi.DefaultMaxAckTimeout">
            <summary>
            Default maximum acknowledgement timeout.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Discovery.Tcp.TcpDiscoverySpi.DefaultNetworkTimeout">
            <summary>
            Default network timeout.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Discovery.Tcp.TcpDiscoverySpi.DefaultJoinTimeout">
            <summary>
            Default join timeout.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Discovery.Tcp.TcpDiscoverySpi.DefaultIpFinderCleanFrequency">
            <summary>
            Default value for the <see cref="P:Apache.Ignite.Core.Discovery.Tcp.TcpDiscoverySpi.IpFinderCleanFrequency"/> property.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Discovery.Tcp.TcpDiscoverySpi.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Discovery.Tcp.TcpDiscoverySpi"/> class.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Discovery.Tcp.TcpDiscoverySpi.#ctor(Apache.Ignite.Core.Binary.IBinaryRawReader)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Discovery.Tcp.TcpDiscoverySpi"/> class.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Discovery.Tcp.TcpDiscoverySpi.Write(Apache.Ignite.Core.Binary.IBinaryRawWriter)">
            <summary>
            Writes this instance to the specified writer.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Discovery.Tcp.TcpDiscoverySpi.IpFinder">
            <summary>
            Gets or sets the IP finder which defines how nodes will find each other on the network.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Discovery.Tcp.TcpDiscoverySpi.SocketTimeout">
            <summary>
            Gets or sets the socket timeout.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Discovery.Tcp.TcpDiscoverySpi.AckTimeout">
            <summary>
            Gets or sets the timeout for receiving acknowledgement for sent message.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Discovery.Tcp.TcpDiscoverySpi.MaxAckTimeout">
            <summary>
            Gets or sets the maximum timeout for receiving acknowledgement for sent message.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Discovery.Tcp.TcpDiscoverySpi.NetworkTimeout">
            <summary>
            Gets or sets the network timeout.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Discovery.Tcp.TcpDiscoverySpi.JoinTimeout">
            <summary>
            Gets or sets the join timeout.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Discovery.Tcp.TcpDiscoverySpi.ForceServerMode">
            <summary>
            Gets or sets a value indicating whether TcpDiscoverySpi is started in server mode 
            regardless of <see cref="P:Apache.Ignite.Core.IgniteConfiguration.ClientMode"/> setting.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Discovery.Tcp.TcpDiscoverySpi.ClientReconnectDisabled">
            <summary>
            Gets or sets a value indicating whether client does not try to reconnect after
            server detected client node failure.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Discovery.Tcp.TcpDiscoverySpi.LocalAddress">
            <summary>
            Gets or sets the local host IP address that discovery SPI uses.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Discovery.Tcp.TcpDiscoverySpi.ReconnectCount">
            <summary>
            Gets or sets the number of times node tries to (re)establish connection to another node.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Discovery.Tcp.TcpDiscoverySpi.LocalPort">
            <summary>
            Gets or sets the local port to listen to.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Discovery.Tcp.TcpDiscoverySpi.LocalPortRange">
            <summary>
            Gets or sets the range for local ports. Local node will try to bind on first available port starting from
            <see cref="P:Apache.Ignite.Core.Discovery.Tcp.TcpDiscoverySpi.LocalPort"/> up until (<see cref="P:Apache.Ignite.Core.Discovery.Tcp.TcpDiscoverySpi.LocalPort"/> + <see cref="P:Apache.Ignite.Core.Discovery.Tcp.TcpDiscoverySpi.LocalPortRange"/>).
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Discovery.Tcp.TcpDiscoverySpi.StatisticsPrintFrequency">
            <summary>
            Gets or sets the statistics print frequency.
            <see cref="F:System.TimeSpan.Zero"/> for no statistics.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Discovery.Tcp.TcpDiscoverySpi.IpFinderCleanFrequency">
            <summary>
            Gets or sets the IP finder clean frequency.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Discovery.Tcp.TcpDiscoverySpi.ThreadPriority">
            <summary>
            Sets thread priority, 1 (lowest) to 10 (highest). All threads within SPI will be started with it.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Discovery.Tcp.TcpDiscoverySpi.TopologyHistorySize">
            <summary>
            Gets or sets the size of topology snapshots history.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Cache.Configuration.QueryIndexField">
            <summary>
            Represents an indexed field.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Configuration.QueryIndexField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Cache.Configuration.QueryIndexField"/> class.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Configuration.QueryIndexField.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Cache.Configuration.QueryIndexField"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Configuration.QueryIndexField.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Cache.Configuration.QueryIndexField"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="isDescending">Sort direction.</param>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Configuration.QueryIndexField.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Configuration.QueryIndexField.IsDescending">
            <summary>
            Gets a value indicating whether this index is descending. Default is false.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Discovery.Tcp.TcpDiscoveryIpFinderBase">
            <summary>
            Base IpFinder class.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Discovery.Tcp.TcpDiscoveryIpFinderBase.TypeCodeVmIpFinder">
            
        </member>
        <member name="F:Apache.Ignite.Core.Discovery.Tcp.TcpDiscoveryIpFinderBase.TypeCodeMulticastIpFinder">
            
        </member>
        <member name="M:Apache.Ignite.Core.Discovery.Tcp.TcpDiscoveryIpFinderBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Discovery.Tcp.TcpDiscoveryIpFinderBase"/> class.
            Prevents user-defined implementations.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Discovery.Tcp.TcpDiscoveryIpFinderBase.Write(Apache.Ignite.Core.Binary.IBinaryRawWriter)">
            <summary>
            Writes this instance to the specified writer.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Discovery.Tcp.TcpDiscoveryIpFinderBase.ReadInstance(Apache.Ignite.Core.Binary.IBinaryRawReader)">
            <summary>
            Reads the instance.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Discovery.Tcp.TcpDiscoveryIpFinderBase.TypeCode">
            <summary>
            Gets the type code to be used in Java to determine ip finder type.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Discovery.Tcp.Multicast.TcpDiscoveryMulticastIpFinder">
            <summary>
            Multicast-based IP finder.
            <para />
            When TCP discovery starts this finder sends multicast request and waits
            for some time when others nodes reply to this request with messages containing their addresses
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Discovery.Tcp.Static.TcpDiscoveryStaticIpFinder">
            <summary>
            IP Finder which works only with pre-configured list of IP addresses.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Discovery.Tcp.Static.TcpDiscoveryStaticIpFinder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Discovery.Tcp.Static.TcpDiscoveryStaticIpFinder"/> class.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Discovery.Tcp.Static.TcpDiscoveryStaticIpFinder.#ctor(Apache.Ignite.Core.Binary.IBinaryRawReader)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Discovery.Tcp.Static.TcpDiscoveryStaticIpFinder"/> class.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Discovery.Tcp.Static.TcpDiscoveryStaticIpFinder.Write(Apache.Ignite.Core.Binary.IBinaryRawWriter)">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Discovery.Tcp.Static.TcpDiscoveryStaticIpFinder.Endpoints">
            <summary>
            Gets or sets the end points.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Discovery.Tcp.Static.TcpDiscoveryStaticIpFinder.TypeCode">
            <summary>
            Gets the type code to be used in Java to determine ip finder type.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Discovery.Tcp.Multicast.TcpDiscoveryMulticastIpFinder.DefaultMulticastPort">
            <summary>
            Default multicast port.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Discovery.Tcp.Multicast.TcpDiscoveryMulticastIpFinder.DefaultAddressRequestAttempts">
            <summary>
            Default address request attempts.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Discovery.Tcp.Multicast.TcpDiscoveryMulticastIpFinder.DefaultMulticastGroup">
            <summary>
            Default multicast group.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Discovery.Tcp.Multicast.TcpDiscoveryMulticastIpFinder.DefaultResponseTimeout">
            <summary>
            Default response timeout.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Discovery.Tcp.Multicast.TcpDiscoveryMulticastIpFinder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Discovery.Tcp.Multicast.TcpDiscoveryMulticastIpFinder"/> class.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Discovery.Tcp.Multicast.TcpDiscoveryMulticastIpFinder.#ctor(Apache.Ignite.Core.Binary.IBinaryRawReader)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Discovery.Tcp.Multicast.TcpDiscoveryMulticastIpFinder"/> class.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Discovery.Tcp.Multicast.TcpDiscoveryMulticastIpFinder.Write(Apache.Ignite.Core.Binary.IBinaryRawWriter)">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Discovery.Tcp.Multicast.TcpDiscoveryMulticastIpFinder.LocalAddress">
            <summary>
            Gets or sets the local address.
            If provided address is non-loopback then multicast socket is bound to this interface. 
            If local address is not set or is any local address then IP finder
            creates multicast sockets for all found non-loopback addresses.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Discovery.Tcp.Multicast.TcpDiscoveryMulticastIpFinder.MulticastGroup">
            <summary>
            Gets or sets the IP address of the multicast group.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Discovery.Tcp.Multicast.TcpDiscoveryMulticastIpFinder.MulticastPort">
            <summary>
            Gets or sets the port number which multicast messages are sent to.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Discovery.Tcp.Multicast.TcpDiscoveryMulticastIpFinder.AddressRequestAttempts">
            <summary>
            Gets or sets the number of attempts to send multicast address request. IP finder re-sends
            request only in case if no reply for previous request is received.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Discovery.Tcp.Multicast.TcpDiscoveryMulticastIpFinder.ResponseTimeout">
            <summary>
            Gets or sets the response timeout.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Discovery.Tcp.Multicast.TcpDiscoveryMulticastIpFinder.TimeToLive">
            <summary>
            Gets or sets the time to live for multicast packets sent out on this
            IP finder in order to control the scope of the multicast.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Discovery.Tcp.Multicast.TcpDiscoveryMulticastIpFinder.TypeCode">
            <summary>
            Gets the type code to be used in Java to determine ip finder type.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Cache.Configuration.QueryEntity">
            <summary>
            Query entity is a description of cache entry (composed of key and value) 
            in a way of how it must be indexed and can be queried.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Cache.Configuration.QueryEntity._keyType">
            
        </member>
        <member name="F:Apache.Ignite.Core.Cache.Configuration.QueryEntity._valueType">
            
        </member>
        <member name="F:Apache.Ignite.Core.Cache.Configuration.QueryEntity._valueTypeName">
            
        </member>
        <member name="F:Apache.Ignite.Core.Cache.Configuration.QueryEntity._keyTypeName">
            
        </member>
        <member name="F:Apache.Ignite.Core.Cache.Configuration.QueryEntity._aliasMap">
            
        </member>
        <member name="F:Apache.Ignite.Core.Cache.Configuration.QueryEntity._aliases">
            
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Configuration.QueryEntity.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Cache.Configuration.QueryEntity"/> class.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Configuration.QueryEntity.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Cache.Configuration.QueryEntity"/> class.
            </summary>
            <param name="valueType">Type of the cache entry value.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Configuration.QueryEntity.#ctor(System.Type,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Cache.Configuration.QueryEntity"/> class.
            </summary>
            <param name="keyType">Type of the key.</param>
            <param name="valueType">Type of the value.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Configuration.QueryEntity.Apache#Ignite#Core#Impl#Cache#IQueryEntityInternal#GetAlias(System.String)">
            <summary>
            Gets the alias by field name, or null when no match found.
            This method constructs a dictionary lazily to perform lookups.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Configuration.QueryEntity.#ctor(Apache.Ignite.Core.Binary.IBinaryRawReader)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Cache.Configuration.QueryEntity"/> class.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Configuration.QueryEntity.Write(Apache.Ignite.Core.Binary.IBinaryRawWriter)">
            <summary>
            Writes this instance.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Configuration.QueryEntity.Validate(Apache.Ignite.Core.Log.ILogger,System.String)">
            <summary>
            Validates this instance and outputs information to the log, if necessary.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Configuration.QueryEntity.CopyLocalProperties(Apache.Ignite.Core.Cache.Configuration.QueryEntity)">
            <summary>
            Copies the local properties (properties that are not written in Write method).
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Configuration.QueryEntity.RescanAttributes(System.Type,System.Type)">
            <summary>
            Rescans the attributes in <see cref="P:Apache.Ignite.Core.Cache.Configuration.QueryEntity.KeyType"/> and <see cref="P:Apache.Ignite.Core.Cache.Configuration.QueryEntity.ValueType"/>.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Configuration.QueryEntity.GetGroupIndexes(System.Collections.Generic.List{Apache.Ignite.Core.Cache.Configuration.QueryEntity.QueryIndexEx})">
            <summary>
            Gets the group indexes.
            </summary>
            <param name="indexes">Ungrouped indexes with their group names.</param>
            <returns></returns>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Configuration.QueryEntity.ScanAttributes(System.Type,System.Collections.Generic.List{Apache.Ignite.Core.Cache.Configuration.QueryField},System.Collections.Generic.List{Apache.Ignite.Core.Cache.Configuration.QueryEntity.QueryIndexEx},System.String,System.Collections.Generic.ISet{System.Type},System.Boolean)">
            <summary>
            Scans specified type for occurences of <see cref="T:Apache.Ignite.Core.Cache.Configuration.QuerySqlFieldAttribute"/>.
            </summary>
            <param name="type">The type.</param>
            <param name="fields">The fields.</param>
            <param name="indexes">The indexes.</param>
            <param name="parentPropName">Name of the parent property.</param>
            <param name="visitedTypes">The visited types.</param>
            <param name="isKey">Whether this is a key type.</param>
            <exception cref="T:System.InvalidOperationException">Recursive Query Field definition detected:  + type</exception>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Configuration.QueryEntity.GetFieldsAndProperties(System.Type)">
            <summary>
            Gets the fields and properties.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Configuration.QueryEntity.KeyTypeName">
            <summary>
            Gets or sets key Java type name.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Configuration.QueryEntity.KeyType">
            <summary>
            Gets or sets the type of the key.
            <para/>
            This is a shortcut for <see cref="P:Apache.Ignite.Core.Cache.Configuration.QueryEntity.KeyTypeName"/>. Getter will return null for non-primitive types.
            <para/>
            Setting this property will overwrite <see cref="P:Apache.Ignite.Core.Cache.Configuration.QueryEntity.Fields"/> and <see cref="P:Apache.Ignite.Core.Cache.Configuration.QueryEntity.Indexes"/> according to
            <see cref="T:Apache.Ignite.Core.Cache.Configuration.QuerySqlFieldAttribute"/>, if any.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Configuration.QueryEntity.ValueTypeName">
            <summary>
            Gets or sets value Java type name.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Configuration.QueryEntity.ValueType">
            <summary>
            Gets or sets the type of the value.
            <para/>
            This is a shortcut for <see cref="P:Apache.Ignite.Core.Cache.Configuration.QueryEntity.ValueTypeName"/>. Getter will return null for non-primitive types.
            <para/>
            Setting this property will overwrite <see cref="P:Apache.Ignite.Core.Cache.Configuration.QueryEntity.Fields"/> and <see cref="P:Apache.Ignite.Core.Cache.Configuration.QueryEntity.Indexes"/> according to
            <see cref="T:Apache.Ignite.Core.Cache.Configuration.QuerySqlFieldAttribute"/>, if any.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Configuration.QueryEntity.KeyFieldName">
            <summary>
            Gets or sets the name of the field that is used to denote the entire key.
            <para />
            By default, entite key can be accessed with a special "_key" field name.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Configuration.QueryEntity.ValueFieldName">
            <summary>
            Gets or sets the name of the field that is used to denote the entire value.
            <para />
            By default, entite value can be accessed with a special "_val" field name.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Configuration.QueryEntity.TableName">
            <summary>
            Gets or sets the name of the SQL table.
            When not set, value type name is used.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Configuration.QueryEntity.Fields">
            <summary>
            Gets or sets query fields, a map from field name to Java type name. 
            The order of fields defines the order of columns returned by the 'select *' queries.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Configuration.QueryEntity.Aliases">
            <summary>
            Gets or sets field name aliases: mapping from full name in dot notation to an alias 
            that will be used as SQL column name.
            Example: {"parent.name" -> "parentName"}.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Configuration.QueryEntity.Indexes">
            <summary>
            Gets or sets the query indexes.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Cache.Configuration.QueryEntity.QueryIndexEx">
            <summary>
            Extended index with group names.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Cache.Configuration.QueryIndex">
            <summary>
            Represents cache query index configuration.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Cache.Configuration.QueryIndex.DefaultInlineSize">
            <summary>
            Default value for <see cref="P:Apache.Ignite.Core.Cache.Configuration.QueryIndex.InlineSize"/>.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Cache.Configuration.QueryIndex._inlineSize">
            Inline size. 
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Configuration.QueryIndex.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Cache.Configuration.QueryIndex"/> class.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Configuration.QueryIndex.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Cache.Configuration.QueryIndex"/> class.
            </summary>
            <param name="fieldNames">Names of the fields to index.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Configuration.QueryIndex.#ctor(System.Boolean,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Cache.Configuration.QueryIndex"/> class.
            </summary>
            <param name="isDescending">Sort direction.</param>
            <param name="fieldNames">Names of the fields to index.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Configuration.QueryIndex.#ctor(System.Boolean,Apache.Ignite.Core.Cache.Configuration.QueryIndexType,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Cache.Configuration.QueryIndex"/> class.
            </summary>
            <param name="isDescending">Sort direction.</param>
            <param name="indexType">Type of the index.</param>
            <param name="fieldNames">Names of the fields to index.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Configuration.QueryIndex.#ctor(Apache.Ignite.Core.Cache.Configuration.QueryIndexField[])">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Cache.Configuration.QueryIndex"/> class.
            </summary>
            <param name="fields">The fields.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Configuration.QueryIndex.#ctor(Apache.Ignite.Core.Binary.IBinaryRawReader)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Cache.Configuration.QueryIndex"/> class.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Configuration.QueryIndex.Write(Apache.Ignite.Core.Binary.IBinaryRawWriter)">
            <summary>
            Writes this instance.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Configuration.QueryIndex.Name">
            <summary>
            Gets or sets the index name.
            Will be set automatically if not specified.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Configuration.QueryIndex.IndexType">
            <summary>
            Gets or sets the type of the index.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Configuration.QueryIndex.Fields">
            <summary>
            Gets or sets a collection of fields to be indexed.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Configuration.QueryIndex.InlineSize">
            <summary>
            Gets index inline size in bytes. When enabled part of indexed value will be placed directly to index pages,
            thus minimizing data page accesses and increasing query performance.
            <para/>
            Allowed values:
            <ul>
            <li><c>-1</c> (default) - determine inline size automatically(see below)</li>
            <li><c>0</c> - index inline is disabled(not recommended)</li>
            <li>positive value - fixed index inline</li>
            </ul>
            When set to <c>-1</c>, Ignite will try to detect inline size automatically. It will be no more than
            <see cref="P:Apache.Ignite.Core.Cache.Configuration.CacheConfiguration.SqlIndexMaxInlineSize"/>.
            Index inline will be enabled for all fixed-length types,
             but <b>will not be enabled</b> for <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Configuration.QueryEntity.QueryIndexEx.#ctor(System.String,System.Boolean,Apache.Ignite.Core.Cache.Configuration.QueryIndexType,System.Collections.Generic.ICollection{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Cache.Configuration.QueryEntity.QueryIndexEx"/> class.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="isDescending">if set to <c>true</c> [is descending].</param>
            <param name="indexType">Type of the index.</param>
            <param name="groups">The groups.</param>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Configuration.QueryEntity.QueryIndexEx.IndexGroups">
            <summary>
            Gets or sets the index groups.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Cache.Configuration.QueryField">
            <summary>
            Represents a queryable field.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Cache.Configuration.QueryField._type">
            
        </member>
        <member name="F:Apache.Ignite.Core.Cache.Configuration.QueryField._fieldTypeName">
            
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Configuration.QueryField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Cache.Configuration.QueryField"/> class.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Configuration.QueryField.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Cache.Configuration.QueryField"/> class.
            </summary>
            <param name="name">Name.</param>
            <param name="javaFieldTypeName">Java type name.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Configuration.QueryField.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Cache.Configuration.QueryField"/> class.
            </summary>
            <param name="name">Name.</param>
            <param name="fieldType">Type.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Configuration.QueryField.#ctor(Apache.Ignite.Core.Binary.IBinaryRawReader)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Cache.Configuration.QueryField"/> class.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Configuration.QueryField.Write(Apache.Ignite.Core.Binary.IBinaryRawWriter)">
            <summary>
            Writes this instance to the specified writer.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Configuration.QueryField.Validate(Apache.Ignite.Core.Log.ILogger,System.String)">
            <summary>
            Validates this instance and outputs information to the log, if necessary.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Configuration.QueryField.CopyLocalProperties(Apache.Ignite.Core.Cache.Configuration.QueryField)">
            <summary>
            Copies the local properties (properties that are not written in Write method).
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Configuration.QueryField.Name">
            <summary>
            Gets or sets the field name.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Configuration.QueryField.FieldType">
            <summary>
            Gets or sets the type of the value.
            <para/>
            This is a shortcut for <see cref="P:Apache.Ignite.Core.Cache.Configuration.QueryField.FieldTypeName"/>. Getter will return null for non-primitive types.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Configuration.QueryField.FieldTypeName">
            <summary>
            Gets the Java type name.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Configuration.QueryField.IsKeyField">
            <summary>
            Gets or sets a value indicating whether this field belongs to the cache key.
            Proper value here is required for SQL DML queries which create/modify cache keys.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Configuration.QueryField.NotNull">
            <summary>
            Gets or sets a value indicating whether null value is allowed for the field.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Cache.Configuration.QueryIndexType">
            <summary>
            Query index type.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Cache.Configuration.QueryIndexType.Sorted">
            <summary>
            Sorted index.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Cache.Configuration.QueryIndexType.FullText">
            <summary>
            Fulltext index.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Cache.Configuration.QueryIndexType.Geospatial">
            <summary>
            Geo-spatial index.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Cache.Configuration.QuerySqlFieldAttribute">
            <summary>
            Marks field or property for SQL queries.
            <para/>
            Using this attribute is an alternative to <see cref="P:Apache.Ignite.Core.Cache.Configuration.QueryEntity.Fields"/> in <see cref="T:Apache.Ignite.Core.Cache.Configuration.CacheConfiguration"/>.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Configuration.QuerySqlFieldAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Cache.Configuration.QuerySqlFieldAttribute"/> class.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Configuration.QuerySqlFieldAttribute.Name">
            <summary>
            Gets or sets the sql field name.
            If not provided, property or field name will be used.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Configuration.QuerySqlFieldAttribute.IsIndexed">
            <summary>
            Gets or sets a value indicating whether corresponding field should be indexed.
            Just like with databases, field indexing may require additional overhead during updates, 
            but makes select operations faster.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Configuration.QuerySqlFieldAttribute.IsDescending">
            <summary>
            Gets or sets a value indicating whether index for this field should be descending.
            Ignored when <see cref="P:Apache.Ignite.Core.Cache.Configuration.QuerySqlFieldAttribute.IsIndexed"/> is <c>false</c>.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Configuration.QuerySqlFieldAttribute.IndexGroups">
            <summary>
            Gets or sets the collection of index groups this field belongs to. 
            Groups are used for compound indexes, 
            whenever index should be created on more than one field.
            All fields within the same group will belong to the same index.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Configuration.QuerySqlFieldAttribute.IndexInlineSize">
            <summary>
            Gets or sets the index inline size, see <see cref="P:Apache.Ignite.Core.Cache.Configuration.QueryIndex.InlineSize"/>.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Configuration.QuerySqlFieldAttribute.NotNull">
            <summary>
            Gets or sets a value indicating whether null values are allowed for this field.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Datastream.IDataStreamer`2">
            <summary>
            Data streamer is responsible for loading external data into cache. It achieves it by
            properly buffering updates and properly mapping keys to nodes responsible for the data
            to make sure that there is the least amount of data movement possible and optimal
            network and memory utilization.
            <para/>
            Note that streamer will load data concurrently by multiple internal threads, so the
            data may get to remote nodes in different order from which it was added to
            the streamer.
            <para/>
            Also note that <c>IDataStreamer</c> is not the only way to load data into cache.
            Alternatively you can use 
            <see cref="M:Apache.Ignite.Core.Cache.Store.ICacheStore`2.LoadCache(System.Action{`0,`1},System.Object[])"/>
            method to load data from underlying data store. You can also use standard cache
            <c>put</c> and <c>putAll</c> operations as well, but they most likely will not perform 
            as well as this class for loading data. And finally, data can be loaded from underlying 
            data store on demand, whenever it is accessed - for this no explicit data loading step 
            is needed.
            <para/>
            <c>IDataStreamer</c> supports the following configuration properties:
            <list type="bullet">
                <item>
                    <term>PerNodeBufferSize</term>
                    <description>When entries are added to data streamer they are not sent to Ignite 
                    right away and are buffered internally for better performance and network utilization. 
                    This setting controls the size of internal per-node buffer before buffered data is sent to 
                    remote node. Default value is 1024.</description>
                </item>
                <item>
                    <term>PerNodeParallelOperations</term>
                    <description>Sometimes data may be added to the data streamer faster than it can be put 
                    in cache. In this case, new buffered load messages are sent to remote nodes before 
                    responses from previous ones are received. This could cause unlimited heap memory 
                    utilization growth on local and remote nodes. To control memory utilization, this 
                    setting limits maximum allowed number of parallel buffered load messages that are 
                    being processed on remote nodes. If this number is exceeded, then data streamer add/remove
                    methods will block to control memory utilization. Default value is 16.</description>
                </item>
                <item>
                    <term>AutoFlushFrequency</term>
                    <description>Automatic flush frequency in milliseconds. Essentially, this is the time 
                    after which the streamer will make an attempt to submit all data added so far to remote 
                    nodes. Note that there is no guarantee that data will be delivered after this concrete 
                    attempt (e.g., it can fail when topology is changing), but it won't be lost anyway. 
                    Disabled by default (default value is <c>0</c>).</description>
                </item>
                <item>
                    <term>Isolated</term>
                    <description>Defines if data streamer will assume that there are no other concurrent 
                    updates and allow data streamer choose most optimal concurrent implementation. Default value 
                    is <c>false</c>.</description>
                </item>
            </list>
            <para/>
            All members are thread-safe and may be used concurrently from multiple threads.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Datastream.IDataStreamer`2.AddData(`0,`1)">
            <summary>
            Adds single key-value pair for loading. Passing <c>null</c> as value will be 
            interpreted as removal.
            </summary>
            <param name="key">Key.</param>
            <param name="val">Value.</param>
            <returns>Task for this operation.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Datastream.IDataStreamer`2.AddData(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Adds single key-value pair for loading. Passing <c>null</c> as pair's value will 
            be interpreted as removal.
            </summary>
            <param name="pair">Key-value pair.</param>
            <returns>Task for this operation.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Datastream.IDataStreamer`2.AddData(System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
            Adds collection of key-value pairs for loading. 
            </summary>
            <param name="entries">Entries.</param>
            <returns>Task for this operation.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Datastream.IDataStreamer`2.RemoveData(`0)">
            <summary>
            Adds key for removal.
            </summary>
            <param name="key">Key.</param>
            <returns>Task for this operation.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Datastream.IDataStreamer`2.TryFlush">
            <summary>
            Makes an attempt to load remaining data. This method is mostly similar to 
            <see cref="M:Apache.Ignite.Core.Datastream.IDataStreamer`2.Flush"/> with the difference that it won't wait and 
            will exit immediately.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Datastream.IDataStreamer`2.Flush">
            <summary>
            Loads any remaining data, but doesn't close the streamer. Data can be still added after
            flush is finished. This method blocks and doesn't allow to add any data until all data
            is loaded.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Datastream.IDataStreamer`2.Close(System.Boolean)">
            <summary>
            Closes this streamer optionally loading any remaining data.
            </summary>
            <param name="cancel">Whether to cancel ongoing loading operations. When set to <c>true</c>
            there is not guarantees what data will be actually loaded to cache.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Datastream.IDataStreamer`2.WithKeepBinary``2">
            <summary>
            Gets streamer instance with binary mode enabled, changing key and/or value types if necessary.
            In binary mode stream receiver gets data in binary format.
            You can only change key/value types when transitioning from non-binary to binary streamer;
            Changing type of binary streamer is not allowed and will throw an <see cref="T:System.InvalidOperationException"/>
            </summary>
            <typeparam name="TK1">Key type in binary mode.</typeparam>
            <typeparam name="TV1">Value type in binary mode.</typeparam>
            <returns>Streamer instance with binary mode enabled.</returns>
        </member>
        <member name="P:Apache.Ignite.Core.Datastream.IDataStreamer`2.CacheName">
            <summary>
            Name of the cache to load data to.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Datastream.IDataStreamer`2.AllowOverwrite">
            <summary>
            Gets or sets a value indicating whether existing values can be overwritten by the data streamer.
            Performance is better when this flag is false.
            <para/>
            NOTE: When false, cache updates won't be propagated to cache store
            (even if <see cref="P:Apache.Ignite.Core.Datastream.IDataStreamer`2.SkipStore"/> is false).
            <para/>
            Default is <c>false</c>.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Datastream.IDataStreamer`2.SkipStore">
            <summary>
            Flag indicating that write-through behavior should be disabled for data loading.
            <para/>
            <see cref="P:Apache.Ignite.Core.Datastream.IDataStreamer`2.AllowOverwrite"/> must be true for write-through to work.
            <para/>
            Default is <c>false</c>.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Datastream.IDataStreamer`2.PerNodeBufferSize">
            <summary>
            Size of per node key-value pairs buffer.
            <para/>
            Setter must be called before any add/remove operation.
            <para/>
            Default is <see cref="F:Apache.Ignite.Core.Datastream.DataStreamerDefaults.DefaultPerNodeBufferSize"/>.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Datastream.IDataStreamer`2.PerNodeParallelOperations">
            <summary>
            Maximum number of parallel load operations for a single node.
            <para/>
            Setter must be called before any add/remove operation.
            <para/>
            Default is 0, which means Ignite calculates this automatically as 
            <see cref="P:Apache.Ignite.Core.IgniteConfiguration.DataStreamerThreadPoolSize"/> * 
            <see cref="F:Apache.Ignite.Core.Datastream.DataStreamerDefaults.DefaultParallelOperationsMultiplier"/>.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Datastream.IDataStreamer`2.AutoFlushFrequency">
            <summary>
            Automatic flush frequency in milliseconds. Essentially, this is the time after which the
            streamer will make an attempt to submit all data added so far to remote nodes.
            Note that there is no guarantee that data will be delivered after this concrete
            attempt (e.g., it can fail when topology is changing), but it won't be lost anyway.
            <para />
            If set to <c>0</c>, automatic flush is disabled.
            <para />
            Default is <c>0</c> (disabled).
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Datastream.IDataStreamer`2.Task">
            <summary>
            Gets the task for this loading process. This task completes whenever method
            <see cref="M:Apache.Ignite.Core.Datastream.IDataStreamer`2.Close(System.Boolean)"/> completes.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Datastream.IDataStreamer`2.Receiver">
            <summary>
            Gets or sets custom stream receiver.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Datastream.IDataStreamer`2.Timeout">
            <summary>
            Gets or sets the timeout. Negative values mean no timeout.
            Default is <see cref="F:Apache.Ignite.Core.Datastream.DataStreamerDefaults.DefaultTimeout"/>.
            <para/>
            Timeout is used in the following cases:
            <li>Any data addition method can be blocked when all per node parallel operations are exhausted.
            The timeout defines the max time you will be blocked waiting for a permit to add a chunk of data
            into the streamer;</li> 
            <li>Total timeout time for <see cref="M:Apache.Ignite.Core.Datastream.IDataStreamer`2.Flush"/> operation;</li>
            <li>Total timeout time for <see cref="M:Apache.Ignite.Core.Datastream.IDataStreamer`2.Close(System.Boolean)"/> operation.</li>
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Datastream.IStreamReceiver`2">
            <summary>
            Updates cache with batch of entries. 
            Usually it is enough to configure <see cref="P:Apache.Ignite.Core.Datastream.IDataStreamer`2.AllowOverwrite"/> property and appropriate 
            internal cache receiver will be chosen automatically. But in some cases custom implementation may help 
            to achieve better performance.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Datastream.IStreamReceiver`2.Receive(Apache.Ignite.Core.Cache.ICache{`0,`1},System.Collections.Generic.ICollection{Apache.Ignite.Core.Cache.ICacheEntry{`0,`1}})">
            <summary>
            Updates cache with batch of entries.
            </summary>
            <param name="cache">Cache.</param>
            <param name="entries">Entries.</param>
        </member>
        <member name="T:Apache.Ignite.Core.Datastream.StreamTransformer`4">
            <summary>
            Convenience adapter to transform update existing values in streaming cache 
            based on the previously cached value.
            </summary>
            <typeparam name="TK">Key type.</typeparam>
            <typeparam name="TV">Value type.</typeparam>
            <typeparam name="TArg">The type of the processor argument.</typeparam>
            <typeparam name="TRes">The type of the processor result.</typeparam>
        </member>
        <member name="F:Apache.Ignite.Core.Datastream.StreamTransformer`4._proc">
            Entry processor. 
        </member>
        <member name="M:Apache.Ignite.Core.Datastream.StreamTransformer`4.#ctor(Apache.Ignite.Core.Cache.ICacheEntryProcessor{`0,`1,`2,`3})">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Datastream.StreamTransformer`4"/> class.
            </summary>
            <param name="proc">Entry processor.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Datastream.StreamTransformer`4.Receive(Apache.Ignite.Core.Cache.ICache{`0,`1},System.Collections.Generic.ICollection{Apache.Ignite.Core.Cache.ICacheEntry{`0,`1}})">
            <summary>
            Updates cache with batch of entries.
            </summary>
            <param name="cache">Cache.</param>
            <param name="entries">Entries.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Datastream.StreamTransformer`4.Apache#Ignite#Core#Impl#Binary#IBinaryWriteAware#WriteBinary(Apache.Ignite.Core.Binary.IBinaryWriter)">
            <inheritdoc /> 
        </member>
        <member name="T:Apache.Ignite.Core.Datastream.StreamVisitor`2">
            <summary>
            Convenience adapter to visit every key-value tuple in the stream.
            Note that the visitor does not update the cache.
            </summary>
            <typeparam name="TK">The type of the cache key.</typeparam>
            <typeparam name="TV">The type of the cache value.</typeparam>
        </member>
        <member name="F:Apache.Ignite.Core.Datastream.StreamVisitor`2._action">
            Visitor action 
        </member>
        <member name="M:Apache.Ignite.Core.Datastream.StreamVisitor`2.#ctor(System.Action{Apache.Ignite.Core.Cache.ICache{`0,`1},Apache.Ignite.Core.Cache.ICacheEntry{`0,`1}})">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Datastream.StreamVisitor`2"/> class.
            </summary>
            <param name="action">The action to be called on each stream entry.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Datastream.StreamVisitor`2.Receive(Apache.Ignite.Core.Cache.ICache{`0,`1},System.Collections.Generic.ICollection{Apache.Ignite.Core.Cache.ICacheEntry{`0,`1}})">
            <summary>
            Updates cache with batch of entries.
            </summary>
            <param name="cache">Cache.</param>
            <param name="entries">Entries.</param>
        </member>
        <member name="T:Apache.Ignite.Core.DataStructures.IAtomicLong">
            <summary>
            Represents a distributed atomic long value.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.DataStructures.IAtomicLong.Read">
            <summary>
            Returns current value.
            </summary>
            <returns>Current value of the atomic long.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.DataStructures.IAtomicLong.Increment">
            <summary>
            Increments current value and returns result.
            </summary>
            <returns>Current value of the atomic long.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.DataStructures.IAtomicLong.Add(System.Int64)">
            <summary>
            Adds specified value to the current value and returns result.
            </summary>
            <param name="value">The value to add.</param>
            <returns>Current value of the atomic long.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.DataStructures.IAtomicLong.Decrement">
            <summary>
            Decrements current value and returns result.
            </summary>
            <returns>Current value of the atomic long.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.DataStructures.IAtomicLong.Exchange(System.Int64)">
            <summary>
            Sets current value to a specified value and returns the original value.
            </summary>
            <param name="value">The value to set.</param>
            <returns>Original value of the atomic long.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.DataStructures.IAtomicLong.CompareExchange(System.Int64,System.Int64)">
            <summary>
            Compares current value with specified value for equality and, if they are equal, replaces current value.
            </summary>
            <param name="value">The value to set.</param>
            <param name="comparand">The value that is compared to the current value.</param>
            <returns>Original value of the atomic long.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.DataStructures.IAtomicLong.IsClosed">
            <summary>
            Determines whether this instance was removed from cache.
            </summary>
            <returns>True if this atomic was removed from cache; otherwise, false.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.DataStructures.IAtomicLong.Close">
            <summary>
            Closes this instance.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.DataStructures.IAtomicLong.Name">
            <summary>
            Gets the name of this atomic long.
            </summary>
            <value>
            Name of this atomic long.
            </value>
        </member>
        <member name="T:Apache.Ignite.Core.DataStructures.IAtomicReference`1">
            <summary>
            Represents a named value in the distributed cache.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.DataStructures.IAtomicReference`1.Read">
            <summary>
            Reads current value of an atomic reference.
            </summary>
            <returns>Current value of an atomic reference.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.DataStructures.IAtomicReference`1.Write(`0)">
            <summary>
            Writes current value of an atomic reference.
            </summary>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Apache.Ignite.Core.DataStructures.IAtomicReference`1.CompareExchange(`0,`0)">
            <summary>
            Compares current value with specified value for equality and, if they are equal, replaces current value.
            </summary>
            <param name="value">The value to set.</param>
            <param name="comparand">The value that is compared to the current value.</param>
            <returns>Original value of the atomic reference.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.DataStructures.IAtomicReference`1.Close">
            <summary>
            Closes this instance.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.DataStructures.IAtomicReference`1.Name">
            <summary>
            Gets the name of this atomic reference.
            </summary>
            <value>
            Name of this atomic reference.
            </value>
        </member>
        <member name="P:Apache.Ignite.Core.DataStructures.IAtomicReference`1.IsClosed">
            <summary>
            Determines whether this instance was removed from cache.
            </summary>
            <returns>True if this atomic was removed from cache; otherwise, false.</returns>
        </member>
        <member name="T:Apache.Ignite.Core.DataStructures.IAtomicSequence">
            <summary>
            Represents a distributed atomic sequence of numbers.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.DataStructures.IAtomicSequence.Read">
            <summary>
            Returns current value.
            </summary>
            <returns>Current value of the atomic sequence.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.DataStructures.IAtomicSequence.Increment">
            <summary>
            Increments current value and returns result.
            </summary>
            <returns>The new value of the atomic sequence.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.DataStructures.IAtomicSequence.Add(System.Int64)">
            <summary>
            Adds specified value to the current value and returns result.
            </summary>
            <param name="value">The value to add.</param>
            <returns>The new value of the atomic sequence.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.DataStructures.IAtomicSequence.Close">
            <summary>
            Closes this instance.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.DataStructures.IAtomicSequence.Name">
            <summary>
            Gets the name of this atomic sequence.
            </summary>
            <value>
            Name of this atomic sequence.
            </value>
        </member>
        <member name="P:Apache.Ignite.Core.DataStructures.IAtomicSequence.BatchSize">
            <summary>
            Gets local batch size for this atomic sequence.
            </summary>
            <returns>Sequence batch size.</returns>
        </member>
        <member name="P:Apache.Ignite.Core.DataStructures.IAtomicSequence.IsClosed">
            <summary>
            Determines whether this instance was removed from cache.
            </summary>
            <returns>True if this atomic was removed from cache; otherwise, false.</returns>
        </member>
        <member name="T:Apache.Ignite.Core.Events.CacheEvent">
            <summary>
            In-memory database (cache) event.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Events.EventBase">
            <summary>
            Base event implementation.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Events.IEvent">
            <summary>
            Represents a Ignite event.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Events.IEvent.ToShortString">
            <summary>
            Gets shortened version of ToString result.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Events.IEvent.Id">
            <summary>
            Gets globally unique ID of this event.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Events.IEvent.LocalOrder">
            <summary>
            Gets locally unique ID that is atomically incremented for each event. Unlike global <see cref="P:Apache.Ignite.Core.Events.IEvent.Id"/>
            this local ID can be used for ordering events on this node. 
            <para/> 
            Note that for performance considerations Ignite doesn't order events globally.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Events.IEvent.Node">
            <summary>
            Node where event occurred and was recorded.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Events.IEvent.Message">
            <summary>
            Gets optional message for this event.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Events.IEvent.Type">
            <summary>
            Gets type of this event. All system event types are defined in <see cref="T:Apache.Ignite.Core.Events.EventType"/>
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Events.IEvent.Name">
            <summary>
            Gets name of this event.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Events.IEvent.Timestamp">
            <summary>
            Gets event timestamp. Timestamp is local to the node on which this event was produced. 
            Note that more than one event can be generated with the same timestamp. 
            For ordering purposes use <see cref="P:Apache.Ignite.Core.Events.IEvent.LocalOrder"/> instead.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Events.EventBase._id">
            
        </member>
        <member name="F:Apache.Ignite.Core.Events.EventBase._localOrder">
            
        </member>
        <member name="F:Apache.Ignite.Core.Events.EventBase._node">
            
        </member>
        <member name="F:Apache.Ignite.Core.Events.EventBase._message">
            
        </member>
        <member name="F:Apache.Ignite.Core.Events.EventBase._type">
            
        </member>
        <member name="F:Apache.Ignite.Core.Events.EventBase._name">
            
        </member>
        <member name="F:Apache.Ignite.Core.Events.EventBase._timestamp">
            
        </member>
        <member name="M:Apache.Ignite.Core.Events.EventBase.#ctor(Apache.Ignite.Core.Binary.IBinaryRawReader)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Events.EventBase"/> class.
            </summary>
            <param name="r">The reader to read data from.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Events.EventBase.ToShortString">
            <summary>
            Gets shortened version of ToString result.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Events.EventBase.Equals(Apache.Ignite.Core.Events.EventBase)">
            <summary>
            Determines whether the specified object is equal to this instance.
            </summary>
            <param name="other">The object to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified object is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Events.EventBase.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to this instance.
            </summary>
            <param name="obj">The object to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified object is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Events.EventBase.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Events.EventBase.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Events.EventBase.ReadNode(Apache.Ignite.Core.Binary.IBinaryRawReader)">
            <summary>
            Reads a node from stream.
            </summary>
            <param name="reader">Reader.</param>
            <returns>Node or null.</returns>
        </member>
        <member name="P:Apache.Ignite.Core.Events.EventBase.Id">
            <summary>
            Gets globally unique ID of this event.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Events.EventBase.LocalOrder">
            <summary>
            Gets locally unique ID that is atomically incremented for each event. Unlike global <see cref="P:Apache.Ignite.Core.Events.EventBase.Id"/>
            this local ID can be used for ordering events on this node.
            <para/>
            Note that for performance considerations Ignite doesn't order events globally.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Events.EventBase.Node">
            <summary>
            Node where event occurred and was recorded.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Events.EventBase.Message">
            <summary>
            Gets optional message for this event.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Events.EventBase.Type">
            <summary>
            Gets type of this event. All system event types are defined in <see cref="T:Apache.Ignite.Core.Events.EventType"/>
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Events.EventBase.Name">
            <summary>
            Gets name of this event.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Events.EventBase.Timestamp">
            <summary>
            Gets event timestamp. Timestamp is local to the node on which this event was produced.
            Note that more than one event can be generated with the same timestamp.
            For ordering purposes use <see cref="P:Apache.Ignite.Core.Events.EventBase.LocalOrder"/> instead.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Events.CacheEvent._cacheName">
            
        </member>
        <member name="F:Apache.Ignite.Core.Events.CacheEvent._partition">
            
        </member>
        <member name="F:Apache.Ignite.Core.Events.CacheEvent._isNear">
            
        </member>
        <member name="F:Apache.Ignite.Core.Events.CacheEvent._eventNode">
            
        </member>
        <member name="F:Apache.Ignite.Core.Events.CacheEvent._key">
            
        </member>
        <member name="F:Apache.Ignite.Core.Events.CacheEvent._xid">
            
        </member>
        <member name="F:Apache.Ignite.Core.Events.CacheEvent._newValue">
            
        </member>
        <member name="F:Apache.Ignite.Core.Events.CacheEvent._oldValue">
            
        </member>
        <member name="F:Apache.Ignite.Core.Events.CacheEvent._hasOldValue">
            
        </member>
        <member name="F:Apache.Ignite.Core.Events.CacheEvent._hasNewValue">
            
        </member>
        <member name="F:Apache.Ignite.Core.Events.CacheEvent._subjectId">
            
        </member>
        <member name="F:Apache.Ignite.Core.Events.CacheEvent._closureClassName">
            
        </member>
        <member name="F:Apache.Ignite.Core.Events.CacheEvent._taskName">
            
        </member>
        <member name="M:Apache.Ignite.Core.Events.CacheEvent.#ctor(Apache.Ignite.Core.Binary.IBinaryRawReader)">
            <summary>
            Constructor.
            </summary>
            <param name="r">The reader to read data from.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Events.CacheEvent.ToShortString">
            <summary>
            Gets shortened version of ToString result.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Events.CacheEvent.CacheName">
            <summary>
            Gets cache name. 
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Events.CacheEvent.Partition">
            <summary>
            Gets partition for the event which is the partition the key belongs to. 
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Events.CacheEvent.IsNear">
            <summary>
            Gets flag indicating whether event happened on near or partitioned cache. 
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Events.CacheEvent.EventNode">
            <summary>
            Gets node which initiated cache operation or null if that node is not available. 
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Events.CacheEvent.Key">
            <summary>
            Gets cache entry associated with event. 
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Events.CacheEvent.Xid">
            <summary>
            ID of surrounding cache cache transaction or null if there is no surrounding transaction. 
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Events.CacheEvent.NewValue">
            <summary>
            Gets new value for this event. 
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Events.CacheEvent.OldValue">
            <summary>
            Gets old value associated with this event. 
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Events.CacheEvent.HasOldValue">
            <summary>
            Gets flag indicating whether cache entry has old value in case if we only have old value in serialized form 
            in which case <see cref="P:Apache.Ignite.Core.Events.CacheEvent.OldValue"/> will return null. 
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Events.CacheEvent.HasNewValue">
            <summary>
            Gets flag indicating whether cache entry has new value in case if we only have new value in serialized form 
            in which case <see cref="P:Apache.Ignite.Core.Events.CacheEvent.NewValue"/> will return null. 
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Events.CacheEvent.SubjectId">
            <summary>
            Gets security subject ID initiated this cache event, if available. This property is available only for <see cref="F:Apache.Ignite.Core.Events.EventType.CacheObjectPut"/>, <see cref="F:Apache.Ignite.Core.Events.EventType.CacheObjectRemoved"/> and <see cref="F:Apache.Ignite.Core.Events.EventType.CacheObjectRead"/> cache events. Subject ID will be set either to nodeId initiated 
            cache update or read or client ID initiated cache update or read. 
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Events.CacheEvent.ClosureClassName">
            <summary>
            Gets closure class name (applicable only for TRANSFORM operations). 
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Events.CacheEvent.TaskName">
            <summary>
            Gets task name if cache event was caused by an operation initiated within task execution. 
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Events.CacheQueryExecutedEvent">
            <summary>
            Cache query execution event.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Events.CacheQueryExecutedEvent._queryType">
            
        </member>
        <member name="F:Apache.Ignite.Core.Events.CacheQueryExecutedEvent._cacheName">
            
        </member>
        <member name="F:Apache.Ignite.Core.Events.CacheQueryExecutedEvent._className">
            
        </member>
        <member name="F:Apache.Ignite.Core.Events.CacheQueryExecutedEvent._clause">
            
        </member>
        <member name="F:Apache.Ignite.Core.Events.CacheQueryExecutedEvent._subjectId">
            
        </member>
        <member name="F:Apache.Ignite.Core.Events.CacheQueryExecutedEvent._taskName">
            
        </member>
        <member name="M:Apache.Ignite.Core.Events.CacheQueryExecutedEvent.#ctor(Apache.Ignite.Core.Binary.IBinaryRawReader)">
            <summary>
            Constructor.
            </summary>
            <param name="r">The reader to read data from.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Events.CacheQueryExecutedEvent.ToShortString">
            <summary>
            Gets shortened version of ToString result.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Events.CacheQueryExecutedEvent.QueryType">
            <summary>
            Gets query type. 
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Events.CacheQueryExecutedEvent.CacheName">
            <summary>
            Gets cache name on which query was executed. 
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Events.CacheQueryExecutedEvent.ClassName">
            <summary>
            Gets queried class name. Applicable for SQL and full text queries. 
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Events.CacheQueryExecutedEvent.Clause">
            <summary>
            Gets query clause. Applicable for SQL, SQL fields and full text queries. 
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Events.CacheQueryExecutedEvent.SubjectId">
            <summary>
            Gets security subject ID. 
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Events.CacheQueryExecutedEvent.TaskName">
            <summary>
            Gets the name of the task that executed the query (if any). 
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Events.CacheQueryReadEvent">
            <summary>
            Cache query read event.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Events.CacheQueryReadEvent._queryType">
            
        </member>
        <member name="F:Apache.Ignite.Core.Events.CacheQueryReadEvent._cacheName">
            
        </member>
        <member name="F:Apache.Ignite.Core.Events.CacheQueryReadEvent._className">
            
        </member>
        <member name="F:Apache.Ignite.Core.Events.CacheQueryReadEvent._clause">
            
        </member>
        <member name="F:Apache.Ignite.Core.Events.CacheQueryReadEvent._subjectId">
            
        </member>
        <member name="F:Apache.Ignite.Core.Events.CacheQueryReadEvent._taskName">
            
        </member>
        <member name="F:Apache.Ignite.Core.Events.CacheQueryReadEvent._key">
            
        </member>
        <member name="F:Apache.Ignite.Core.Events.CacheQueryReadEvent._value">
            
        </member>
        <member name="F:Apache.Ignite.Core.Events.CacheQueryReadEvent._oldValue">
            
        </member>
        <member name="F:Apache.Ignite.Core.Events.CacheQueryReadEvent._row">
            
        </member>
        <member name="M:Apache.Ignite.Core.Events.CacheQueryReadEvent.#ctor(Apache.Ignite.Core.Binary.IBinaryRawReader)">
            <summary>
            Constructor.
            </summary>
            <param name="r">The reader to read data from.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Events.CacheQueryReadEvent.ToShortString">
            <summary>
            Gets shortened version of ToString result.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Events.CacheQueryReadEvent.QueryType">
            <summary>
            Gets query type. 
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Events.CacheQueryReadEvent.CacheName">
            <summary>
            Gets cache name on which query was executed. 
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Events.CacheQueryReadEvent.ClassName">
            <summary>
            Gets queried class name. Applicable for SQL and full text queries. 
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Events.CacheQueryReadEvent.Clause">
            <summary>
            Gets query clause. Applicable for SQL, SQL fields and full text queries. 
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Events.CacheQueryReadEvent.SubjectId">
            <summary>
            Gets security subject ID. 
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Events.CacheQueryReadEvent.TaskName">
            <summary>
            Gets the name of the task that executed the query (if any). 
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Events.CacheQueryReadEvent.Key">
            <summary>
            Gets read entry key. 
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Events.CacheQueryReadEvent.Value">
            <summary>
            Gets read entry value. 
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Events.CacheQueryReadEvent.OldValue">
            <summary>
            Gets read entry old value (applicable for continuous queries). 
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Events.CacheQueryReadEvent.Row">
            <summary>
            Gets read results set row. 
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Events.CacheRebalancingEvent">
            <summary>
            In-memory database (cache) rebalancing event. Rebalance event happens every time there is a change
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Events.CacheRebalancingEvent._cacheName">
            
        </member>
        <member name="F:Apache.Ignite.Core.Events.CacheRebalancingEvent._partition">
            
        </member>
        <member name="F:Apache.Ignite.Core.Events.CacheRebalancingEvent._discoveryNode">
            
        </member>
        <member name="F:Apache.Ignite.Core.Events.CacheRebalancingEvent._discoveryEventType">
            
        </member>
        <member name="F:Apache.Ignite.Core.Events.CacheRebalancingEvent._discoveryEventName">
            
        </member>
        <member name="F:Apache.Ignite.Core.Events.CacheRebalancingEvent._discoveryTimestamp">
            
        </member>
        <member name="M:Apache.Ignite.Core.Events.CacheRebalancingEvent.#ctor(Apache.Ignite.Core.Binary.IBinaryRawReader)">
            <summary>
            Constructor.
            </summary>
            <param name="r">The reader to read data from.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Events.CacheRebalancingEvent.ToShortString">
            <summary>
            Gets shortened version of ToString result.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Events.CacheRebalancingEvent.CacheName">
            <summary>
            Gets cache name. 
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Events.CacheRebalancingEvent.Partition">
            <summary>
            Gets partition for the event. 
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Events.CacheRebalancingEvent.DiscoveryNode">
            <summary>
            Gets shadow of the node that triggered this rebalancing event. 
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Events.CacheRebalancingEvent.DiscoveryEventType">
            <summary>
            Gets type of discovery event that triggered this rebalancing event. 
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Events.CacheRebalancingEvent.DiscoveryEventName">
            <summary>
            Gets name of discovery event that triggered this rebalancing event. 
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Events.CacheRebalancingEvent.DiscoveryTimestamp">
            <summary>
            Gets timestamp of discovery event that caused this rebalancing event. 
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Events.CheckpointEvent">
            <summary>
            Grid checkpoint event.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Events.CheckpointEvent._key">
            
        </member>
        <member name="M:Apache.Ignite.Core.Events.CheckpointEvent.#ctor(Apache.Ignite.Core.Binary.IBinaryRawReader)">
            <summary>
            Constructor.
            </summary>
            <param name="r">The reader to read data from.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Events.CheckpointEvent.ToShortString">
            <summary>
            Gets shortened version of ToString result.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Events.CheckpointEvent.Key">
            <summary>
            Gets checkpoint key associated with this event. 
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Events.DiscoveryEvent">
            <summary>
            Grid discovery event.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Events.DiscoveryEvent._eventNode">
            
        </member>
        <member name="F:Apache.Ignite.Core.Events.DiscoveryEvent._topologyVersion">
            
        </member>
        <member name="F:Apache.Ignite.Core.Events.DiscoveryEvent._topologyNodes">
            
        </member>
        <member name="M:Apache.Ignite.Core.Events.DiscoveryEvent.#ctor(Apache.Ignite.Core.Impl.Binary.BinaryReader)">
            <summary>
            Constructor.
            </summary>
            <param name="r">The reader to read data from.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Events.DiscoveryEvent.ToShortString">
            <summary>
            Gets shortened version of ToString result.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Events.DiscoveryEvent.EventNode">
            <summary>
            Gets node that caused this event to be generated. It is potentially different from the node on which this 
            event was recorded. For example, node A locally recorded the event that a remote node B joined the topology. 
            In this case this method will return ID of B. 
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Events.DiscoveryEvent.TopologyVersion">
            <summary>
            Gets topology version if this event is raised on topology change and configured discovery
            SPI implementation supports topology versioning.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Events.DiscoveryEvent.TopologyNodes">
            <summary>
            Gets topology nodes from topology snapshot. If SPI implementation does not support versioning, the best 
            effort snapshot will be captured. 
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Events.EventReader">
            <summary>
            Event reader.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Events.EventReader.Read``1(Apache.Ignite.Core.Impl.Binary.BinaryReader)">
            <summary>
            Reads an event.
            </summary>
            <typeparam name="T">Type of the event</typeparam>
            <param name="reader">Reader.</param>
            <returns>Deserialized event.</returns>
            <exception cref="T:System.InvalidCastException">Incompatible event type.</exception>
        </member>
        <member name="M:Apache.Ignite.Core.Events.EventReader.CreateInstance(System.Int32,Apache.Ignite.Core.Impl.Binary.BinaryReader)">
            <summary>
            Creates an event instance by type id.
            </summary>
            <param name="clsId">Type id.</param>
            <param name="reader">Reader.</param>
            <returns>Created and deserialized instance.</returns>
            <exception cref="T:System.InvalidOperationException">Invalid event class id:  + clsId</exception>
        </member>
        <member name="T:Apache.Ignite.Core.Events.EventType">
            <summary>
            Contains event type constants. The decision to use class and not enumeration is dictated 
            by allowing users to create their own events and/or event types which would be impossible with enumerations.
            <para/>
            Note that this interface defines not only individual type constants, 
            but arrays of types as well to be conveniently used with <see cref="T:Apache.Ignite.Core.Events.IEvents"/> methods.
            <para/>
            NOTE: all types in range <b>from 1 to 1000 are reserved</b> for internal Ignite events 
            and should not be used by user-defined events.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Events.EventType.CheckpointSaved">
            <summary>
            Built-in event type: checkpoint was saved.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Events.EventType.CheckpointLoaded">
            <summary>
            Built-in event type: checkpoint was loaded.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Events.EventType.CheckpointRemoved">
            <summary>
            Built-in event type: checkpoint was removed. Reasons are: timeout expired, or or it was manually removed, 
            or it was automatically removed by the task session.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Events.EventType.NodeJoined">
            <summary>
            Built-in event type: node joined topology. New node has been discovered and joined grid topology. Note that 
            even though a node has been discovered there could be a number of warnings in the log. In certain 
            situations Ignite doesn't prevent a node from joining but prints warning messages into the log.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Events.EventType.NodeLeft">
            <summary>
            Built-in event type: node has normally left topology.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Events.EventType.NodeFailed">
            <summary>
            Built-in event type: node failed. Ignite detected that node has presumably crashed and is considered 
            failed.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Events.EventType.NodeMetricsUpdated">
            <summary>
            Built-in event type: node metrics updated. Generated when node's metrics are updated. In most cases this 
            callback is invoked with every heartbeat received from a node (including local node).
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Events.EventType.NodeSegmented">
            <summary>
            Built-in event type: local node segmented. Generated when node determines that it runs in invalid network 
            segment.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Events.EventType.ClientNodeDisconnected">
            <summary>
            Built-in event type: client node disconnected.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Events.EventType.ClientNodeReconnected">
            <summary>
            Built-in event type: client node reconnected.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Events.EventType.TaskStarted">
            <summary>
            Built-in event type: task started.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Events.EventType.TaskFinished">
            <summary>
            Built-in event type: task finished. Task got finished. This event is triggered every time a task finished 
            without exception.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Events.EventType.TaskFailed">
            <summary>
            Built-in event type: task failed. Task failed. This event is triggered every time a task finished with an 
            exception. Note that prior to this event, there could be other events recorded specific to the failure.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Events.EventType.TaskTimedout">
            <summary>
            Built-in event type: task timed out.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Events.EventType.TaskSessionAttrSet">
            <summary>
            Built-in event type: task session attribute set.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Events.EventType.TaskReduced">
            <summary>
            Built-in event type: task reduced.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Events.EventType.JobMapped">
            <summary>
            Built-in event type: Ignite job was mapped in {@link org.apache.ignite.compute.ComputeTask#map(List, Object)} 
            method.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Events.EventType.JobResulted">
            <summary>
            Built-in event type: Ignite job result was received by {@link 
            org.apache.ignite.compute.ComputeTask#result(org.apache.ignite.compute.ComputeJobResult, List)} method.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Events.EventType.JobFailedOver">
            <summary>
            Built-in event type: Ignite job failed over.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Events.EventType.JobStarted">
            <summary>
            Built-in event type: Ignite job started.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Events.EventType.JobFinished">
            <summary>
            Built-in event type: Ignite job finished. Job has successfully completed and produced a result which from the 
            user perspective can still be either negative or positive.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Events.EventType.JobTimedout">
            <summary>
            Built-in event type: Ignite job timed out.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Events.EventType.JobRejected">
            <summary>
            Built-in event type: Ignite job rejected during collision resolution.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Events.EventType.JobFailed">
            <summary>
            Built-in event type: Ignite job failed. Job has failed. This means that there was some error event during job 
            execution and job did not produce a result.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Events.EventType.JobQueued">
            <summary>
            Built-in event type: Ignite job queued. Job arrived for execution and has been queued (added to passive queue 
            during collision resolution).
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Events.EventType.JobCancelled">
            <summary>
            Built-in event type: Ignite job cancelled.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Events.EventType.CacheEntryCreated">
            <summary>
            Built-in event type: entry created.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Events.EventType.CacheEntryDestroyed">
            <summary>
            Built-in event type: entry destroyed.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Events.EventType.CacheEntryEvicted">
            <summary>
            Built-in event type: entry evicted.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Events.EventType.CacheObjectPut">
            <summary>
            Built-in event type: object put.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Events.EventType.CacheObjectRead">
            <summary>
            Built-in event type: object read.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Events.EventType.CacheObjectRemoved">
            <summary>
            Built-in event type: object removed.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Events.EventType.CacheObjectLocked">
            <summary>
            Built-in event type: object locked.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Events.EventType.CacheObjectUnlocked">
            <summary>
            Built-in event type: object unlocked.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Events.EventType.CacheObjectExpired">
            <summary>
            Built-in event type: cache object was expired when reading it.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Events.EventType.CacheObjectToOffheap">
            <summary>
            Built-in event type: cache object stored in off-heap storage.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Events.EventType.CacheObjectFromOffheap">
            <summary>
            Built-in event type: cache object moved from off-heap storage back into memory.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Events.EventType.CacheRebalanceStarted">
            <summary>
            Built-in event type: cache rebalance started.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Events.EventType.CacheRebalanceStopped">
            <summary>
            Built-in event type: cache rebalance stopped.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Events.EventType.CacheRebalancePartLoaded">
            <summary>
            Built-in event type: cache partition loaded.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Events.EventType.CacheRebalancePartUnloaded">
            <summary>
            Built-in event type: cache partition unloaded.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Events.EventType.CacheRebalanceObjectLoaded">
            <summary>
            Built-in event type: cache entry rebalanced.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Events.EventType.CacheRebalanceObjectUnloaded">
            <summary>
            Built-in event type: cache entry unloaded.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Events.EventType.CacheRebalancePartDataLost">
            <summary>
            Built-in event type: all nodes that hold partition left topology.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Events.EventType.CacheQueryExecuted">
            <summary>
            Built-in event type: query executed.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Events.EventType.CacheQueryObjectRead">
            <summary>
            Built-in event type: query entry read.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Events.EventType.CacheStarted">
            <summary>
            Built-in event type: cache started.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Events.EventType.CacheStopped">
            <summary>
            Built-in event type: cache started.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Events.EventType.CacheNodesLeft">
            <summary>
            Built-in event type: cache nodes left.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Events.EventType.ErrorAll0">
            <summary>
            All events indicating an error or failure condition. It is convenient to use when fetching all events 
            indicating error or failure.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Events.EventType.DiscoveryAllMinusMetrics0">
            <summary>
            All discovery events except for <see cref="F:Apache.Ignite.Core.Events.EventType.NodeMetricsUpdated"/>. Subscription to <see cref="F:Apache.Ignite.Core.Events.EventType.NodeMetricsUpdated"/> can generate massive amount of event processing in most cases is not 
            necessary. If this event is indeed required you can subscribe to it individually or use <see cref="F:Apache.Ignite.Core.Events.EventType.DiscoveryAll0"/> array.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Events.EventType.DiscoveryAll0">
            <summary>
            All discovery events.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Events.EventType.JobExecutionAll0">
            <summary>
            All Ignite job execution events.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Events.EventType.TaskExecutionAll0">
            <summary>
            All Ignite task execution events.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Events.EventType.CacheAll0">
            <summary>
            All cache events.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Events.EventType.CacheRebalanceAll0">
            <summary>
            All cache rebalance events.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Events.EventType.CacheLifecycleAll0">
            <summary>
            All cache lifecycle events.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Events.EventType.CacheQueryAll0">
            <summary>
            All cache query events.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Events.EventType.All0">
            <summary>
            All Ignite events.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Events.EventType.AllMinusMetricUpdate0">
            <summary>
            All Ignite events (<b>excluding</b> metric update event).
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Events.EventType.GetAllEvents">
            <summary>
            Gets all the events.
            </summary>
            <returns>All event ids.</returns>
        </member>
        <member name="P:Apache.Ignite.Core.Events.EventType.ErrorAll">
            <summary>
            All events indicating an error or failure condition. It is convenient to use when fetching all events 
            indicating error or failure.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Events.EventType.AllMinusMetricUpdate">
            <summary>
            All Ignite events (<b>excluding</b> metric update event).
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Events.EventType.CacheQueryAll">
            <summary>
            All cache query events.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Events.EventType.CacheLifecycleAll">
            <summary>
            All cache lifecycle events.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Events.EventType.CacheRebalanceAll">
            <summary>
            All cache rebalance events.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Events.EventType.CacheAll">
            <summary>
            All cache events.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Events.EventType.TaskExecutionAll">
            <summary>
            All Ignite task execution events.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Events.EventType.JobExecutionAll">
            <summary>
            All Ignite job execution events.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Events.EventType.DiscoveryAll">
            <summary>
            All discovery events.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Events.EventType.DiscoveryAllMinusMetrics">
            <summary>
            All discovery events except for <see cref="F:Apache.Ignite.Core.Events.EventType.NodeMetricsUpdated"/>. Subscription to <see cref="F:Apache.Ignite.Core.Events.EventType.NodeMetricsUpdated"/> can generate massive amount of event processing in most cases is not 
            necessary. If this event is indeed required you can subscribe to it individually or use <see cref="F:Apache.Ignite.Core.Events.EventType.DiscoveryAll0"/> array.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Events.EventType.All">
            <summary>
            All Ignite events.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Events.IEventFilter`1">
            <summary>
            Represents an event filter.
            </summary>
            <typeparam name="T">Event type.</typeparam>
        </member>
        <member name="M:Apache.Ignite.Core.Events.IEventFilter`1.Invoke(`0)">
            <summary>
            Determines whether specified event passes this filter.
            </summary>
            <param name="evt">Event.</param>
            <returns>Value indicating whether specified event passes this filter.</returns>
        </member>
        <member name="T:Apache.Ignite.Core.Events.IEventListener`1">
            <summary>
            Represents an event listener.
            </summary>
            <typeparam name="T">Event type.</typeparam>
        </member>
        <member name="M:Apache.Ignite.Core.Events.IEventListener`1.Invoke(`0)">
            <summary>
            Invoked when event occurs.
            </summary>
            <param name="evt">Event.</param>
            <returns>Value indicating whether this listener should be kept subscribed. 
            Returning false unsubscribes this listener from future notifications.</returns>
        </member>
        <member name="T:Apache.Ignite.Core.Events.IEvents">
            <summary>
            Provides functionality for event notifications on nodes defined by <see cref="P:Apache.Ignite.Core.Events.IEvents.ClusterGroup"/>.
            <para/>
            All members are thread-safe and may be used concurrently from multiple threads.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Events.IEvents.RemoteQuery``1(Apache.Ignite.Core.Events.IEventFilter{``0},System.Nullable{System.TimeSpan},System.Int32[])">
            <summary>
            Queries nodes in this cluster group for events using passed in predicate filter for event selection.
            </summary>
            <typeparam name="T">Type of events.</typeparam>
            <param name="filter">Predicate filter used to query events on remote nodes.</param>
            <param name="timeout">Maximum time to wait for result, null or 0 to wait forever.</param>
            <param name="types">Event types to be queried.</param>
            <returns>Collection of Ignite events returned from specified nodes.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Events.IEvents.RemoteQueryAsync``1(Apache.Ignite.Core.Events.IEventFilter{``0},System.Nullable{System.TimeSpan},System.Int32[])">
            <summary>
            Queries nodes in this cluster group for events using passed in predicate filter for event selection.
            </summary>
            <typeparam name="T">Type of events.</typeparam>
            <param name="filter">Predicate filter used to query events on remote nodes.</param>
            <param name="timeout">Maximum time to wait for result, null or 0 to wait forever.</param>
            <param name="types">Event types to be queried.</param>
            <returns>Collection of Ignite events returned from specified nodes.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Events.IEvents.RemoteQuery``1(Apache.Ignite.Core.Events.IEventFilter{``0},System.Nullable{System.TimeSpan},System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Queries nodes in this cluster group for events using passed in predicate filter for event selection.
            </summary>
            <typeparam name="T">Type of events.</typeparam>
            <param name="filter">Predicate filter used to query events on remote nodes.</param>
            <param name="timeout">Maximum time to wait for result, null or 0 to wait forever.</param>
            <param name="types">Event types to be queried.</param>
            <returns>Collection of Ignite events returned from specified nodes.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Events.IEvents.RemoteQueryAsync``1(Apache.Ignite.Core.Events.IEventFilter{``0},System.Nullable{System.TimeSpan},System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Queries nodes in this cluster group for events using passed in predicate filter for event selection.
            </summary>
            <typeparam name="T">Type of events.</typeparam>
            <param name="filter">Predicate filter used to query events on remote nodes.</param>
            <param name="timeout">Maximum time to wait for result, null or 0 to wait forever.</param>
            <param name="types">Event types to be queried.</param>
            <returns>Collection of Ignite events returned from specified nodes.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Events.IEvents.WaitForLocal(System.Int32[])">
            <summary>
            Waits for the specified events.
            </summary>
            <param name="types">Types of the events to wait for. 
            If not provided, all events will be passed to the filter.</param>
            <returns>Ignite event.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Events.IEvents.WaitForLocalAsync(System.Int32[])">
            <summary>
            Waits for the specified events.
            </summary>
            <param name="types">Types of the events to wait for. 
            If not provided, all events will be passed to the filter.</param>
            <returns>Ignite event.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Events.IEvents.WaitForLocal(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Waits for the specified events.
            </summary>
            <param name="types">Types of the events to wait for. 
            If not provided, all events will be passed to the filter.</param>
            <returns>Ignite event.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Events.IEvents.WaitForLocalAsync(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Waits for the specified events.
            </summary>
            <param name="types">Types of the events to wait for. 
            If not provided, all events will be passed to the filter.</param>
            <returns>Ignite event.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Events.IEvents.WaitForLocal``1(Apache.Ignite.Core.Events.IEventFilter{``0},System.Int32[])">
            <summary>
            Waits for the specified events.
            </summary>
            <typeparam name="T">Type of events.</typeparam>
            <param name="filter">Optional filtering predicate. Event wait will end as soon as it returns false.</param>
            <param name="types">Types of the events to wait for. 
            If not provided, all events will be passed to the filter.</param>
            <returns>Ignite event.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Events.IEvents.WaitForLocalAsync``1(Apache.Ignite.Core.Events.IEventFilter{``0},System.Int32[])">
            <summary>
            Waits for the specified events.
            </summary>
            <typeparam name="T">Type of events.</typeparam>
            <param name="filter">Optional filtering predicate. Event wait will end as soon as it returns false.</param>
            <param name="types">Types of the events to wait for. 
            If not provided, all events will be passed to the filter.</param>
            <returns>Ignite event.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Events.IEvents.WaitForLocal``1(Apache.Ignite.Core.Events.IEventFilter{``0},System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Waits for the specified events.
            </summary>
            <typeparam name="T">Type of events.</typeparam>
            <param name="filter">Optional filtering predicate. Event wait will end as soon as it returns false.</param>
            <param name="types">Types of the events to wait for. 
            If not provided, all events will be passed to the filter.</param>
            <returns>Ignite event.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Events.IEvents.WaitForLocalAsync``1(Apache.Ignite.Core.Events.IEventFilter{``0},System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Waits for the specified events.
            </summary>
            <typeparam name="T">Type of events.</typeparam>
            <param name="filter">Optional filtering predicate. Event wait will end as soon as it returns false.</param>
            <param name="types">Types of the events to wait for. 
            If not provided, all events will be passed to the filter.</param>
            <returns>Ignite event.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Events.IEvents.LocalQuery(System.Int32[])">
            <summary>
            Queries local node for events using of specified types.
            </summary>
            <param name="types">Event types to be queried. Optional.</param>
            <returns>Collection of Ignite events found on local node.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Events.IEvents.LocalQuery(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Queries local node for events using of specified types.
            </summary>
            <param name="types">Event types to be queried. Optional.</param>
            <returns>Collection of Ignite events found on local node.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Events.IEvents.RecordLocal(Apache.Ignite.Core.Events.IEvent)">
            <summary>
            Records customer user generated event. All registered local listeners will be notified.
            <para/>
            NOTE: all types in range <b>from 1 to 1000 are reserved</b> for
            internal Ignite events and should not be used by user-defined events.
            Attempt to record internal event with this method will cause <see cref="T:System.ArgumentException"/> to be thrown.
            </summary>
            <param name="evt">Locally generated event.</param>
            <exception cref="T:System.ArgumentException">If event type is within Ignite reserved range (1 to 1000)</exception>
        </member>
        <member name="M:Apache.Ignite.Core.Events.IEvents.LocalListen``1(Apache.Ignite.Core.Events.IEventListener{``0},System.Int32[])">
            <summary>
            Adds an event listener for local events. Note that listener will be added regardless of whether 
            local node is in this cluster group or not.
            </summary>
            <typeparam name="T">Type of events.</typeparam>
            <param name="listener">Predicate that is called on each received event. If predicate returns false,
            it will be unregistered and will stop receiving events.</param>
            <param name="types">Event types for which this listener will be notified, should not be empty.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Events.IEvents.LocalListen``1(Apache.Ignite.Core.Events.IEventListener{``0},System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Adds an event listener for local events. Note that listener will be added regardless of whether 
            local node is in this cluster group or not.
            </summary>
            <typeparam name="T">Type of events.</typeparam>
            <param name="listener">Predicate that is called on each received event. If predicate returns false,
            it will be unregistered and will stop receiving events.</param>
            <param name="types">Event types for which this listener will be notified, should not be empty.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Events.IEvents.StopLocalListen``1(Apache.Ignite.Core.Events.IEventListener{``0},System.Int32[])">
            <summary>
            Removes local event listener.
            </summary>
            <typeparam name="T">Type of events.</typeparam>
            <param name="listener">Local event listener to remove.</param>
            <param name="types">Types of events for which to remove listener. If not specified, then listener
            will be removed for all types it was registered for.</param>
            <returns>True if listener was removed, false otherwise.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Events.IEvents.StopLocalListen``1(Apache.Ignite.Core.Events.IEventListener{``0},System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Removes local event listener.
            </summary>
            <typeparam name="T">Type of events.</typeparam>
            <param name="listener">Local event listener to remove.</param>
            <param name="types">Types of events for which to remove listener. If not specified, then listener
            will be removed for all types it was registered for.</param>
            <returns>True if listener was removed, false otherwise.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Events.IEvents.EnableLocal(System.Int32[])">
            <summary>
            Enables provided events. Allows to start recording events that were disabled before. 
            Note that provided events will be enabled regardless of whether local node is in this cluster group or not.
            </summary>
            <param name="types">Events to enable.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Events.IEvents.EnableLocal(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Enables provided events. Allows to start recording events that were disabled before. 
            Note that provided events will be enabled regardless of whether local node is in this cluster group or not.
            </summary>
            <param name="types">Events to enable.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Events.IEvents.DisableLocal(System.Int32[])">
            <summary>
            Disables provided events. Allows to stop recording events that were enabled before. Note that specified 
            events will be disabled regardless of whether local node is in this cluster group or not.
            </summary>
            <param name="types">Events to disable.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Events.IEvents.DisableLocal(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Disables provided events. Allows to stop recording events that were enabled before. Note that specified 
            events will be disabled regardless of whether local node is in this cluster group or not.
            </summary>
            <param name="types">Events to disable.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Events.IEvents.GetEnabledEvents">
            <summary>
            Gets types of enabled events.
            </summary>
            <returns>Types of enabled events.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Events.IEvents.IsEnabled(System.Int32)">
            <summary>
            Determines whether the specified event is enabled.
            </summary>
            <param name="type">Event type.</param>
            <returns>Value indicating whether the specified event is enabled.</returns>
        </member>
        <member name="P:Apache.Ignite.Core.Events.IEvents.ClusterGroup">
            <summary>
            Gets the cluster group to which this instance belongs.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Events.JobEvent">
            <summary>
            Ignite job event.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Events.JobEvent._taskName">
            
        </member>
        <member name="F:Apache.Ignite.Core.Events.JobEvent._taskClassName">
            
        </member>
        <member name="F:Apache.Ignite.Core.Events.JobEvent._taskSessionId">
            
        </member>
        <member name="F:Apache.Ignite.Core.Events.JobEvent._jobId">
            
        </member>
        <member name="F:Apache.Ignite.Core.Events.JobEvent._taskNode">
            
        </member>
        <member name="F:Apache.Ignite.Core.Events.JobEvent._taskSubjectId">
            
        </member>
        <member name="M:Apache.Ignite.Core.Events.JobEvent.#ctor(Apache.Ignite.Core.Binary.IBinaryRawReader)">
            <summary>
            Constructor.
            </summary>
            <param name="r">The reader to read data from.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Events.JobEvent.ToShortString">
            <summary>
            Gets shortened version of ToString result.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Events.JobEvent.TaskName">
            <summary>
            Gets name of the task that triggered the event. 
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Events.JobEvent.TaskClassName">
            <summary>
            Gets name of task class that triggered this event. 
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Events.JobEvent.TaskSessionId">
            <summary>
            Gets task session ID of the task that triggered this event. 
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Events.JobEvent.JobId">
            <summary>
            Gets job ID. 
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Events.JobEvent.TaskNode">
            <summary>
            Get node where parent task of the job has originated. 
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Events.JobEvent.TaskSubjectId">
            <summary>
            Gets task subject ID. 
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Events.TaskEvent">
            <summary>
            Ignite task event.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Events.TaskEvent._taskName">
            
        </member>
        <member name="F:Apache.Ignite.Core.Events.TaskEvent._taskClassName">
            
        </member>
        <member name="F:Apache.Ignite.Core.Events.TaskEvent._taskSessionId">
            
        </member>
        <member name="F:Apache.Ignite.Core.Events.TaskEvent._internal">
            
        </member>
        <member name="F:Apache.Ignite.Core.Events.TaskEvent._subjectId">
            
        </member>
        <member name="M:Apache.Ignite.Core.Events.TaskEvent.#ctor(Apache.Ignite.Core.Binary.IBinaryRawReader)">
            <summary>
            Constructor.
            </summary>
            <param name="r">The reader to read data from.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Events.TaskEvent.ToShortString">
            <summary>
            Gets shortened version of ToString result.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Events.TaskEvent.TaskName">
            <summary>
            Gets name of the task that triggered the event. 
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Events.TaskEvent.TaskClassName">
            <summary>
            Gets name of task class that triggered this event. 
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Events.TaskEvent.TaskSessionId">
            <summary>
            Gets session ID of the task that triggered the event. 
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Events.TaskEvent.Internal">
            <summary>
            Returns true if task is created by Ignite and is used for system needs. 
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Events.TaskEvent.SubjectId">
            <summary>
            Gets security subject ID initiated this task event, if available. This property is not available for 
            <see cref="F:Apache.Ignite.Core.Events.EventType.TaskSessionAttrSet"/> task event. 
            Subject ID will be set either to node ID or client ID initiated task execution. 
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.IgniteConfiguration">
            <summary>
            Grid configuration.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.IgniteConfiguration.DefaultJvmInitMem">
            <summary>
            Default initial JVM memory in megabytes.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.IgniteConfiguration.DefaultJvmMaxMem">
            <summary>
            Default maximum JVM memory in megabytes.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.IgniteConfiguration.DefaultMetricsHistorySize">
            <summary>
            Default metrics history size.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.IgniteConfiguration.DefaultManagementThreadPoolSize">
            <summary>
            Default management thread pool size.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.IgniteConfiguration.DefaultClientConnectorConfigurationEnabled">
            <summary>
            Default value for <see cref="P:Apache.Ignite.Core.IgniteConfiguration.ClientConnectorConfigurationEnabled"/>.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.IgniteConfiguration.DefaultNetworkSendRetryCount">
            <summary>
            Default network retry count.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.IgniteConfiguration.DefaultIsLateAffinityAssignment">
            <summary>
            Default late affinity assignment mode.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.IgniteConfiguration.DefaultIsActiveOnStart">
            <summary>
            Default value for <see cref="P:Apache.Ignite.Core.IgniteConfiguration.IsActiveOnStart"/> property.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.IgniteConfiguration.DefaultMetricsExpireTime">
            <summary>
            Default metrics expire time.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.IgniteConfiguration.DefaultMetricsLogFrequency">
            <summary>
            Default metrics log frequency.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.IgniteConfiguration.DefaultMetricsUpdateFrequency">
            <summary>
            Default metrics update frequency.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.IgniteConfiguration.DefaultNetworkTimeout">
            <summary>
            Default network timeout.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.IgniteConfiguration.DefaultNetworkSendRetryDelay">
            <summary>
            Default network retry delay.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.IgniteConfiguration.DefaultFailureDetectionTimeout">
            <summary>
            Default failure detection timeout.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.IgniteConfiguration.DefaultClientFailureDetectionTimeout">
            <summary>
            Default failure detection timeout.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.IgniteConfiguration.DefaultThreadPoolSize">
            <summary>
            Default thread pool size.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.IgniteConfiguration.DefaultLongQueryWarningTimeout">
            <summary>
            Default timeout after which long query warning will be printed.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.IgniteConfiguration._metricsExpireTime">
            
        </member>
        <member name="F:Apache.Ignite.Core.IgniteConfiguration._metricsHistorySize">
            
        </member>
        <member name="F:Apache.Ignite.Core.IgniteConfiguration._metricsLogFrequency">
            
        </member>
        <member name="F:Apache.Ignite.Core.IgniteConfiguration._metricsUpdateFrequency">
            
        </member>
        <member name="F:Apache.Ignite.Core.IgniteConfiguration._networkSendRetryCount">
            
        </member>
        <member name="F:Apache.Ignite.Core.IgniteConfiguration._networkSendRetryDelay">
            
        </member>
        <member name="F:Apache.Ignite.Core.IgniteConfiguration._networkTimeout">
            
        </member>
        <member name="F:Apache.Ignite.Core.IgniteConfiguration._isDaemon">
            
        </member>
        <member name="F:Apache.Ignite.Core.IgniteConfiguration._clientMode">
            
        </member>
        <member name="F:Apache.Ignite.Core.IgniteConfiguration._failureDetectionTimeout">
            
        </member>
        <member name="F:Apache.Ignite.Core.IgniteConfiguration._clientFailureDetectionTimeout">
            
        </member>
        <member name="F:Apache.Ignite.Core.IgniteConfiguration._publicThreadPoolSize">
            
        </member>
        <member name="F:Apache.Ignite.Core.IgniteConfiguration._stripedThreadPoolSize">
            
        </member>
        <member name="F:Apache.Ignite.Core.IgniteConfiguration._serviceThreadPoolSize">
            
        </member>
        <member name="F:Apache.Ignite.Core.IgniteConfiguration._systemThreadPoolSize">
            
        </member>
        <member name="F:Apache.Ignite.Core.IgniteConfiguration._asyncCallbackThreadPoolSize">
            
        </member>
        <member name="F:Apache.Ignite.Core.IgniteConfiguration._managementThreadPoolSize">
            
        </member>
        <member name="F:Apache.Ignite.Core.IgniteConfiguration._dataStreamerThreadPoolSize">
            
        </member>
        <member name="F:Apache.Ignite.Core.IgniteConfiguration._utilityCacheThreadPoolSize">
            
        </member>
        <member name="F:Apache.Ignite.Core.IgniteConfiguration._queryThreadPoolSize">
            
        </member>
        <member name="F:Apache.Ignite.Core.IgniteConfiguration._longQueryWarningTimeout">
            
        </member>
        <member name="F:Apache.Ignite.Core.IgniteConfiguration._isActiveOnStart">
            
        </member>
        <member name="F:Apache.Ignite.Core.IgniteConfiguration._localEventListenersInternal">
            Local event listeners. Stored as array to ensure index access. 
        </member>
        <member name="F:Apache.Ignite.Core.IgniteConfiguration._localEventListenerIds">
            Map from user-defined listener to it's id. 
        </member>
        <member name="M:Apache.Ignite.Core.IgniteConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.IgniteConfiguration"/> class.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.IgniteConfiguration.#ctor(Apache.Ignite.Core.IgniteConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.IgniteConfiguration"/> class.
            </summary>
            <param name="configuration">The configuration to copy.</param>
        </member>
        <member name="M:Apache.Ignite.Core.IgniteConfiguration.#ctor(Apache.Ignite.Core.Impl.Binary.BinaryReader,Apache.Ignite.Core.IgniteConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.IgniteConfiguration"/> class from a reader.
            </summary>
            <param name="binaryReader">The binary reader.</param>
            <param name="baseConfig">The base configuration.</param>
        </member>
        <member name="M:Apache.Ignite.Core.IgniteConfiguration.Write(Apache.Ignite.Core.Impl.Binary.BinaryWriter)">
            <summary>
            Writes this instance to a writer.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Apache.Ignite.Core.IgniteConfiguration.ValidateLocalEventListener(Apache.Ignite.Core.Events.LocalEventListener)">
            <summary>
            Validates the local event listener.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.IgniteConfiguration.Validate(Apache.Ignite.Core.Log.ILogger)">
            <summary>
            Validates this instance and outputs information to the log, if necessary.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.IgniteConfiguration.ReadCore(Apache.Ignite.Core.Impl.Binary.BinaryReader)">
            <summary>
            Reads data from specified reader into current instance.
            </summary>
            <param name="r">The binary reader.</param>
        </member>
        <member name="M:Apache.Ignite.Core.IgniteConfiguration.Read(Apache.Ignite.Core.Impl.Binary.BinaryReader)">
            <summary>
            Reads data from specified reader into current instance.
            </summary>
            <param name="binaryReader">The binary reader.</param>
        </member>
        <member name="M:Apache.Ignite.Core.IgniteConfiguration.CopyLocalProperties(Apache.Ignite.Core.IgniteConfiguration)">
            <summary>
            Copies the local properties (properties that are not written in Write method).
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.IgniteConfiguration.InitLocalEventListeners">
            <summary>
            Initializes the local event listeners collections.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.IgniteConfiguration.ToXml(System.Xml.XmlWriter,System.String)">
            <summary>
            Serializes this instance to the specified XML writer.
            </summary>
            <param name="writer">The writer.</param>
            <param name="rootElementName">Name of the root element.</param>
        </member>
        <member name="M:Apache.Ignite.Core.IgniteConfiguration.ToXml">
            <summary>
            Serializes this instance to an XML string.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.IgniteConfiguration.FromXml(System.Xml.XmlReader)">
            <summary>
            Deserializes IgniteConfiguration from the XML reader.
            </summary>
            <param name="reader">The reader.</param>
            <returns>Deserialized instance.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.IgniteConfiguration.FromXml(System.String)">
            <summary>
            Deserializes IgniteConfiguration from the XML string.
            </summary>
            <param name="xml">Xml string.</param>
            <returns>Deserialized instance.</returns>
        </member>
        <member name="P:Apache.Ignite.Core.IgniteConfiguration.IgniteInstanceName">
            <summary>
            Gets or sets optional local instance name.
            <para />
            This name only works locally and has no effect on topology.
            <para />
            This property is used to when there are multiple Ignite nodes in one process to distinguish them.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.IgniteConfiguration.AutoGenerateIgniteInstanceName">
            <summary>
            Gets or sets a value indicating whether unique <see cref="P:Apache.Ignite.Core.IgniteConfiguration.IgniteInstanceName"/> should be generated.
            <para/>
            Set this to true in scenarios where new node should be started regardless of other nodes present within
            current process. In particular, this setting is useful is ASP.NET and IIS environments, where AppDomains
            are loaded and unloaded within a single process during application restarts. Ignite stops all nodes
            on <see cref="T:System.AppDomain"/> unload, however, IIS does not wait for previous AppDomain to unload before
            starting up a new one, which may cause "Ignite instance with this name has already been started" errors.
            This setting solves the issue.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.IgniteConfiguration.GridName">
            <summary>
            Gets or sets optional local instance name.
            <para />
            This name only works locally and has no effect on topology.
            <para />
            This property is used to when there are multiple Ignite nodes in one process to distinguish them.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.IgniteConfiguration.BinaryConfiguration">
            <summary>
            Gets or sets the binary configuration.
            </summary>
            <value>
            The binary configuration.
            </value>
        </member>
        <member name="P:Apache.Ignite.Core.IgniteConfiguration.CacheConfiguration">
            <summary>
            Gets or sets the cache configuration.
            </summary>
            <value>
            The cache configuration.
            </value>
        </member>
        <member name="P:Apache.Ignite.Core.IgniteConfiguration.SpringConfigUrl">
            <summary>
            URL to Spring configuration file.
            <para/>
            Spring configuration is loaded first, then <see cref="T:Apache.Ignite.Core.IgniteConfiguration"/> properties are applied.
            Null property values do not override Spring values.
            Value-typed properties are tracked internally: if setter was not called, Spring value won't be overwritten.
            <para/>
            This merging happens on the top level only; e. g. if there are cache configurations defined in Spring 
            and in .NET, .NET caches will overwrite Spring caches.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.IgniteConfiguration.JvmDllPath">
            <summary>
            Path jvm.dll file. If not set, it's location will be determined
            using JAVA_HOME environment variable.
            If path is neither set nor determined automatically, an exception
            will be thrown.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.IgniteConfiguration.IgniteHome">
            <summary>
            Path to Ignite home. If not set environment variable IGNITE_HOME will be used.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.IgniteConfiguration.JvmClasspath">
            <summary>
            Classpath used by JVM on Ignite start.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.IgniteConfiguration.JvmOptions">
            <summary>
            Collection of options passed to JVM on Ignite start.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.IgniteConfiguration.Assemblies">
            <summary>
            List of additional .Net assemblies to load on Ignite start. Each item can be either
            fully qualified assembly name, path to assembly to DLL or path to a directory when 
            assemblies reside.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.IgniteConfiguration.SuppressWarnings">
            <summary>
            Whether to suppress warnings.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.IgniteConfiguration.LifecycleHandlers">
            <summary>
            Lifecycle handlers.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.IgniteConfiguration.JvmInitialMemoryMb">
            <summary>
            Initial amount of memory in megabytes given to JVM. Maps to -Xms Java option.
            <code>-1</code> maps to JVM defaults.
            Defaults to <see cref="F:Apache.Ignite.Core.IgniteConfiguration.DefaultJvmInitMem"/>.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.IgniteConfiguration.JvmMaxMemoryMb">
            <summary>
            Maximum amount of memory in megabytes given to JVM. Maps to -Xmx Java option.
            <code>-1</code> maps to JVM defaults.
            Defaults to <see cref="F:Apache.Ignite.Core.IgniteConfiguration.DefaultJvmMaxMem"/>.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.IgniteConfiguration.DiscoverySpi">
            <summary>
            Gets or sets the discovery service provider.
            Null for default discovery.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.IgniteConfiguration.CommunicationSpi">
            <summary>
            Gets or sets the communication service provider.
            Null for default communication.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.IgniteConfiguration.ClientMode">
            <summary>
            Gets or sets a value indicating whether node should start in client mode.
            Client node cannot hold data in the caches.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.IgniteConfiguration.IncludedEventTypes">
            <summary>
            Gets or sets a set of event types (<see cref="T:Apache.Ignite.Core.Events.EventType"/>) to be recorded by Ignite. 
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.IgniteConfiguration.LocalEventListeners">
            <summary>
            Gets or sets pre-configured local event listeners.
            <para/>
            This is similar to calling <see cref="M:Apache.Ignite.Core.Events.IEvents.LocalListen``1(Apache.Ignite.Core.Events.IEventListener{``0},System.Int32[])"/>,
            but important difference is that some events occur during startup and can be only received this way.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.IgniteConfiguration.LocalEventListenersInternal">
            <summary>
            Gets the local event listeners.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.IgniteConfiguration.LocalEventListenerIds">
            <summary>
            Gets the local event listener ids.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.IgniteConfiguration.MetricsExpireTime">
            <summary>
            Gets or sets the time after which a certain metric value is considered expired.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.IgniteConfiguration.MetricsHistorySize">
            <summary>
            Gets or sets the number of metrics kept in history to compute totals and averages.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.IgniteConfiguration.MetricsLogFrequency">
            <summary>
            Gets or sets the frequency of metrics log print out.
            <see cref="F:System.TimeSpan.Zero"/> to disable metrics print out.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.IgniteConfiguration.MetricsUpdateFrequency">
            <summary>
            Gets or sets the job metrics update frequency.
            <see cref="F:System.TimeSpan.Zero"/> to update metrics on job start/finish.
            Negative value to never update metrics.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.IgniteConfiguration.NetworkSendRetryCount">
            <summary>
            Gets or sets the network send retry count.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.IgniteConfiguration.NetworkSendRetryDelay">
            <summary>
            Gets or sets the network send retry delay.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.IgniteConfiguration.NetworkTimeout">
            <summary>
            Gets or sets the network timeout.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.IgniteConfiguration.WorkDirectory">
            <summary>
            Gets or sets the work directory.
            If not provided, a folder under <see cref="P:Apache.Ignite.Core.IgniteConfiguration.IgniteHome"/> will be used.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.IgniteConfiguration.Localhost">
            <summary>
            Gets or sets system-wide local address or host for all Ignite components to bind to. 
            If provided it will override all default local bind settings within Ignite.
            <para />
            If <c>null</c> then Ignite tries to use local wildcard address.That means that all services 
            will be available on all network interfaces of the host machine. 
            <para />
            It is strongly recommended to set this parameter for all production environments.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.IgniteConfiguration.IsDaemon">
            <summary>
            Gets or sets a value indicating whether this node should be a daemon node.
            <para />
            Daemon nodes are the usual grid nodes that participate in topology but not visible on the main APIs, 
            i.e. they are not part of any cluster groups.
            <para />
            Daemon nodes are used primarily for management and monitoring functionality that is built on Ignite 
            and needs to participate in the topology, but also needs to be excluded from the "normal" topology, 
            so that it won't participate in the task execution or in-memory data grid storage.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.IgniteConfiguration.UserAttributes">
            <summary>
            Gets or sets the user attributes for this node.
            <para/>
            These attributes can be retrieved later via <see cref="M:Apache.Ignite.Core.Cluster.IClusterNode.GetAttributes"/>.
            Environment variables are added to node attributes automatically.
            NOTE: attribute names starting with "org.apache.ignite" are reserved for internal use.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.IgniteConfiguration.AtomicConfiguration">
            <summary>
            Gets or sets the atomic data structures configuration.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.IgniteConfiguration.TransactionConfiguration">
            <summary>
            Gets or sets the transaction configuration.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.IgniteConfiguration.IsLateAffinityAssignment">
            <summary>
            Gets or sets a value indicating whether late affinity assignment mode should be used.
            <para/>
            On each topology change, for each started cache, partition-to-node mapping is
            calculated using AffinityFunction for cache. When late
            affinity assignment mode is disabled then new affinity mapping is applied immediately.
            <para/>
            With late affinity assignment mode, if primary node was changed for some partition, but data for this
            partition is not rebalanced yet on this node, then current primary is not changed and new primary 
            is temporary assigned as backup. This nodes becomes primary only when rebalancing for all assigned primary 
            partitions is finished. This mode can show better performance for cache operations, since when cache 
            primary node executes some operation and data is not rebalanced yet, then it sends additional message 
            to force rebalancing from other nodes.
            <para/>
            Note, that <see cref="T:Apache.Ignite.Core.Cache.ICacheAffinity"/> interface provides assignment information taking late assignment
            into account, so while rebalancing for new primary nodes is not finished it can return assignment 
            which differs from assignment calculated by AffinityFunction.
            <para/>
            This property should have the same value for all nodes in cluster.
            <para/>
            If not provided, default value is <see cref="F:Apache.Ignite.Core.IgniteConfiguration.DefaultIsLateAffinityAssignment"/>.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.IgniteConfiguration.Logger">
            <summary>
            Gets or sets the logger.
            <para />
            If no logger is set, logging is delegated to Java, which uses the logger defined in Spring XML (if present)
            or logs to console otherwise.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.IgniteConfiguration.FailureDetectionTimeout">
            <summary>
            Gets or sets the failure detection timeout used by <see cref="T:Apache.Ignite.Core.Discovery.Tcp.TcpDiscoverySpi"/> 
            and <see cref="T:Apache.Ignite.Core.Communication.Tcp.TcpCommunicationSpi"/>.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.IgniteConfiguration.ClientFailureDetectionTimeout">
            <summary>
            Gets or sets the failure detection timeout used by <see cref="T:Apache.Ignite.Core.Discovery.Tcp.TcpDiscoverySpi"/>
            and <see cref="T:Apache.Ignite.Core.Communication.Tcp.TcpCommunicationSpi"/> for client nodes.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.IgniteConfiguration.PluginConfigurations">
            <summary>
            Gets or sets the configurations for plugins to be started.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.IgniteConfiguration.EventStorageSpi">
            <summary>
            Gets or sets the event storage interface.
            <para/>
            Only predefined implementations are supported:
            <see cref="T:Apache.Ignite.Core.Events.NoopEventStorageSpi"/>, <see cref="T:Apache.Ignite.Core.Events.MemoryEventStorageSpi"/>.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.IgniteConfiguration.MemoryConfiguration">
            <summary>
            Gets or sets the page memory configuration.
            <see cref="P:Apache.Ignite.Core.IgniteConfiguration.MemoryConfiguration"/> for more details.
            <para/>
            Obsolete, use <see cref="P:Apache.Ignite.Core.IgniteConfiguration.DataStorageConfiguration"/>.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.IgniteConfiguration.DataStorageConfiguration">
            <summary>
            Gets or sets the data storage configuration.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.IgniteConfiguration.PeerAssemblyLoadingMode">
            <summary>
            Gets or sets a value indicating how user assemblies should be loaded on remote nodes.
            <para/>
            For example, when executing <see cref="M:Apache.Ignite.Core.Compute.ICompute.Call``1(Apache.Ignite.Core.Compute.IComputeFunc{``0})"/>,
            the assembly with corresponding <see cref="T:Apache.Ignite.Core.Compute.IComputeFunc`1"/> should be loaded on remote nodes.
            With this option enabled, Ignite will attempt to send the assembly to remote nodes
            and load it there automatically.
            <para/>
            Default is <see cref="F:Apache.Ignite.Core.Deployment.PeerAssemblyLoadingMode.Disabled"/>.
            <para/>
            Peer loading is enabled for <see cref="T:Apache.Ignite.Core.Compute.ICompute"/> functionality.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.IgniteConfiguration.PublicThreadPoolSize">
            <summary>
            Gets or sets the size of the public thread pool, which processes compute jobs and user messages.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.IgniteConfiguration.StripedThreadPoolSize">
            <summary>
            Gets or sets the size of the striped thread pool, which processes cache requests.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.IgniteConfiguration.ServiceThreadPoolSize">
            <summary>
            Gets or sets the size of the service thread pool, which processes Ignite services.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.IgniteConfiguration.SystemThreadPoolSize">
            <summary>
            Gets or sets the size of the system thread pool, which processes internal system messages.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.IgniteConfiguration.AsyncCallbackThreadPoolSize">
            <summary>
            Gets or sets the size of the asynchronous callback thread pool.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.IgniteConfiguration.ManagementThreadPoolSize">
            <summary>
            Gets or sets the size of the management thread pool, which processes internal Ignite jobs.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.IgniteConfiguration.DataStreamerThreadPoolSize">
            <summary>
            Gets or sets the size of the data streamer thread pool.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.IgniteConfiguration.UtilityCacheThreadPoolSize">
            <summary>
            Gets or sets the size of the utility cache thread pool.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.IgniteConfiguration.QueryThreadPoolSize">
            <summary>
            Gets or sets the size of the query thread pool.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.IgniteConfiguration.SqlConnectorConfiguration">
            <summary>
            Gets or sets the SQL connector configuration (for JDBC and ODBC).
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.IgniteConfiguration.ClientConnectorConfiguration">
            <summary>
            Gets or sets the client connector configuration (for JDBC, ODBC, and thin clients).
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.IgniteConfiguration.ClientConnectorConfigurationEnabled">
            <summary>
            Gets or sets a value indicating whether client connector is enabled:
            allow thin clients, ODBC and JDBC drivers to work with Ignite
            (see <see cref="P:Apache.Ignite.Core.IgniteConfiguration.ClientConnectorConfiguration"/>).
            Default is <see cref="F:Apache.Ignite.Core.IgniteConfiguration.DefaultClientConnectorConfigurationEnabled"/>.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.IgniteConfiguration.LongQueryWarningTimeout">
            <summary>
            Gets or sets the timeout after which long query warning will be printed.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.IgniteConfiguration.PersistentStoreConfiguration">
            <summary>
            Gets or sets the persistent store configuration.
            <para/>
            Obsolete, use <see cref="P:Apache.Ignite.Core.IgniteConfiguration.DataStorageConfiguration"/>.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.IgniteConfiguration.IsActiveOnStart">
            <summary>
            Gets or sets a value indicating whether grid should be active on start.
            See also <see cref="M:Apache.Ignite.Core.IIgnite.IsActive"/> and <see cref="M:Apache.Ignite.Core.IIgnite.SetActive(System.Boolean)"/>.
            <para/>
            This property is ignored when <see cref="P:Apache.Ignite.Core.IgniteConfiguration.DataStorageConfiguration"/> is present:
            cluster is always inactive on start when Ignite Persistence is enabled.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.IgniteConfiguration.ConsistentId">
            <summary>
            Gets or sets consistent globally unique node identifier which survives node restarts.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.IgniteConfigurationSection">
            <summary>
            Ignite configuration section for app.config and web.config files.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.IgniteConfigurationSection.DeserializeSection(System.Xml.XmlReader)">
            <summary>
            Reads XML from the configuration file.
            </summary>
            <param name="reader">The reader object, which reads from the configuration file.</param>
        </member>
        <member name="M:Apache.Ignite.Core.IgniteConfigurationSection.SerializeSection(System.Configuration.ConfigurationElement,System.String,System.Configuration.ConfigurationSaveMode)">
            <summary>
            Creates an XML string containing an unmerged view of the <see cref="T:System.Configuration.ConfigurationSection"/> 
            object as a single section to write to a file.
            </summary>
            <param name="parentElement">The <see cref="T:System.Configuration.ConfigurationElement"/> 
            instance to use as the parent when performing the un-merge.</param>
            <param name="name">The name of the section to create.</param>
            <param name="saveMode">The <see cref="T:System.Configuration.ConfigurationSaveMode"/> instance 
            to use when writing to a string.</param>
            <returns>
            An XML string containing an unmerged view of the <see cref="T:System.Configuration.ConfigurationSection"/> object.
            </returns>
        </member>
        <member name="P:Apache.Ignite.Core.IgniteConfigurationSection.IgniteConfiguration">
            <summary>
            Gets or sets the ignite configuration.
            </summary>
            <value>
            The ignite configuration.
            </value>
        </member>
        <member name="T:Apache.Ignite.Core.Ignition">
            <summary>
            This class defines a factory for the main Ignite API.
            <p/>
            Use <see cref="M:Apache.Ignite.Core.Ignition.Start"/> method to start Ignite with default configuration.
            <para/>
            All members are thread-safe and may be used concurrently from multiple threads.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Ignition.ConfigurationSectionName">
            <summary>
            Default configuration section name.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Ignition.SyncRoot">
            
        </member>
        <member name="F:Apache.Ignite.Core.Ignition._gcWarn">
            GC warning flag. 
        </member>
        <member name="F:Apache.Ignite.Core.Ignition.Nodes">
            
        </member>
        <member name="F:Apache.Ignite.Core.Ignition.IgniteDllName">
            Current DLL name. 
        </member>
        <member name="F:Apache.Ignite.Core.Ignition._startup">
            Startup info. 
        </member>
        <member name="F:Apache.Ignite.Core.Ignition._clientMode">
            Client mode flag. 
        </member>
        <member name="M:Apache.Ignite.Core.Ignition.#cctor">
            <summary>
            Static initializer.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Ignition.Start">
            <summary>
            Starts Ignite with default configuration. By default this method will
            use Ignite configuration defined in <c>{IGNITE_HOME}/config/default-config.xml</c>
            configuration file. If such file is not found, then all system defaults will be used.
            </summary>
            <returns>Started Ignite.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Ignition.Start(System.String)">
            <summary>
            Starts all grids specified within given Spring XML configuration file. If Ignite with given name
            is already started, then exception is thrown. In this case all instances that may
            have been started so far will be stopped too.
            </summary>
            <param name="springCfgPath">Spring XML configuration file path or URL. Note, that the path can be
            absolute or relative to IGNITE_HOME.</param>
            <returns>Started Ignite. If Spring configuration contains multiple Ignite instances, then the 1st
            found instance is returned.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Ignition.StartFromApplicationConfiguration">
            <summary>
            Reads <see cref="T:Apache.Ignite.Core.IgniteConfiguration"/> from application configuration
            <see cref="T:Apache.Ignite.Core.IgniteConfigurationSection"/> with <see cref="F:Apache.Ignite.Core.Ignition.ConfigurationSectionName"/>
            name and starts Ignite.
            </summary>
            <returns>Started Ignite.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Ignition.StartFromApplicationConfiguration(System.String)">
            <summary>
            Reads <see cref="T:Apache.Ignite.Core.IgniteConfiguration"/> from application configuration 
            <see cref="T:Apache.Ignite.Core.IgniteConfigurationSection"/> with specified name and starts Ignite.
            </summary>
            <param name="sectionName">Name of the section.</param>
            <returns>Started Ignite.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Ignition.StartFromApplicationConfiguration(System.String,System.String)">
            <summary>
            Reads <see cref="T:Apache.Ignite.Core.IgniteConfiguration"/> from application configuration
            <see cref="T:Apache.Ignite.Core.IgniteConfigurationSection"/> with specified name and starts Ignite.
            </summary>
            <param name="sectionName">Name of the section.</param>
            <param name="configPath">Path to the configuration file.</param>
            <returns>Started Ignite.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Ignition.GetConfigMap(System.String)">
            <summary>
            Gets the configuration file map.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Ignition.Start(Apache.Ignite.Core.IgniteConfiguration)">
            <summary>
            Starts Ignite with given configuration.
            </summary>
            <returns>Started Ignite.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Ignition.CheckServerGc(Apache.Ignite.Core.IgniteConfiguration,Apache.Ignite.Core.Log.ILogger)">
            <summary>
            Check whether GC is set to server mode.
            </summary>
            <param name="cfg">Configuration.</param>
            <param name="log">Log.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Ignition.OnPrepare(Apache.Ignite.Core.Impl.Memory.PlatformMemoryStream,Apache.Ignite.Core.Impl.Memory.PlatformMemoryStream,Apache.Ignite.Core.Impl.Handle.HandleRegistry,Apache.Ignite.Core.Log.ILogger)">
            <summary>
            Prepare callback invoked from Java.
            </summary>
            <param name="inStream">Input stream with data.</param>
            <param name="outStream">Output stream.</param>
            <param name="handleRegistry">Handle registry.</param>
            <param name="log">Log.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Ignition.PrepareConfiguration(Apache.Ignite.Core.Impl.Binary.BinaryReader,Apache.Ignite.Core.Impl.Memory.PlatformMemoryStream,Apache.Ignite.Core.Log.ILogger)">
            <summary>
            Prepare configuration.
            </summary>
            <param name="reader">Reader.</param>
            <param name="outStream">Response stream.</param>
            <param name="log">Log.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Ignition.PrepareLifecycleHandlers(Apache.Ignite.Core.Binary.IBinaryRawReader,Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream,Apache.Ignite.Core.Impl.Handle.HandleRegistry)">
            <summary>
            Prepare lifecycle handlers.
            </summary>
            <param name="reader">Reader.</param>
            <param name="outStream">Output stream.</param>
            <param name="handleRegistry">Handle registry.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Ignition.PrepareAffinityFunctions(Apache.Ignite.Core.Impl.Binary.BinaryReader,Apache.Ignite.Core.Impl.Memory.PlatformMemoryStream)">
            <summary>
            Prepares the affinity functions.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Ignition.CreateObject``1(Apache.Ignite.Core.Binary.IBinaryRawReader)">
            <summary>
            Creates an object and sets the properties.
            </summary>
            <param name="reader">Reader.</param>
            <returns>Resulting object.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Ignition.OnStart(Apache.Ignite.Core.Impl.Unmanaged.IUnmanagedTarget,Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream)">
            <summary>
            Kernal start callback.
            </summary>
            <param name="interopProc">Interop processor.</param>
            <param name="stream">Stream.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Ignition.LoadAssemblies(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Load assemblies.
            </summary>
            <param name="assemblies">Assemblies.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Ignition.SelfAssembly(System.String)">
            <summary>
            Whether assembly points to Ignite binary.
            </summary>
            <param name="assembly">Assembly to check..</param>
            <returns><c>True</c> if this is one of GG assemblies.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Ignition.GetIgnite(System.String)">
            <summary>
            Gets a named Ignite instance. If Ignite name is <c>null</c> or empty string,
            then default no-name Ignite will be returned. Note that caller of this method
            should not assume that it will return the same instance every time.
            <p/>
            Note that single process can run multiple Ignite instances and every Ignite instance (and its
            node) can belong to a different grid. Ignite name defines what grid a particular Ignite
            instance (and correspondingly its node) belongs to.
            </summary>
            <param name="name">Ignite name to which requested Ignite instance belongs. If <c>null</c>,
            then Ignite instance belonging to a default no-name Ignite will be returned.</param>
            <returns>
            An instance of named grid.
            </returns>
            <exception cref="T:Apache.Ignite.Core.Common.IgniteException">When there is no Ignite instance with specified name.</exception>
        </member>
        <member name="M:Apache.Ignite.Core.Ignition.GetIgnite">
            <summary>
            Gets the default Ignite instance with null name, or an instance with any name when there is only one.
            <para/>
            Note that caller of this method should not assume that it will return the same instance every time.
            </summary>
            <returns>Default Ignite instance.</returns>
            <exception cref="T:Apache.Ignite.Core.Common.IgniteException">When there is no matching Ignite instance.</exception>
        </member>
        <member name="M:Apache.Ignite.Core.Ignition.GetAll">
            <summary>
            Gets all started Ignite instances.
            </summary>
            <returns>All Ignite instances.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Ignition.TryGetIgnite(System.String)">
            <summary>
            Gets a named Ignite instance, or <c>null</c> if none found. If Ignite name is <c>null</c> or empty string,
            then default no-name Ignite will be returned. Note that caller of this method
            should not assume that it will return the same instance every time.
            <p/>
            Note that single process can run multiple Ignite instances and every Ignite instance (and its
            node) can belong to a different grid. Ignite name defines what grid a particular Ignite
            instance (and correspondingly its node) belongs to.
            </summary>
            <param name="name">Ignite name to which requested Ignite instance belongs. If <c>null</c>,
            then Ignite instance belonging to a default no-name Ignite will be returned.
            </param>
            <returns>An instance of named grid, or null.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Ignition.TryGetIgnite">
            <summary>
            Gets the default Ignite instance with null name, or an instance with any name when there is only one.
            Returns null when there are no Ignite instances started, or when there are more than one,
            and none of them has null name.
            </summary>
            <returns>An instance of default no-name grid, or null.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Ignition.Stop(System.String,System.Boolean)">
            <summary>
            Stops named grid. If <c>cancel</c> flag is set to <c>true</c> then
            all jobs currently executing on local node will be interrupted. If
            grid name is <c>null</c>, then default no-name Ignite will be stopped.
            </summary>
            <param name="name">Grid name. If <c>null</c>, then default no-name Ignite will be stopped.</param>
            <param name="cancel">If <c>true</c> then all jobs currently executing will be cancelled
            by calling <c>ComputeJob.cancel</c>method.</param>
            <returns><c>true</c> if named Ignite instance was indeed found and stopped, <c>false</c>
            othwerwise (the instance with given <c>name</c> was not found).</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Ignition.StopAll(System.Boolean)">
            <summary>
            Stops <b>all</b> started grids. If <c>cancel</c> flag is set to <c>true</c> then
            all jobs currently executing on local node will be interrupted.
            </summary>
            <param name="cancel">If <c>true</c> then all jobs currently executing will be cancelled
            by calling <c>ComputeJob.Cancel()</c> method.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Ignition.StartClient(Apache.Ignite.Core.Client.IgniteClientConfiguration)">
            <summary>
            Connects Ignite lightweight (thin) client to an Ignite node.
            <para />
            Thin client connects to an existing Ignite node with a socket and does not start JVM in process.
            </summary>
            <param name="clientConfiguration">The client configuration.</param>
            <returns>Ignite instance.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Ignition.CurrentDomain_DomainUnload(System.Object,System.EventArgs)">
            <summary>
            Handles the DomainUnload event of the CurrentDomain control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Apache.Ignite.Core.Ignition.ClientMode">
            <summary>
            Gets or sets a value indicating whether Ignite should be started in client mode.
            Client nodes cannot hold data in caches.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Ignition.NodeKey">
            <summary>
            Grid key. Workaround for non-null key requirement in Dictionary.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Ignition.NodeKey._name">
            
        </member>
        <member name="M:Apache.Ignite.Core.Ignition.NodeKey.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Ignition.NodeKey"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Ignition.NodeKey.Equals(System.Object)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Ignition.NodeKey.GetHashCode">
            <inheritdoc /> 
        </member>
        <member name="T:Apache.Ignite.Core.Ignition.Startup">
            <summary>
            Value object to pass data between .Net methods during startup bypassing Java.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Ignition.Startup.#ctor(Apache.Ignite.Core.IgniteConfiguration,Apache.Ignite.Core.Impl.Unmanaged.UnmanagedCallbacks)">
            <summary>
            Constructor.
            </summary>
            <param name="cfg">Configuration.</param>
            <param name="cbs"></param>
        </member>
        <member name="P:Apache.Ignite.Core.Ignition.Startup.Configuration">
            <summary>
            Configuration.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Ignition.Startup.Callbacks">
            <summary>
            Gets unmanaged callbacks.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Ignition.Startup.LifecycleHandlers">
            <summary>
            Lifecycle handlers.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Ignition.Startup.Name">
            <summary>
            Node name.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Ignition.Startup.Marshaller">
            <summary>
            Marshaller.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Ignition.Startup.Error">
            <summary>
            Start error.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Ignition.Startup.Ignite">
            <summary>
            Gets or sets the ignite.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Ignition.InternalLifecycleHandler">
            <summary>
            Internal handler for event notification.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Lifecycle.ILifecycleHandler">
            <summary>
            Handles lifecycle events defined in <see cref="T:Apache.Ignite.Core.Lifecycle.LifecycleEventType"/>.
            Use this interface whenever you need to plug some custom logic before or after
            Ignite startup and stopping routines.
            <para/>
            There are four events you can react to:
            <list type="bullet">
                <item>
                    <term>BeforeNodeStart</term>
                    <description>Invoked before Ignite startup routine is initiated. Note that Ignite 
                    is not available during this event, therefore if you injected an Ignite instance 
                    via <see cref="T:Apache.Ignite.Core.Resource.InstanceResourceAttribute"/> attribute, you cannot 
                    use it yet.</description>
                </item>
                <item>
                    <term>AfterNodeStart</term>
                    <description>Invoked right after Ignite has started. At this point, if you injected
                    an Ignite instance via <see cref="T:Apache.Ignite.Core.Resource.InstanceResourceAttribute"/> attribute, 
                    you can start using it.</description>
                </item>
                <item>
                    <term>BeforeNodeStop</term>
                    <description>Invoked right before Ignite stop routine is initiated. Ignite is still 
                    available at this stage, so if you injected an Ignite instance via 
                    <see cref="T:Apache.Ignite.Core.Resource.InstanceResourceAttribute"/> attribute, you can use it.
                    </description>
                </item>
                <item>
                    <term>AfterNodeStop</term>
                    <description>Invoked right after Ignite has stopped. Note that Ignite is not available 
                    during this event.</description>
                </item>
            </list>
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Lifecycle.ILifecycleHandler.OnLifecycleEvent(Apache.Ignite.Core.Lifecycle.LifecycleEventType)">
            <summary>
            This method is called when lifecycle event occurs.
            </summary>
            <param name="evt">Lifecycle event.</param>
        </member>
        <member name="F:Apache.Ignite.Core.Ignition.InternalLifecycleHandler._ignite">
            
        </member>
        <member name="M:Apache.Ignite.Core.Ignition.InternalLifecycleHandler.OnLifecycleEvent(Apache.Ignite.Core.Lifecycle.LifecycleEventType)">
            <inheritdoc /> 
        </member>
        <member name="T:Apache.Ignite.Core.IIgnite">
            <summary>
            Main entry point for all Ignite APIs.
            You can obtain an instance of <see cref="T:Apache.Ignite.Core.IIgnite"/> through <see cref="M:Apache.Ignite.Core.Ignition.GetIgnite"/>,
            or for named grids you can use <see cref="M:Apache.Ignite.Core.Ignition.GetIgnite(System.String)"/>. Note that you
            can have multiple instances of <see cref="T:Apache.Ignite.Core.IIgnite"/> running in the same process by giving
            each instance a different name.
            <para/>
            All members are thread-safe and may be used concurrently from multiple threads.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.IIgnite.GetCluster">
            <summary>
            Gets an instance of <see cref="T:Apache.Ignite.Core.Cluster.ICluster"/> interface.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.IIgnite.GetCompute">
            <summary>
            Gets compute functionality over this grid projection. All operations
            on the returned ICompute instance will only include nodes from
            this projection.
            </summary>
            <returns>Compute instance over this grid projection.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.IIgnite.GetCache``2(System.String)">
            <summary>
            Gets the cache instance for the given name to work with keys and values of specified types.
            <para/>
            You can get instances of ICache of the same name, but with different key/value types.
            These will use the same named cache, but only allow working with entries of specified types.
            Attempt to retrieve an entry of incompatible type will result in <see cref="T:System.InvalidCastException"/>.
            Use <see cref="M:Apache.Ignite.Core.IIgnite.GetCache``2(System.String)"/> in order to work with entries of arbitrary types.
            </summary>
            <param name="name">Cache name.</param>
            <returns>Cache instance for given name.</returns>
            <typeparam name="TK">Cache key type.</typeparam>
            <typeparam name="TV">Cache value type.</typeparam>
        </member>
        <member name="M:Apache.Ignite.Core.IIgnite.GetOrCreateCache``2(System.String)">
            <summary>
            Gets existing cache with the given name or creates new one using template configuration.
            </summary>
            <typeparam name="TK">Cache key type.</typeparam>
            <typeparam name="TV">Cache value type.</typeparam>
            <param name="name">Cache name.</param>
            <returns>Existing or newly created cache.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.IIgnite.GetOrCreateCache``2(Apache.Ignite.Core.Cache.Configuration.CacheConfiguration)">
            <summary>
            Gets existing cache with the given name or creates new one using provided configuration.
            </summary>
            <typeparam name="TK">Cache key type.</typeparam>
            <typeparam name="TV">Cache value type.</typeparam>
            <param name="configuration">Cache configuration.</param>
            <returns>Existing or newly created cache.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.IIgnite.GetOrCreateCache``2(Apache.Ignite.Core.Cache.Configuration.CacheConfiguration,Apache.Ignite.Core.Cache.Configuration.NearCacheConfiguration)">
            <summary>
            Gets existing cache with the given name or creates new one using provided configuration.
            </summary>
            <typeparam name="TK">Cache key type.</typeparam>
            <typeparam name="TV">Cache value type.</typeparam>
            <param name="configuration">Cache configuration.</param>
            /// <param name="nearConfiguration">Near cache configuration for client.</param>
            <returns>Existing or newly created cache.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.IIgnite.CreateCache``2(System.String)">
            <summary>
            Dynamically starts new cache using template configuration.
            </summary>
            <typeparam name="TK">Cache key type.</typeparam>
            <typeparam name="TV">Cache value type.</typeparam>
            <param name="name">Cache name.</param>
            <returns>Existing or newly created cache.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.IIgnite.CreateCache``2(Apache.Ignite.Core.Cache.Configuration.CacheConfiguration)">
            <summary>
            Dynamically starts new cache using provided configuration.
            </summary>
            <typeparam name="TK">Cache key type.</typeparam>
            <typeparam name="TV">Cache value type.</typeparam>
            <param name="configuration">Cache configuration.</param>
            <returns>Existing or newly created cache.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.IIgnite.CreateCache``2(Apache.Ignite.Core.Cache.Configuration.CacheConfiguration,Apache.Ignite.Core.Cache.Configuration.NearCacheConfiguration)">
            <summary>
            Dynamically starts new cache using provided configuration.
            </summary>
            <typeparam name="TK">Cache key type.</typeparam>
            <typeparam name="TV">Cache value type.</typeparam>
            <param name="configuration">Cache configuration.</param>
            <param name="nearConfiguration">Near cache configuration for client.</param>
            <returns>Existing or newly created cache.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.IIgnite.DestroyCache(System.String)">
            <summary>
            Destroys dynamically created (with <see cref="M:Apache.Ignite.Core.IIgnite.CreateCache``2(System.String)"/> or 
            <see cref="M:Apache.Ignite.Core.IIgnite.GetOrCreateCache``2(System.String)"/>) cache.
            </summary>
            <param name="name">The name of the cache to stop.</param>
        </member>
        <member name="M:Apache.Ignite.Core.IIgnite.GetDataStreamer``2(System.String)">
            <summary>
            Gets a new instance of data streamer associated with given cache name. Data streamer
            is responsible for loading external data into Ignite. For more information
            refer to <see cref="T:Apache.Ignite.Core.Datastream.IDataStreamer`2"/> documentation.
            </summary>
            <param name="cacheName">Cache name (<c>null</c> for default cache).</param>
            <returns>Data streamer.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.IIgnite.GetBinary">
            <summary>
            Gets an instance of <see cref="T:Apache.Ignite.Core.Binary.IBinary"/> interface.
            </summary>
            <returns>Instance of <see cref="T:Apache.Ignite.Core.Binary.IBinary"/> interface</returns>
        </member>
        <member name="M:Apache.Ignite.Core.IIgnite.GetAffinity(System.String)">
            <summary>
            Gets affinity service to provide information about data partitioning and distribution.
            </summary>
            <param name="name">Cache name.</param>
            <returns>Cache data affinity service.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.IIgnite.GetTransactions">
            <summary>
            Gets Ignite transactions facade.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.IIgnite.GetMessaging">
            <summary>
            Gets messaging facade over all cluster nodes.
            </summary>
            <returns>Messaging instance over all cluster nodes.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.IIgnite.GetEvents">
            <summary>
            Gets events facade over all cluster nodes.
            </summary>
            <returns>Events facade over all cluster nodes.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.IIgnite.GetServices">
            <summary>
            Gets services facade over all cluster nodes.
            </summary>
            <returns>Services facade over all cluster nodes.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.IIgnite.GetAtomicLong(System.String,System.Int64,System.Boolean)">
            <summary>
            Gets an atomic long with specified name from cache.
            Creates new atomic long in cache if it does not exist and <c>create</c> is true.
            </summary>
            <param name="name">Name of the atomic long.</param>
            <param name="initialValue">
            Initial value for the atomic long. Ignored if <c>create</c> is false.
            </param>
            <param name="create">Flag indicating whether atomic long should be created if it does not exist.</param>
            <returns>Atomic long instance with specified name, 
            or null if it does not exist and <c>create</c> flag is not set.</returns>
            <exception cref="T:Apache.Ignite.Core.Common.IgniteException">If atomic long could not be fetched or created.</exception>
        </member>
        <member name="M:Apache.Ignite.Core.IIgnite.GetAtomicSequence(System.String,System.Int64,System.Boolean)">
            <summary>
            Gets an atomic sequence with specified name from cache.
            Creates new atomic sequence in cache if it does not exist and <paramref name="create"/> is true.
            </summary>
            <param name="name">Name of the atomic sequence.</param>
            <param name="initialValue">
            Initial value for the atomic sequence. Ignored if <paramref name="create"/> is false.
            </param>
            <param name="create">Flag indicating whether atomic sequence should be created if it does not exist.</param>
            <returns>Atomic sequence instance with specified name, 
            or null if it does not exist and <paramref name="create"/> flag is not set.</returns>
            <exception cref="T:Apache.Ignite.Core.Common.IgniteException">If atomic sequence could not be fetched or created.</exception>
        </member>
        <member name="M:Apache.Ignite.Core.IIgnite.GetAtomicReference``1(System.String,``0,System.Boolean)">
            <summary>
            Gets an atomic reference with specified name from cache.
            Creates new atomic reference in cache if it does not exist and <paramref name="create"/> is true.
            </summary>
            <param name="name">Name of the atomic reference.</param>
            <param name="initialValue">
            Initial value for the atomic reference. Ignored if <paramref name="create"/> is false.
            </param>
            <param name="create">Flag indicating whether atomic reference should be created if it does not exist.</param>
            <returns>Atomic reference instance with specified name, 
            or null if it does not exist and <paramref name="create"/> flag is not set.</returns>
            <exception cref="T:Apache.Ignite.Core.Common.IgniteException">If atomic reference could not be fetched or created.</exception>
        </member>
        <member name="M:Apache.Ignite.Core.IIgnite.GetConfiguration">
            <summary>
            Gets the configuration of this Ignite instance.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.IIgnite.CreateNearCache``2(System.String,Apache.Ignite.Core.Cache.Configuration.NearCacheConfiguration)">
            <summary>
            Starts a near cache on local client node if cache with specified was previously started.
            This method does not work on server nodes.
            </summary>
            <param name="name">The name.</param>
            <param name="configuration">The configuration.</param>
            <typeparam name="TK">Cache key type.</typeparam>
            <typeparam name="TV">Cache value type.</typeparam>
            <returns>Near cache instance.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.IIgnite.GetOrCreateNearCache``2(System.String,Apache.Ignite.Core.Cache.Configuration.NearCacheConfiguration)">
            <summary>
            Gets existing near cache with the given name or creates a new one.
            </summary>
            <param name="name">The name.</param>
            <param name="configuration">The configuration.</param>
            <typeparam name="TK">Cache key type.</typeparam>
            <typeparam name="TV">Cache value type.</typeparam>
            <returns>Near cache instance.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.IIgnite.GetCacheNames">
            <summary>
            Gets the collection of names of currently available caches, or empty collection if there are no caches.
            Note that null string is a valid cache name.
            </summary>
            <returns>Collection of names of currently available caches.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.IIgnite.GetPlugin``1(System.String)">
            <summary>
            Gets the plugin by name.
            </summary>
            <typeparam name="T">Plugin type</typeparam>
            <param name="name">Plugin name.</param>
            <exception cref="T:Apache.Ignite.Core.Plugin.PluginNotFoundException">When plugin with specified name has not been found.</exception>
            <returns>Plugin instance.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.IIgnite.ResetLostPartitions(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Clears partitions' lost state and moves caches to a normal mode.
            </summary>
            <param name="cacheNames">Names of caches to reset partitions for.</param>
        </member>
        <member name="M:Apache.Ignite.Core.IIgnite.ResetLostPartitions(System.String[])">
            <summary>
            Clears partitions' lost state and moves caches to a normal mode.
            </summary>
            <param name="cacheNames">Names of caches to reset partitions for.</param>
        </member>
        <member name="M:Apache.Ignite.Core.IIgnite.GetMemoryMetrics">
            <summary>
            Gets a collection of memory metrics, one for each <see cref="P:Apache.Ignite.Core.Cache.Configuration.MemoryConfiguration.MemoryPolicies"/>.
            <para/>
            Memory metrics should be enabled with <see cref="P:Apache.Ignite.Core.Cache.Configuration.MemoryPolicyConfiguration.MetricsEnabled"/>.
            <para/>
            Obsolete, use <see cref="M:Apache.Ignite.Core.IIgnite.GetDataRegionMetrics"/>.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.IIgnite.GetMemoryMetrics(System.String)">
            <summary>
            Gets the memory metrics for the specified memory policy.
            <para/>
            To get metrics for the default memory region,
            use <see cref="P:Apache.Ignite.Core.Cache.Configuration.MemoryConfiguration.DefaultMemoryPolicyName"/>.
            <para/>
            Obsolete, use <see cref="M:Apache.Ignite.Core.IIgnite.GetDataRegionMetrics(System.String)"/>.
            </summary>
            <param name="memoryPolicyName">Name of the memory policy.</param>
        </member>
        <member name="M:Apache.Ignite.Core.IIgnite.SetActive(System.Boolean)">
            <summary>
            Changes Ignite grid state to active or inactive.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.IIgnite.IsActive">
            <summary>
            Determines whether this grid is in active state.
            </summary>
            <returns>
              <c>true</c> if the grid is active; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.IIgnite.GetPersistentStoreMetrics">
            <summary>
            Gets the persistent store metrics.
            <para/>
            To enable metrics set <see cref="P:Apache.Ignite.Core.PersistentStore.PersistentStoreConfiguration.MetricsEnabled"/> property
            in <see cref="P:Apache.Ignite.Core.IgniteConfiguration.PersistentStoreConfiguration"/>.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.IIgnite.GetDataRegionMetrics">
            <summary>
            Gets a collection of memory metrics, one for each 
            <see cref="P:Apache.Ignite.Core.Configuration.DataStorageConfiguration.DataRegionConfigurations"/>.
            <para/>
            Metrics should be enabled with <see cref="P:Apache.Ignite.Core.Configuration.DataStorageConfiguration.MetricsEnabled"/>.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.IIgnite.GetDataRegionMetrics(System.String)">
            <summary>
            Gets the memory metrics for the specified data region.
            <para/>
            To get metrics for the default memory region,
            use <see cref="F:Apache.Ignite.Core.Configuration.DataStorageConfiguration.DefaultDataRegionName"/>.
            </summary>
            <param name="dataRegionName">Name of the data region.</param>
        </member>
        <member name="M:Apache.Ignite.Core.IIgnite.GetDataStorageMetrics">
            <summary>
            Gets the persistent store metrics.
            <para/>
            To enable metrics set <see cref="P:Apache.Ignite.Core.Configuration.DataStorageConfiguration.MetricsEnabled"/> property
            in <see cref="P:Apache.Ignite.Core.IgniteConfiguration.DataStorageConfiguration"/>.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.IIgnite.Name">
            <summary>
            Gets the name of the grid this Ignite instance (and correspondingly its local node) belongs to.
            Note that single process can have multiple Ignite instances all belonging to different grids. Grid
            name allows to indicate to what grid this particular Ignite instance (i.e. Ignite runtime and its
            local node) belongs to.
            <p/>
            If default Ignite instance is used, then <c>null</c> is returned. Refer to <see cref="T:Apache.Ignite.Core.Ignition"/> documentation
            for information on how to start named grids.
            </summary>
            <returns>Name of the grid, or <c>null</c> for default grid.</returns>
        </member>
        <member name="P:Apache.Ignite.Core.IIgnite.Logger">
            <summary>
            Gets the logger.
            <para/>
            See <see cref="P:Apache.Ignite.Core.IgniteConfiguration.Logger"/> for customization.
            </summary>
        </member>
        <member name="E:Apache.Ignite.Core.IIgnite.Stopping">
            <summary>
            Occurs when node begins to stop. Node is fully functional at this point.
            See also: <see cref="F:Apache.Ignite.Core.Lifecycle.LifecycleEventType.BeforeNodeStop"/>.
            </summary>
        </member>
        <member name="E:Apache.Ignite.Core.IIgnite.Stopped">
            <summary>
            Occurs when node has stopped. Node can't be used at this point.
            See also: <see cref="F:Apache.Ignite.Core.Lifecycle.LifecycleEventType.AfterNodeStop"/>.
            </summary>
        </member>
        <member name="E:Apache.Ignite.Core.IIgnite.ClientDisconnected">
            <summary>
            Occurs when client node disconnects from the cluster. This event can only occur when this instance
            runs in client mode (<see cref="P:Apache.Ignite.Core.IgniteConfiguration.ClientMode"/>).
            </summary>
        </member>
        <member name="E:Apache.Ignite.Core.IIgnite.ClientReconnected">
            <summary>
            Occurs when client node reconnects to the cluster. This event can only occur when this instance
            runs in client mode (<see cref="P:Apache.Ignite.Core.IgniteConfiguration.ClientMode"/>).
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Binary.BinaryEnum">
            <summary>
            Represents a typed enum in binary form.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Binary.IBinaryObject">
            <summary>
            Wrapper for serialized objects.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryObject.GetBinaryType">
            <summary>
            Gets object metadata.
            </summary>
            <returns>Metadata.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryObject.GetField``1(System.String)">
            <summary>
            Gets field value.
            </summary>
            <param name="fieldName">Field name.</param>
            <returns>
            Field value.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryObject.HasField(System.String)">
            <summary>
            Determines whether the field with specified name exists in this instance.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <returns>True if there is a field with specified name; false otherwise.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryObject.Deserialize``1">
            <summary>
            Gets fully deserialized instance of binary object.
            </summary>
            <returns>
            Fully deserialized instance of binary object.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryObject.ToBuilder">
            <summary>
            Creates a new <see cref="T:Apache.Ignite.Core.Binary.IBinaryObjectBuilder"/> based on this object.
            <para/>
            This is equivalent to <see cref="M:Apache.Ignite.Core.Binary.IBinary.GetBuilder(Apache.Ignite.Core.Binary.IBinaryObject)"/>.
            </summary>
            <returns>New <see cref="T:Apache.Ignite.Core.Binary.IBinaryObjectBuilder"/> based on this object.</returns>
        </member>
        <member name="P:Apache.Ignite.Core.Binary.IBinaryObject.EnumValue">
            <summary>
            Gets the value of underlying enum in int form.
            </summary>
            <value>
            The value of underlying enum in int form.
            </value>
        </member>
        <member name="P:Apache.Ignite.Core.Binary.IBinaryObject.EnumName">
            <summary>
            Gets the name of the underlying enum value.
            </summary>
            <value>
            The name of the enum value.
            </value>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryEnum._typeId">
            Type id. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryEnum._enumValue">
            Value. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryEnum._marsh">
            Marshaller. 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryEnum.#ctor(System.Int32,System.Int32,Apache.Ignite.Core.Impl.Binary.Marshaller)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Impl.Binary.BinaryEnum"/> class.
            </summary>
            <param name="typeId">The type identifier.</param>
            <param name="enumValue">The value.</param>
            <param name="marsh">The marshaller.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryEnum.GetBinaryType">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryEnum.GetField``1(System.String)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryEnum.HasField(System.String)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryEnum.Deserialize``1">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryEnum.ToBuilder">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryEnum.Equals(Apache.Ignite.Core.Impl.Binary.BinaryEnum)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryEnum.Equals(System.Object)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryEnum.GetHashCode">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryEnum.ToString">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.BinaryEnum.TypeId">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.BinaryEnum.EnumValue">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.BinaryEnum.EnumName">
            <inheritdoc /> 
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Binary.BinaryObjectSchemaSerializer">
            <summary>
            Schema reader/writer.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryObjectSchemaSerializer.ToDictionary(Apache.Ignite.Core.Impl.Binary.BinaryObjectSchemaField[])">
            <summary>
            Converts schema fields to dictionary.
            </summary>
            <param name="fields">The fields.</param>
            <returns>Fields as dictionary.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryObjectSchemaSerializer.ReadSchema(Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream,System.Int32,Apache.Ignite.Core.Impl.Binary.BinaryObjectHeader,Apache.Ignite.Core.Impl.Binary.BinaryObjectSchema,Apache.Ignite.Core.Impl.IIgniteInternal)">
            <summary>
            Reads the schema according to this header data.
            </summary>
            <param name="stream">The stream.</param>
            <param name="position">The position.</param>
            <param name="hdr">The header.</param>
            <param name="schema">The schema.</param>
            <param name="ignite">The ignite.</param>
            <returns>
            Schema.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryObjectSchemaSerializer.ReadSchema(Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream,System.Int32,Apache.Ignite.Core.Impl.Binary.BinaryObjectHeader,System.Func{System.Int32[]})">
            <summary>
            Reads the schema according to this header data.
            </summary>
            <param name="stream">The stream.</param>
            <param name="position">The position.</param>
            <param name="hdr">The header.</param>
            <param name="fieldIdsFunc">The field ids function.</param>
            <returns>
            Schema.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryObjectSchemaSerializer.WriteSchema(Apache.Ignite.Core.Impl.Binary.BinaryObjectSchemaField[],Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Writes an array of fields to a stream.
            </summary>
            <param name="fields">Fields.</param>
            <param name="stream">Stream.</param>
            <param name="offset">Offset in the array.</param>
            <param name="count">Field count to write.</param>
            <param name="compact">Compact mode without field ids.</param>
            <returns>
            Flags according to offset sizes: <see cref="F:Apache.Ignite.Core.Impl.Binary.BinaryObjectHeader.Flag.OffsetOneByte"/>,
            <see cref="F:Apache.Ignite.Core.Impl.Binary.BinaryObjectHeader.Flag.OffsetTwoBytes"/>, or 0.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryObjectSchemaSerializer.GetFieldIds(Apache.Ignite.Core.Impl.Binary.BinaryObjectHeader,Apache.Ignite.Core.Impl.IIgniteInternal)">
            <summary>
            Gets the field ids.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryObjectSchemaSerializer.GetFieldIds(Apache.Ignite.Core.Impl.Binary.BinaryObjectHeader,Apache.Ignite.Core.Impl.IIgniteInternal,Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream,System.Int32)">
            <summary>
            Reads the schema, maintains stream position.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryObjectSchemaSerializer.GetFieldIds(Apache.Ignite.Core.Impl.Binary.BinaryObjectHeader,Apache.Ignite.Core.Impl.Binary.BinaryObjectSchema,Apache.Ignite.Core.Impl.IIgniteInternal)">
            <summary>
            Gets the field ids.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Binary.ReferenceEqualityComparer`1">
            <summary>
            Comparer that uses ReferenceEquals.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.ReferenceEqualityComparer`1.Instance">
            <summary>
            Default instance.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.ReferenceEqualityComparer`1.Equals(`0,`0)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.ReferenceEqualityComparer`1.GetHashCode(`0)">
            <inheritdoc /> 
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Binary.JavaTypes">
            <summary>
            Provides mapping between Java and .NET basic types.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.JavaTypes.NetToJava">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.JavaTypes.IndirectMappingTypes">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.JavaTypes.JavaToNet">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.JavaTypes.JavaPrimitiveToType">
            
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.JavaTypes.GetJavaTypeName(System.Type)">
            <summary>
            Gets the corresponding Java type name.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.JavaTypes.LogIndirectMappingWarning(System.Type,Apache.Ignite.Core.Log.ILogger,System.String)">
            <summary>
            Logs a warning for indirectly mapped types.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.JavaTypes.GetDirectlyMappedType(System.Type)">
            <summary>
            Gets the compatible type that maps directly to Java.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.JavaTypes.GetDotNetType(System.String)">
            <summary>
            Gets .NET type that corresponds to specified Java type name.
            </summary>
            <param name="javaTypeName">Name of the java type.</param>
            <returns></returns>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Cache.CacheAffinityImpl">
            <summary>
            Cache affinity implementation.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.CacheAffinityImpl.OpAffinityKey">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.CacheAffinityImpl.OpAllPartitions">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.CacheAffinityImpl.OpBackupPartitions">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.CacheAffinityImpl.OpIsBackup">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.CacheAffinityImpl.OpIsPrimary">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.CacheAffinityImpl.OpIsPrimaryOrBackup">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.CacheAffinityImpl.OpMapKeyToNode">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.CacheAffinityImpl.OpMapKeyToPrimaryAndBackups">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.CacheAffinityImpl.OpMapKeysToNodes">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.CacheAffinityImpl.OpMapPartitionToNode">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.CacheAffinityImpl.OpMapPartitionToPrimaryAndBackups">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.CacheAffinityImpl.OpMapPartitionsToNodes">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.CacheAffinityImpl.OpPartition">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.CacheAffinityImpl.OpPrimaryPartitions">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.CacheAffinityImpl.OpPartitions">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.CacheAffinityImpl._keepBinary">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.CacheAffinityImpl._ignite">
            Grid. 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheAffinityImpl.#ctor(Apache.Ignite.Core.Impl.IPlatformTargetInternal,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Impl.Cache.CacheAffinityImpl"/> class.
            </summary>
            <param name="target">Target.</param>
            <param name="keepBinary">Keep binary flag.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheAffinityImpl.GetPartition``1(``0)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheAffinityImpl.IsPrimary``1(Apache.Ignite.Core.Cluster.IClusterNode,``0)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheAffinityImpl.IsBackup``1(Apache.Ignite.Core.Cluster.IClusterNode,``0)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheAffinityImpl.IsPrimaryOrBackup``1(Apache.Ignite.Core.Cluster.IClusterNode,``0)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheAffinityImpl.GetPrimaryPartitions(Apache.Ignite.Core.Cluster.IClusterNode)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheAffinityImpl.GetBackupPartitions(Apache.Ignite.Core.Cluster.IClusterNode)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheAffinityImpl.GetAllPartitions(Apache.Ignite.Core.Cluster.IClusterNode)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheAffinityImpl.GetAffinityKey``2(``0)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheAffinityImpl.MapKeysToNodes``1(System.Collections.Generic.IEnumerable{``0})">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheAffinityImpl.MapKeyToNode``1(``0)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheAffinityImpl.MapKeyToPrimaryAndBackups``1(``0)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheAffinityImpl.MapPartitionToNode(System.Int32)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheAffinityImpl.MapPartitionsToNodes(System.Collections.Generic.IEnumerable{System.Int32})">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheAffinityImpl.MapPartitionToPrimaryAndBackups(System.Int32)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheAffinityImpl.Unmarshal``1(Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheAffinityImpl.GetNode(System.Nullable{System.Guid})">
            <summary>
            Gets the node by id.
            </summary>
            <param name="id">The id.</param>
            <returns>Node.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheAffinityImpl.ReadNode(Apache.Ignite.Core.Impl.Binary.BinaryReader)">
            <summary>
            Reads a node from stream.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheAffinityImpl.ReadNodes(Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream)">
            <summary>
            Reads nodes from stream.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheAffinityImpl.ReadDictionary``2(Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream,System.Func{Apache.Ignite.Core.Impl.Binary.BinaryReader,``0},System.Func{Apache.Ignite.Core.Impl.Binary.BinaryReader,``1})">
            <summary>
            Reads a dictionary from stream.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.CacheAffinityImpl.Partitions">
            <inheritDoc /> 
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Cache.CacheEntry`2">
            <summary>
            Represents a cache entry.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.CacheEntry`2._key">
            Key. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.CacheEntry`2._val">
            Value. 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheEntry`2.#ctor(`0,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Impl.Cache.CacheEntry`2"/> struct.
            </summary>
            <param name="key">The key.</param>
            <param name="val">The value.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheEntry`2.Equals(Apache.Ignite.Core.Impl.Cache.CacheEntry{`0,`1})">
            <summary>
            Determines whether the specified <see cref="T:Apache.Ignite.Core.Impl.Cache.CacheEntry`2"/>, is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:Apache.Ignite.Core.Impl.Cache.CacheEntry`2"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:Apache.Ignite.Core.Impl.Cache.CacheEntry`2"/> is equal to this instance; 
              otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheEntry`2.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheEntry`2.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms
            and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheEntry`2.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheEntry`2.op_Equality(Apache.Ignite.Core.Impl.Cache.CacheEntry{`0,`1},Apache.Ignite.Core.Impl.Cache.CacheEntry{`0,`1})">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="a">First item.</param>
            <param name="b">Second item.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheEntry`2.op_Inequality(Apache.Ignite.Core.Impl.Cache.CacheEntry{`0,`1},Apache.Ignite.Core.Impl.Cache.CacheEntry{`0,`1})">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="a">First item.</param>
            <param name="b">Second item.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.CacheEntry`2.Key">
            <summary>
            Gets the key.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.CacheEntry`2.Value">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Cache.CacheEntryFilterHolder">
            <summary>
            Non-generic binary filter wrapper.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.CacheEntryFilterHolder._pred">
            Wrapped ICacheEntryFilter 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.CacheEntryFilterHolder._invoker">
            Invoker function that takes key and value and invokes wrapped ICacheEntryFilter 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.CacheEntryFilterHolder._keepBinary">
            Keep binary flag. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.CacheEntryFilterHolder._marsh">
            Grid. 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheEntryFilterHolder.#ctor(System.Object,System.Func{System.Object,System.Object,System.Boolean},Apache.Ignite.Core.Impl.Binary.Marshaller,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Impl.Cache.CacheEntryFilterHolder"/> class.
            </summary>
            <param name="pred">The <see cref="T:Apache.Ignite.Core.Cache.ICacheEntryFilter`2"/> to wrap.</param>
            <param name="invoker">The invoker func that takes key and value and invokes wrapped ICacheEntryFilter.</param>
            <param name="marsh">Marshaller.</param>
            <param name="keepBinary">Keep binary flag.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheEntryFilterHolder.Invoke(Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream)">
            <summary>
            Invokes the cache filter.
            </summary>
            <param name="input">The input stream.</param>
            <returns>Invocation result.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheEntryFilterHolder.WriteBinary(Apache.Ignite.Core.Binary.IBinaryWriter)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheEntryFilterHolder.#ctor(Apache.Ignite.Core.Impl.Binary.BinaryReader)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Impl.Cache.CacheEntryFilterHolder"/> class.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheEntryFilterHolder.InjectResources">
            <summary>
            Injects the resources.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheEntryFilterHolder.GetInvoker(System.Object)">
            <summary>
            Gets the invoker func.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheEntryFilterHolder.CreateInstance(System.Int64,Apache.Ignite.Core.Impl.Ignite)">
            <summary>
            Creates an instance of this class from a stream.
            </summary>
            <param name="memPtr">Memory pointer.</param>
            <param name="grid">Grid.</param>
            <returns>Deserialized instance of <see cref="T:Apache.Ignite.Core.Impl.Cache.CacheEntryFilterHolder"/></returns>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Cache.CacheEntryProcessorHolder">
            <summary>
            Binary wrapper for the <see cref="T:Apache.Ignite.Core.Cache.ICacheEntryProcessor`4"/> and it's argument.
            Marshals and executes wrapped processor with a non-generic interface.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheEntryProcessorHolder.#ctor(System.Object,System.Object,System.Func{Apache.Ignite.Core.Impl.Cache.IMutableCacheEntryInternal,System.Object,System.Object},System.Type,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Impl.Cache.CacheEntryProcessorHolder"/> class.
            </summary>
            <param name="proc">The processor to wrap.</param>
            <param name="arg">The argument.</param>
            <param name="processFunc">Delegate to call generic <see cref="M:Apache.Ignite.Core.Cache.ICacheEntryProcessor`4.Process(Apache.Ignite.Core.Cache.IMutableCacheEntry{`0,`1},`2)"/> on local node.</param>
            <param name="keyType">Type of the key.</param>
            <param name="valType">Type of the value.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheEntryProcessorHolder.Process(System.Object,System.Object,System.Boolean,Apache.Ignite.Core.Impl.Ignite)">
            <summary>
            Processes specified cache entry.
            </summary>
            <param name="key">The cache entry key.</param>
            <param name="value">The cache entry value.</param>
            <param name="exists">Indicates whether cache entry exists.</param>
            <param name="grid"></param>
            <returns>
            Pair of resulting cache entry and result of processing it.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheEntryProcessorHolder.WriteBinary(Apache.Ignite.Core.Binary.IBinaryWriter)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheEntryProcessorHolder.#ctor(Apache.Ignite.Core.Binary.IBinaryRawReader)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Impl.Cache.CacheEntryProcessorHolder"/> class.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheEntryProcessorHolder.GetProcessFunc(System.Object)">
            <summary>
            Gets a delegate to call generic <see cref="M:Apache.Ignite.Core.Cache.ICacheEntryProcessor`4.Process(Apache.Ignite.Core.Cache.IMutableCacheEntry{`0,`1},`2)"/>.
            </summary>
            <param name="proc">The processor instance.</param>
            <returns>
            Delegate to call generic <see cref="M:Apache.Ignite.Core.Cache.ICacheEntryProcessor`4.Process(Apache.Ignite.Core.Cache.IMutableCacheEntry{`0,`1},`2)"/>.
            </returns>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Cache.CacheEntryProcessorResult`2">
            <summary>
            Represents a result of <see cref="T:Apache.Ignite.Core.Cache.ICacheEntryProcessor`4"/> invocation.
            </summary>
            <typeparam name="TK">Key type.</typeparam>
            <typeparam name="T">Result type.</typeparam>
            <seealso cref="T:Apache.Ignite.Core.Cache.ICacheEntryProcessorResult`2"/>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheEntryProcessorResult`2.#ctor(`0,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Impl.Cache.CacheEntryProcessorResult`2"/> class.
            </summary>
            <param name="key">The key.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheEntryProcessorResult`2.#ctor(`0,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Impl.Cache.CacheEntryProcessorResult`2"/> class.
            </summary>
            <param name="key">The key.</param>
            <param name="error">The error.</param>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.CacheEntryProcessorResult`2.Key">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.CacheEntryProcessorResult`2.Result">
            <inheritdoc /> 
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Cache.CacheEntryProcessorResultHolder">
            <summary>
            Manages cache entry processing result in non-generic form.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheEntryProcessorResultHolder.#ctor(Apache.Ignite.Core.Impl.Cache.IMutableCacheEntryInternal,System.Object,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Impl.Cache.CacheEntryProcessorResultHolder"/> class.
            </summary>
            <param name="entry">Entry.</param>
            <param name="processResult">Process result.</param>
            <param name="error">Error.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheEntryProcessorResultHolder.Write(Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream,Apache.Ignite.Core.Impl.Binary.Marshaller)">
            <summary>
            Writes this instance to the stream.
            </summary>
            <param name="stream">Stream.</param>
            <param name="marsh">Marshaller.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheEntryProcessorResultHolder.Marshal(Apache.Ignite.Core.Impl.Binary.BinaryWriter)">
            <summary>
            Marshal this instance.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.CacheEntryProcessorResultHolder.Entry">
            <summary>
            Gets the entry.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.CacheEntryProcessorResultHolder.ProcessResult">
            <summary>
            Gets the process result.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.CacheEntryProcessorResultHolder.Error">
            <summary>
            Gets the error.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Cache.CacheEnumerable`2">
            <summary>
            Cache enumerable.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.CacheEnumerable`2._cache">
            Target cache. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.CacheEnumerable`2._loc">
            Local flag. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.CacheEnumerable`2._peekModes">
            Peek modes. 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheEnumerable`2.#ctor(Apache.Ignite.Core.Impl.Cache.CacheImpl{`0,`1})">
            <summary>
            Constructor for distributed iterator.
            </summary>
            <param name="cache">Target cache.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheEnumerable`2.#ctor(Apache.Ignite.Core.Impl.Cache.CacheImpl{`0,`1},System.Int32)">
            <summary>
            Constructor for local iterator.
            </summary>
            <param name="cache">Target cache.</param>
            <param name="peekModes">Peek modes.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheEnumerable`2.#ctor(Apache.Ignite.Core.Impl.Cache.CacheImpl{`0,`1},System.Boolean,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="cache">Target cache.</param>
            <param name="loc">Local flag.</param>
            <param name="peekModes">Peek modes.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheEnumerable`2.GetEnumerator">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheEnumerable`2.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc /> 
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Cache.CacheEnumerator`2">
            <summary>
            Real cache enumerator communicating with Java.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.CacheEnumerator`2.OpNext">
            Operation: next value. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.CacheEnumerator`2._keepBinary">
            Keep binary flag. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.CacheEnumerator`2._cur">
            Current entry. 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheEnumerator`2.#ctor(Apache.Ignite.Core.Impl.IPlatformTargetInternal,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="target">Target.</param>
            <param name="keepBinary">Keep binary flag.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheEnumerator`2.MoveNext">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheEnumerator`2.Reset">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheEnumerator`2.Unmarshal``1(Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream)">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.CacheEnumerator`2.Current">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.CacheEnumerator`2.System#Collections#IEnumerator#Current">
            <inheritdoc /> 
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Cache.CacheEnumeratorProxy`2">
            <summary>
            Cache enumerator proxy. Required to support reset and early native iterator cleanup.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.CacheEnumeratorProxy`2._cache">
            Target cache. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.CacheEnumeratorProxy`2._loc">
            Local flag. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.CacheEnumeratorProxy`2._peekModes">
            Peek modes. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.CacheEnumeratorProxy`2._target">
            Target enumerator. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.CacheEnumeratorProxy`2._disposed">
            Dispose flag. 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheEnumeratorProxy`2.#ctor(Apache.Ignite.Core.Impl.Cache.CacheImpl{`0,`1},System.Boolean,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="cache">Target cache.</param>
            <param name="loc">Local flag.</param>
            <param name="peekModes">Peek modes.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheEnumeratorProxy`2.MoveNext">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheEnumeratorProxy`2.Reset">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheEnumeratorProxy`2.Dispose">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheEnumeratorProxy`2.CreateTarget">
            <summary>
            Get target enumerator.
            </summary>
            <returns>Target enumerator.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheEnumeratorProxy`2.CloseTarget">
            <summary>
            Close the target.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheEnumeratorProxy`2.CheckDisposed">
            <summary>
            Check whether object is disposed.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.CacheEnumeratorProxy`2.Current">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.CacheEnumeratorProxy`2.System#Collections#IEnumerator#Current">
            <inheritdoc /> 
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Cache.CacheImpl`2">
            <summary>
            Native cache wrapper.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Cache.ICacheInternal">
            <summary>
            Extended Cache interface for internal needs.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.ICacheInternal.QueryFields``1(Apache.Ignite.Core.Cache.Query.SqlFieldsQuery,System.Func{Apache.Ignite.Core.Binary.IBinaryRawReader,System.Int32,``0})">
            <summary>
            Queries separate entry fields.
            </summary>
            <typeparam name="T">Type of the result.</typeparam>
            <param name="qry">SQL fields query.</param>
            <param name="readerFunc">Reader function, takes raw reader and field count, returns typed result.</param>
            <returns>
            Cursor.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.ICacheInternal.DoOutInOpExtension``1(System.Int32,System.Int32,System.Action{Apache.Ignite.Core.Binary.IBinaryRawWriter},System.Func{Apache.Ignite.Core.Binary.IBinaryRawReader,``0})">
            <summary>
            Invokes a cache extension.
            </summary>
            <typeparam name="T">The type of the result.</typeparam>
            <param name="extensionId">The extension identifier.</param>
            <param name="opCode">The extension op code.</param>
            <param name="writeAction">The write action.</param>
            <param name="readFunc">The read action.</param>
            <returns>
            Result of the processing.
            </returns>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.CacheImpl`2._ignite">
            Ignite instance. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.CacheImpl`2._flagSkipStore">
            Flag: skip store. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.CacheImpl`2._flagKeepBinary">
            Flag: keep binary. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.CacheImpl`2._flagNoRetries">
            Flag: no-retries.
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.CacheImpl`2._flagPartitionRecover">
            Flag: partition recover.
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.CacheImpl`2._txManager">
            Transaction manager. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.CacheImpl`2._readException">
            Pre-allocated delegate. 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheImpl`2.#ctor(Apache.Ignite.Core.Impl.IPlatformTargetInternal,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="target">Target.</param>
            <param name="flagSkipStore">Skip store flag.</param>
            <param name="flagKeepBinary">Keep binary flag.</param>
            <param name="flagNoRetries">No-retries mode flag.</param>
            <param name="flagPartitionRecover">Partition recover mode flag.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheImpl`2.DoOutOpAsync``1(Apache.Ignite.Core.Impl.Cache.CacheOp,``0)">
            <summary>
            Performs async operation.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheImpl`2.DoOutOpAsync``2(Apache.Ignite.Core.Impl.Cache.CacheOp,``0)">
            <summary>
            Performs async operation.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheImpl`2.DoOutOpAsync``2(Apache.Ignite.Core.Impl.Cache.CacheOp,``0,``1)">
            <summary>
            Performs async operation.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheImpl`2.DoOutOpAsync``3(Apache.Ignite.Core.Impl.Cache.CacheOp,``0,``1)">
            <summary>
            Performs async operation.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheImpl`2.DoOutOpAsync(Apache.Ignite.Core.Impl.Cache.CacheOp,System.Action{Apache.Ignite.Core.Impl.Binary.BinaryWriter})">
            <summary>
            Performs async operation.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheImpl`2.DoOutOpAsync``1(Apache.Ignite.Core.Impl.Cache.CacheOp,System.Action{Apache.Ignite.Core.Impl.Binary.BinaryWriter},System.Func{Apache.Ignite.Core.Impl.Binary.BinaryReader,``0})">
            <summary>
            Performs async operation.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheImpl`2.GetConfiguration">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheImpl`2.IsEmpty">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheImpl`2.WithSkipStore">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheImpl`2.WithKeepBinary``2">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheImpl`2.WithExpiryPolicy(Apache.Ignite.Core.Cache.Expiry.IExpiryPolicy)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheImpl`2.LoadCache(Apache.Ignite.Core.Cache.ICacheEntryFilter{`0,`1},System.Object[])">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheImpl`2.LoadCacheAsync(Apache.Ignite.Core.Cache.ICacheEntryFilter{`0,`1},System.Object[])">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheImpl`2.LocalLoadCache(Apache.Ignite.Core.Cache.ICacheEntryFilter{`0,`1},System.Object[])">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheImpl`2.LocalLoadCacheAsync(Apache.Ignite.Core.Cache.ICacheEntryFilter{`0,`1},System.Object[])">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheImpl`2.WriteLoadCacheData(Apache.Ignite.Core.Impl.Binary.BinaryWriter,Apache.Ignite.Core.Cache.ICacheEntryFilter{`0,`1},System.Object[])">
            <summary>
            Writes the load cache data to the writer.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheImpl`2.LoadAll(System.Collections.Generic.IEnumerable{`0},System.Boolean)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheImpl`2.LoadAllAsync(System.Collections.Generic.IEnumerable{`0},System.Boolean)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheImpl`2.ContainsKey(`0)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheImpl`2.ContainsKeyAsync(`0)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheImpl`2.ContainsKeys(System.Collections.Generic.IEnumerable{`0})">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheImpl`2.ContainsKeysAsync(System.Collections.Generic.IEnumerable{`0})">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheImpl`2.LocalPeek(`0,Apache.Ignite.Core.Cache.CachePeekMode[])">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheImpl`2.TryLocalPeek(`0,`1@,Apache.Ignite.Core.Cache.CachePeekMode[])">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheImpl`2.Get(`0)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheImpl`2.GetAsync(`0)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheImpl`2.TryGet(`0,`1@)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheImpl`2.TryGetAsync(`0)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheImpl`2.GetAll(System.Collections.Generic.IEnumerable{`0})">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheImpl`2.GetAllAsync(System.Collections.Generic.IEnumerable{`0})">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheImpl`2.Put(`0,`1)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheImpl`2.PutAsync(`0,`1)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheImpl`2.GetAndPut(`0,`1)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheImpl`2.GetAndPutAsync(`0,`1)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheImpl`2.GetAndReplace(`0,`1)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheImpl`2.GetAndReplaceAsync(`0,`1)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheImpl`2.GetAndRemove(`0)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheImpl`2.GetAndRemoveAsync(`0)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheImpl`2.PutIfAbsent(`0,`1)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheImpl`2.PutIfAbsentAsync(`0,`1)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheImpl`2.GetAndPutIfAbsent(`0,`1)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheImpl`2.GetAndPutIfAbsentAsync(`0,`1)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheImpl`2.Replace(`0,`1)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheImpl`2.ReplaceAsync(`0,`1)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheImpl`2.Replace(`0,`1,`1)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheImpl`2.ReplaceAsync(`0,`1,`1)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheImpl`2.PutAll(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheImpl`2.PutAllAsync(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheImpl`2.LocalEvict(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheImpl`2.Clear">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheImpl`2.ClearAsync">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheImpl`2.Clear(`0)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheImpl`2.ClearAsync(`0)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheImpl`2.ClearAll(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheImpl`2.ClearAllAsync(System.Collections.Generic.IEnumerable{`0})">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheImpl`2.LocalClear(`0)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheImpl`2.LocalClearAll(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheImpl`2.Remove(`0)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheImpl`2.RemoveAsync(`0)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheImpl`2.Remove(`0,`1)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheImpl`2.RemoveAsync(`0,`1)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheImpl`2.RemoveAll(System.Collections.Generic.IEnumerable{`0})">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheImpl`2.RemoveAllAsync(System.Collections.Generic.IEnumerable{`0})">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheImpl`2.RemoveAll">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheImpl`2.RemoveAllAsync">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheImpl`2.GetLocalSize(Apache.Ignite.Core.Cache.CachePeekMode[])">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheImpl`2.GetSize(Apache.Ignite.Core.Cache.CachePeekMode[])">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheImpl`2.GetSizeAsync(Apache.Ignite.Core.Cache.CachePeekMode[])">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheImpl`2.Size0(System.Boolean,Apache.Ignite.Core.Cache.CachePeekMode[])">
            <summary>
            Internal size routine.
            </summary>
            <param name="loc">Local flag.</param>
            <param name="modes">peek modes</param>
            <returns>Size.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheImpl`2.Invoke``2(`0,Apache.Ignite.Core.Cache.ICacheEntryProcessor{`0,`1,``0,``1},``0)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheImpl`2.InvokeAsync``2(`0,Apache.Ignite.Core.Cache.ICacheEntryProcessor{`0,`1,``0,``1},``0)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheImpl`2.InvokeAll``2(System.Collections.Generic.IEnumerable{`0},Apache.Ignite.Core.Cache.ICacheEntryProcessor{`0,`1,``0,``1},``0)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheImpl`2.InvokeAllAsync``2(System.Collections.Generic.IEnumerable{`0},Apache.Ignite.Core.Cache.ICacheEntryProcessor{`0,`1,``0,``1},``0)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheImpl`2.DoOutInOpExtension``1(System.Int32,System.Int32,System.Action{Apache.Ignite.Core.Binary.IBinaryRawWriter},System.Func{Apache.Ignite.Core.Binary.IBinaryRawReader,``0})">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheImpl`2.Lock(`0)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheImpl`2.LockAll(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheImpl`2.IsLocalLocked(`0,System.Boolean)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheImpl`2.GetMetrics">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheImpl`2.GetMetrics(Apache.Ignite.Core.Cluster.IClusterGroup)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheImpl`2.GetLocalMetrics">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheImpl`2.Rebalance">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheImpl`2.WithNoRetries">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheImpl`2.WithPartitionRecover">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheImpl`2.GetLostPartitions">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheImpl`2.QueryFields(Apache.Ignite.Core.Cache.Query.SqlFieldsQuery)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheImpl`2.ReadFieldsArrayList(Apache.Ignite.Core.Binary.IBinaryRawReader,System.Int32)">
            <summary>
            Reads the fields array list.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheImpl`2.QueryFields``1(Apache.Ignite.Core.Cache.Query.SqlFieldsQuery,System.Func{Apache.Ignite.Core.Binary.IBinaryRawReader,System.Int32,``0})">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheImpl`2.Query(Apache.Ignite.Core.Cache.Query.QueryBase)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheImpl`2.QueryContinuous(Apache.Ignite.Core.Cache.Query.Continuous.ContinuousQuery{`0,`1})">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheImpl`2.QueryContinuous(Apache.Ignite.Core.Cache.Query.Continuous.ContinuousQuery{`0,`1},Apache.Ignite.Core.Cache.Query.QueryBase)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheImpl`2.QueryContinuousImpl(Apache.Ignite.Core.Cache.Query.Continuous.ContinuousQuery{`0,`1},Apache.Ignite.Core.Cache.Query.QueryBase)">
            <summary>
            QueryContinuous implementation.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheImpl`2.GetLocalEntries(Apache.Ignite.Core.Cache.CachePeekMode[])">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheImpl`2.GetEnumerator">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheImpl`2.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheImpl`2.CreateEnumerator(System.Boolean,System.Int32)">
            <summary>
            Create real cache enumerator.
            </summary>
            <param name="loc">Local flag.</param>
            <param name="peekModes">Peek modes for local enumerator.</param>
            <returns>Cache enumerator.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheImpl`2.Unmarshal``1(Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheImpl`2.ReadInvokeAllResults``1(Apache.Ignite.Core.Impl.Binary.BinaryReader)">
            <summary>
            Reads results of InvokeAll operation.
            </summary>
            <typeparam name="T">The type of the result.</typeparam>
            <param name="reader">Stream.</param>
            <returns>Results of InvokeAll operation.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheImpl`2.ReadException(Apache.Ignite.Core.Impl.Binary.BinaryReader)">
            <summary>
            Reads the exception, either in binary wrapper form, or as a pair of strings.
            </summary>
            <param name="reader">The stream.</param>
            <returns>Exception.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheImpl`2.ReadGetAllDictionary(Apache.Ignite.Core.Impl.Binary.BinaryReader)">
            <summary>
            Read dictionary returned by GET_ALL operation.
            </summary>
            <param name="reader">Reader.</param>
            <returns>Dictionary.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheImpl`2.GetCacheResult(Apache.Ignite.Core.Impl.Binary.BinaryReader)">
            <summary>
            Gets the cache result.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheImpl`2.GetKeyNotFoundException">
            <summary>
            Throws the key not found exception.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheImpl`2.DoOutOp``1(Apache.Ignite.Core.Impl.Cache.CacheOp,``0)">
            <summary>
            Does the out op.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheImpl`2.DoOutOp``2(Apache.Ignite.Core.Impl.Cache.CacheOp,``0,``1)">
            <summary>
            Does the out op.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheImpl`2.DoOutOp``3(Apache.Ignite.Core.Impl.Cache.CacheOp,``0,``1,``2)">
            <summary>
            Does the out op.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheImpl`2.DoOutOp(Apache.Ignite.Core.Impl.Cache.CacheOp,System.Action{Apache.Ignite.Core.Impl.Binary.BinaryWriter})">
            <summary>
            Does the out op.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheImpl`2.DoOutInOpNullable(Apache.Ignite.Core.Impl.Cache.CacheOp,`0)">
            <summary>
            Does the out-in op.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheImpl`2.DoOutInOpNullable``2(Apache.Ignite.Core.Impl.Cache.CacheOp,``0,``1)">
            <summary>
            Does the out-in op.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheImpl`2.Enter(System.Int64)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheImpl`2.TryEnter(System.Int64,System.TimeSpan)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheImpl`2.Exit(System.Int64)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheImpl`2.Close(System.Int64)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheImpl`2.StartTx">
            <summary>
            Starts a transaction when applicable.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.CacheImpl`2.Ignite">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.CacheImpl`2.Name">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.CacheImpl`2.IsSkipStore">
            <summary>
            Skip store flag getter.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.CacheImpl`2.IsKeepBinary">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.CacheImpl`2.Item(`0)">
            <inheritDoc /> 
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Cache.CacheLock">
            <summary>
            Cache lock implementation.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.CacheLock._id">
            Unique lock ID.
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.CacheLock._lock">
            Cache lock. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.CacheLock._state">
            State (-1 for disposed, >=0 for number of currently executing methods). 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.CacheLock._counter">
            Current number of lock contenders. 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheLock.#ctor(System.Int64,Apache.Ignite.Core.Impl.Cache.ICacheLockInternal)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Impl.Cache.CacheLock"/> class.
            </summary>
            <param name="id">Lock id.</param>
            <param name="cacheLock">Cache lock.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheLock.Enter">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheLock.TryEnter">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheLock.TryEnter(System.TimeSpan)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheLock.Exit">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheLock.Dispose">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheLock.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Apache.Ignite.Core.Impl.Cache.CacheLock"/> class.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheLock.ThrowIfDisposed">
            <summary>
            Throws <see cref="T:System.ObjectDisposedException"/> if this instance has been disposed.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl">
            <summary>
            Cache metrics used to obtain statistics on cache.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl._cacheHits">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl._cacheHitPercentage">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl._cacheMisses">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl._cacheMissPercentage">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl._cacheGets">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl._cachePuts">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl._cacheRemovals">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl._cacheEvictions">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl._averageGetTime">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl._averagePutTime">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl._averageRemoveTime">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl._averageTxCommitTime">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl._averageTxRollbackTime">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl._cacheTxCommits">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl._cacheTxRollbacks">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl._cacheName">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl._offHeapGets">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl._offHeapPuts">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl._offHeapRemovals">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl._offHeapEvictions">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl._offHeapHits">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl._offHeapHitPercentage">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl._offHeapMisses">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl._offHeapMissPercentage">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl._offHeapEntriesCount">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl._offHeapPrimaryEntriesCount">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl._offHeapBackupEntriesCount">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl._offHeapAllocatedSize">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl._size">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl._keySize">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl._isEmpty">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl._dhtEvictQueueCurrentSize">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl._txThreadMapSize">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl._txXidMapSize">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl._txCommitQueueSize">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl._txPrepareQueueSize">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl._txStartVersionCountsSize">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl._txCommittedVersionsSize">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl._txRolledbackVersionsSize">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl._txDhtThreadMapSize">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl._txDhtXidMapSize">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl._txDhtCommitQueueSize">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl._txDhtPrepareQueueSize">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl._txDhtStartVersionCountsSize">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl._txDhtCommittedVersionsSize">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl._txDhtRolledbackVersionsSize">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl._isWriteBehindEnabled">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl._writeBehindFlushSize">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl._writeBehindFlushThreadCount">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl._writeBehindFlushFrequency">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl._writeBehindStoreBatchSize">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl._writeBehindTotalCriticalOverflowCount">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl._writeBehindCriticalOverflowCount">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl._writeBehindErrorRetryCount">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl._writeBehindBufferSize">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl._keyType">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl._valueType">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl._isStoreByValue">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl._isStatisticsEnabled">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl._isManagementEnabled">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl._isReadThrough">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl._isWriteThrough">
            
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl.#ctor(Apache.Ignite.Core.Binary.IBinaryRawReader)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl"/> class.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl.CacheHits">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl.CacheHitPercentage">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl.CacheMisses">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl.CacheMissPercentage">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl.CacheGets">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl.CachePuts">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl.CacheRemovals">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl.CacheEvictions">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl.AverageGetTime">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl.AveragePutTime">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl.AverageRemoveTime">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl.AverageTxCommitTime">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl.AverageTxRollbackTime">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl.CacheTxCommits">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl.CacheTxRollbacks">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl.CacheName">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl.OffHeapGets">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl.OffHeapPuts">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl.OffHeapRemovals">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl.OffHeapEvictions">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl.OffHeapHits">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl.OffHeapHitPercentage">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl.OffHeapMisses">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl.OffHeapMissPercentage">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl.OffHeapEntriesCount">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl.OffHeapPrimaryEntriesCount">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl.OffHeapBackupEntriesCount">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl.OffHeapAllocatedSize">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl.Size">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl.KeySize">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl.IsEmpty">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl.DhtEvictQueueCurrentSize">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl.TxThreadMapSize">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl.TxXidMapSize">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl.TxCommitQueueSize">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl.TxPrepareQueueSize">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl.TxStartVersionCountsSize">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl.TxCommittedVersionsSize">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl.TxRolledbackVersionsSize">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl.TxDhtThreadMapSize">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl.TxDhtXidMapSize">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl.TxDhtCommitQueueSize">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl.TxDhtPrepareQueueSize">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl.TxDhtStartVersionCountsSize">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl.TxDhtCommittedVersionsSize">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl.TxDhtRolledbackVersionsSize">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl.IsWriteBehindEnabled">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl.WriteBehindFlushSize">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl.WriteBehindFlushThreadCount">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl.WriteBehindFlushFrequency">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl.WriteBehindStoreBatchSize">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl.WriteBehindTotalCriticalOverflowCount">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl.WriteBehindCriticalOverflowCount">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl.WriteBehindErrorRetryCount">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl.WriteBehindBufferSize">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl.KeyType">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl.ValueType">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl.IsStoreByValue">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl.IsStatisticsEnabled">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl.IsManagementEnabled">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl.IsReadThrough">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.CacheMetricsImpl.IsWriteThrough">
            <inheritDoc /> 
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Cache.CacheOp">
            <summary>
            Cache opcodes.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Cache.Event.CacheEntryCreateEvent`2">
            <summary>
            Cache entry create event.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.Event.CacheEntryCreateEvent`2._key">
            Key.
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.Event.CacheEntryCreateEvent`2._val">
            Value.
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.Event.CacheEntryCreateEvent`2.#ctor(`0,`1)">
            <summary>
            Constructor.
            </summary>
            <param name="key">Key.</param>
            <param name="val">Value.</param>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.Event.CacheEntryCreateEvent`2.Key">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.Event.CacheEntryCreateEvent`2.Value">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.Event.CacheEntryCreateEvent`2.OldValue">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.Event.CacheEntryCreateEvent`2.HasValue">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.Event.CacheEntryCreateEvent`2.HasOldValue">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.Event.CacheEntryCreateEvent`2.EventType">
            <inheritdoc /> 
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Cache.Event.CacheEntryRemoveEvent`2">
            <summary>
            Cache entry remove event.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.Event.CacheEntryRemoveEvent`2._key">
            Key.
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.Event.CacheEntryRemoveEvent`2._oldVal">
            Old value.
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.Event.CacheEntryRemoveEvent`2.#ctor(`0,`1)">
            <summary>
            Constructor.
            </summary>
            <param name="key">Key.</param>
            <param name="oldVal">Old value.</param>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.Event.CacheEntryRemoveEvent`2.Key">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.Event.CacheEntryRemoveEvent`2.Value">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.Event.CacheEntryRemoveEvent`2.OldValue">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.Event.CacheEntryRemoveEvent`2.HasValue">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.Event.CacheEntryRemoveEvent`2.HasOldValue">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.Event.CacheEntryRemoveEvent`2.EventType">
            <inheritdoc /> 
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Cache.Event.CacheEntryUpdateEvent`2">
            <summary>
            Cache entry update event.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.Event.CacheEntryUpdateEvent`2._key">
            Key.
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.Event.CacheEntryUpdateEvent`2._val">
            Value.
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.Event.CacheEntryUpdateEvent`2._oldVal">
            Old value.
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.Event.CacheEntryUpdateEvent`2.#ctor(`0,`1,`1)">
            <summary>
            Constructor.
            </summary>
            <param name="key">Key.</param>
            <param name="oldVal">Old value.</param>
            <param name="val">Value.</param>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.Event.CacheEntryUpdateEvent`2.Key">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.Event.CacheEntryUpdateEvent`2.Value">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.Event.CacheEntryUpdateEvent`2.OldValue">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.Event.CacheEntryUpdateEvent`2.HasValue">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.Event.CacheEntryUpdateEvent`2.HasOldValue">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.Event.CacheEntryUpdateEvent`2.EventType">
            <inheritdoc /> 
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Cache.MutableCacheEntry`2">
            <summary>
            Represents a cache entry.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Cache.IMutableCacheEntryInternal">
            <summary>
            Internal non-generic representation of a mutable cache entry.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.IMutableCacheEntryInternal.Key">
            <summary>
            Gets the key.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.IMutableCacheEntryInternal.Value">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.IMutableCacheEntryInternal.Exists">
            <summary>
            Gets a value indicating whether cache entry exists.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.IMutableCacheEntryInternal.State">
            <summary>
            Gets the state indicating user operation on this instance.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.MutableCacheEntry`2.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Impl.Cache.MutableCacheEntry`2"/> class.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.MutableCacheEntry`2.#ctor(`0,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Impl.Cache.MutableCacheEntry`2"/> class.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.MutableCacheEntry`2.Remove">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.MutableCacheEntry`2.Key">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.MutableCacheEntry`2.Apache#Ignite#Core#Impl#Cache#IMutableCacheEntryInternal#Key">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.MutableCacheEntry`2.Value">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.MutableCacheEntry`2.Apache#Ignite#Core#Impl#Cache#IMutableCacheEntryInternal#Value">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.MutableCacheEntry`2.Exists">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.MutableCacheEntry`2.State">
            <inheritdoc /> 
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Cache.MutableCacheEntry">
            <summary>
            Mutable cache entry factory.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Cache.MutableCacheEntryState">
            <summary>
            Represents result of user operation on a mutable cache entry.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Cache.Query.Continuous.IContinuousQueryFilter">
            <summary>
            Continuous query filter interface. Required to hide generic nature of underliyng real filter.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.Query.Continuous.IContinuousQueryFilter.Evaluate(Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream)">
            <summary>
            Evaluate filter.
            </summary>
            <param name="stream">Stream.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.Query.Continuous.IContinuousQueryFilter.Inject(Apache.Ignite.Core.Impl.Ignite)">
            <summary>
            Inject grid.
            </summary>
            <param name="grid"></param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.Query.Continuous.IContinuousQueryFilter.Allocate">
            <summary>
            Allocate handle for the filter.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.Query.Continuous.IContinuousQueryFilter.Release">
            <summary>
            Release filter.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Cache.Query.Continuous.ContinuousQueryFilter`2">
            <summary>
            Continuous query filter generic implementation.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.Query.Continuous.ContinuousQueryFilter`2._filter">
            Actual filter. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.Query.Continuous.ContinuousQueryFilter`2._keepBinary">
            Keep binary flag. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.Query.Continuous.ContinuousQueryFilter`2._ignite">
            Ignite hosting the filter. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.Query.Continuous.ContinuousQueryFilter`2._hnd">
            GC handle. 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.Query.Continuous.ContinuousQueryFilter`2.#ctor(Apache.Ignite.Core.Cache.Event.ICacheEntryEventFilter{`0,`1},System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="filter">Actual filter.</param>
            <param name="keepBinary">Keep binary flag.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.Query.Continuous.ContinuousQueryFilter`2.Evaluate(Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.Query.Continuous.ContinuousQueryFilter`2.Inject(Apache.Ignite.Core.Impl.Ignite)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.Query.Continuous.ContinuousQueryFilter`2.Allocate">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.Query.Continuous.ContinuousQueryFilter`2.Release">
            <inheritDoc /> 
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Cache.Query.Continuous.ContinuousQueryFilterHolder">
            <summary>
            Continuous query remote filter holder. Wraps real filter into binary object,
            so that it can be passed over wire to another node.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.Query.Continuous.ContinuousQueryFilterHolder._filter">
            Filter object. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.Query.Continuous.ContinuousQueryFilterHolder._keepBinary">
            Keep binary flag. 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.Query.Continuous.ContinuousQueryFilterHolder.#ctor(System.Object,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="filter">Filter.</param>
            <param name="keepBinary">Keep binary flag.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.Query.Continuous.ContinuousQueryFilterHolder.WriteBinary(Apache.Ignite.Core.Binary.IBinaryWriter)">
            <summary>
            Writes this object to the given writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.Query.Continuous.ContinuousQueryFilterHolder.#ctor(Apache.Ignite.Core.Binary.IBinaryRawReader)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Impl.Cache.Query.Continuous.ContinuousQueryFilterHolder"/> class.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.Query.Continuous.ContinuousQueryFilterHolder.Filter">
            <summary>
            Filter.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.Query.Continuous.ContinuousQueryFilterHolder.KeepBinary">
            <summary>
            Keep binary flag.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Cache.Query.Continuous.IContinuousQueryHandleImpl">
            <summary>
            Continuous query handle interface.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.Query.Continuous.IContinuousQueryHandleImpl.Apply(Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream)">
            <summary>
            Process callback.
            </summary>
            <param name="stream">Stream.</param>
            <returns>Result.</returns>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Cache.Query.Continuous.ContinuousQueryHandleImpl`2">
            <summary>
            Continuous query handle.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.Query.Continuous.ContinuousQueryHandleImpl`2._marsh">
            Marshaller. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.Query.Continuous.ContinuousQueryHandleImpl`2._keepBinary">
            Keep binary flag. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.Query.Continuous.ContinuousQueryHandleImpl`2._lsnr">
            Real listener. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.Query.Continuous.ContinuousQueryHandleImpl`2._filter">
            Real filter. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.Query.Continuous.ContinuousQueryHandleImpl`2._hnd">
            GC handle. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.Query.Continuous.ContinuousQueryHandleImpl`2._nativeQry">
            Native query. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.Query.Continuous.ContinuousQueryHandleImpl`2._initialQueryCursor">
            Initial query cursor. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.Query.Continuous.ContinuousQueryHandleImpl`2._disposed">
            Disposed flag. 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.Query.Continuous.ContinuousQueryHandleImpl`2.#ctor(Apache.Ignite.Core.Cache.Query.Continuous.ContinuousQuery{`0,`1},Apache.Ignite.Core.Impl.Binary.Marshaller,System.Boolean,System.Func{System.Action{Apache.Ignite.Core.Impl.Binary.BinaryWriter},Apache.Ignite.Core.Impl.IPlatformTargetInternal},Apache.Ignite.Core.Cache.Query.QueryBase)">
            <summary>
            Constructor.
            </summary>
            <param name="qry">Query.</param>
            <param name="marsh">Marshaller.</param>
            <param name="keepBinary">Keep binary flag.</param>
            <param name="createTargetCb">The initialization callback.</param>
            <param name="initialQry">The initial query.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.Query.Continuous.ContinuousQueryHandleImpl`2.Apply(Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.Query.Continuous.ContinuousQueryHandleImpl`2.Evaluate(Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.Query.Continuous.ContinuousQueryHandleImpl`2.Inject(Apache.Ignite.Core.Impl.Ignite)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.Query.Continuous.ContinuousQueryHandleImpl`2.Allocate">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.Query.Continuous.ContinuousQueryHandleImpl`2.Release">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.Query.Continuous.ContinuousQueryHandleImpl`2.GetInitialQueryCursor">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.Query.Continuous.ContinuousQueryHandleImpl`2.Dispose">
            <inheritdoc /> 
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Cache.Query.Continuous.ContinuousQueryUtils">
            <summary>
            Utility methods for continuous queries.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.Query.Continuous.ContinuousQueryUtils.ReadEvent``2(Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream,Apache.Ignite.Core.Impl.Binary.Marshaller,System.Boolean)">
            <summary>
            Read single event.
            </summary>
            <param name="stream">Stream to read data from.</param>
            <param name="marsh">Marshaller.</param>
            <param name="keepBinary">Keep binary flag.</param>
            <returns>Event.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.Query.Continuous.ContinuousQueryUtils.ReadEvents``2(Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream,Apache.Ignite.Core.Impl.Binary.Marshaller,System.Boolean)">
            <summary>
            Read multiple events.
            </summary>
            <param name="stream">Stream.</param>
            <param name="marsh">Marshaller.</param>
            <param name="keepBinary">Keep binary flag.</param>
            <returns>Events.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.Query.Continuous.ContinuousQueryUtils.ReadEvent0``2(Apache.Ignite.Core.Impl.Binary.BinaryReader)">
            <summary>
            Read event.
            </summary>
            <param name="reader">Reader.</param>
            <returns>Event.</returns>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Cache.Query.FieldsQueryCursor`1">
            <summary>
            Cursor for entry-based queries.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.Query.FieldsQueryCursor`1._readerFunc">
            
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.Query.FieldsQueryCursor`1.#ctor(Apache.Ignite.Core.Impl.IPlatformTargetInternal,System.Boolean,System.Func{Apache.Ignite.Core.Binary.IBinaryRawReader,System.Int32,`0})">
            <summary>
            Constructor.
            </summary>
            <param name="target">Target.</param>
            <param name="keepBinary">Keep poratble flag.</param>
            <param name="readerFunc">The reader function.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.Query.FieldsQueryCursor`1.Read(Apache.Ignite.Core.Impl.Binary.BinaryReader)">
            <inheritdoc /> 
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Cache.Query.QueryCursor`2">
            <summary>
            Cursor for entry-based queries.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.Query.QueryCursor`2.#ctor(Apache.Ignite.Core.Impl.IPlatformTargetInternal,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="target">Target.</param>
            <param name="keepBinary">Keep poratble flag.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.Query.QueryCursor`2.Read(Apache.Ignite.Core.Impl.Binary.BinaryReader)">
            <inheritdoc /> 
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Cache.Store.CacheStoreInternal`2">
            <summary>
            Generic cache store wrapper.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.Store.CacheStoreInternal`2.OpLoadCache">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.Store.CacheStoreInternal`2.OpLoad">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.Store.CacheStoreInternal`2.OpLoadAll">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.Store.CacheStoreInternal`2.OpPut">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.Store.CacheStoreInternal`2.OpPutAll">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.Store.CacheStoreInternal`2.OpRmv">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.Store.CacheStoreInternal`2.OpRmvAll">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.Store.CacheStoreInternal`2.OpSesEnd">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.Store.CacheStoreInternal`2._convertBinary">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.Store.CacheStoreInternal`2._store">
            User store. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.Store.CacheStoreInternal`2._sesProxy">
            Session. 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.Store.CacheStoreInternal`2.#ctor(Apache.Ignite.Core.Cache.Store.ICacheStore{`0,`1},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Impl.Cache.Store.CacheStoreInternal`2"/> class.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.Store.CacheStoreInternal`2.Init(Apache.Ignite.Core.Impl.Ignite)">
            <summary>
            Initializes this instance with a grid.
            </summary>
            <param name="grid">Grid.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.Store.CacheStoreInternal`2.Invoke(Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream,Apache.Ignite.Core.Impl.Ignite)">
            <summary>
            Invokes a store operation.
            </summary>
            <param name="stream">Input stream.</param>
            <param name="grid">Grid.</param>
            <returns>Invocation result.</returns>
            <exception cref="T:Apache.Ignite.Core.Common.IgniteException">Invalid operation type:  + opType</exception>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.Store.CacheStoreInternal`2.ReadPairs(Apache.Ignite.Core.Binary.IBinaryRawReader)">
            <summary>
            Reads key-value pairs.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.Store.CacheStoreInternal`2.ReadKeys(Apache.Ignite.Core.Binary.IBinaryRawReader)">
            <summary>
            Reads the keys.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.Store.CacheStoreInternal`2.ReadAllKeys(Apache.Ignite.Core.Binary.IBinaryRawReader)">
            <summary>
            Reads the keys.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Cache.Store.CacheStoreSession">
            <summary>
            Store session implementation.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.Store.CacheStoreSession._props">
            Properties. 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.Store.CacheStoreSession.Clear">
            <summary>
            Clear session state.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.Store.CacheStoreSession.CacheName">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.Store.CacheStoreSession.Properties">
            <inheritdoc /> 
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Cache.Store.CacheStoreSessionProxy">
            <summary>
            Store session proxy.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cache.Store.CacheStoreSessionProxy._target">
            Session. 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.Store.CacheStoreSessionProxy.SetSession(Apache.Ignite.Core.Impl.Cache.Store.CacheStoreSession)">
            <summary>
            Set thread-bound session.
            </summary>
            <param name="ses">Session.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cache.Store.CacheStoreSessionProxy.ClearSession">
            <summary>
            Clear thread-bound session.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.Store.CacheStoreSessionProxy.CacheName">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cache.Store.CacheStoreSessionProxy.Properties">
            <inheritdoc /> 
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Cluster.ClusterGroupImpl">
            <summary>
            Ignite projection implementation.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cluster.ClusterGroupImpl.AttrPlatform">
            Attribute: platform. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cluster.ClusterGroupImpl.Platform">
            Platform. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cluster.ClusterGroupImpl.TopVerInit">
            Initial topver; invalid from Java perspective, so update will be triggered when this value is met. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cluster.ClusterGroupImpl.OpForAttribute">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cluster.ClusterGroupImpl.OpForCache">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cluster.ClusterGroupImpl.OpForClient">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cluster.ClusterGroupImpl.OpForData">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cluster.ClusterGroupImpl.OpForHost">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cluster.ClusterGroupImpl.OpForNodeIds">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cluster.ClusterGroupImpl.OpMetrics">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cluster.ClusterGroupImpl.OpMetricsFiltered">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cluster.ClusterGroupImpl.OpNodeMetrics">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cluster.ClusterGroupImpl.OpNodes">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cluster.ClusterGroupImpl.OpPingNode">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cluster.ClusterGroupImpl.OpTopology">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cluster.ClusterGroupImpl.OpForRemotes">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cluster.ClusterGroupImpl.OpForDaemons">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cluster.ClusterGroupImpl.OpForRandom">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cluster.ClusterGroupImpl.OpForOldest">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cluster.ClusterGroupImpl.OpForYoungest">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cluster.ClusterGroupImpl.OpResetMetrics">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cluster.ClusterGroupImpl.OpForServers">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cluster.ClusterGroupImpl.OpCacheMetrics">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cluster.ClusterGroupImpl.OpResetLostPartitions">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cluster.ClusterGroupImpl.OpMemoryMetrics">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cluster.ClusterGroupImpl.OpMemoryMetricsByName">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cluster.ClusterGroupImpl.OpSetActive">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cluster.ClusterGroupImpl.OpIsActive">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cluster.ClusterGroupImpl.OpGetPersistentStoreMetrics">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cluster.ClusterGroupImpl.OpGetCompute">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cluster.ClusterGroupImpl.OpGetMessaging">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cluster.ClusterGroupImpl.OpGetEvents">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cluster.ClusterGroupImpl.OpGetServices">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cluster.ClusterGroupImpl.OpDataRegionMetrics">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cluster.ClusterGroupImpl.OpDataRegionMetricsByName">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cluster.ClusterGroupImpl.OpDataStorageMetrics">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cluster.ClusterGroupImpl._ignite">
            Initial Ignite instance. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cluster.ClusterGroupImpl._pred">
            Predicate. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cluster.ClusterGroupImpl._topVer">
            Topology version. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cluster.ClusterGroupImpl._nodes">
            Nodes for the given topology version. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cluster.ClusterGroupImpl._comp">
            Compute. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cluster.ClusterGroupImpl._msg">
            Messaging. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cluster.ClusterGroupImpl._events">
            Events. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cluster.ClusterGroupImpl._services">
            Services. 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cluster.ClusterGroupImpl.#ctor(Apache.Ignite.Core.Impl.IPlatformTargetInternal,System.Func{Apache.Ignite.Core.Cluster.IClusterNode,System.Boolean})">
            <summary>
            Constructor.
            </summary>
            <param name="target">Target.</param>
            <param name="pred">Predicate.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cluster.ClusterGroupImpl.GetCompute">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cluster.ClusterGroupImpl.CreateCompute">
            <summary>
            Creates the compute.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cluster.ClusterGroupImpl.ForNodes(System.Collections.Generic.IEnumerable{Apache.Ignite.Core.Cluster.IClusterNode})">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cluster.ClusterGroupImpl.ForNodes(Apache.Ignite.Core.Cluster.IClusterNode[])">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cluster.ClusterGroupImpl.ForNodeIds(System.Collections.Generic.IEnumerable{System.Guid})">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cluster.ClusterGroupImpl.ForNodeIds(System.Guid[])">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cluster.ClusterGroupImpl.ForNodeIds0``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Guid})">
            <summary>
            Internal routine to get projection for specific node IDs.
            </summary>
            <param name="items">Items.</param>
            <param name="func">Function to transform item to Guid (optional).</param>
            <returns></returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cluster.ClusterGroupImpl.ForPredicate(System.Func{Apache.Ignite.Core.Cluster.IClusterNode,System.Boolean})">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cluster.ClusterGroupImpl.ForAttribute(System.String,System.String)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cluster.ClusterGroupImpl.ForCacheNodes(System.String,System.Int32)">
            <summary>
            Creates projection with a specified op.
            </summary>
            <param name="name">Cache name to include into projection.</param>
            <param name="op">Operation id.</param>
            <returns>
            Projection over nodes that have specified cache running.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cluster.ClusterGroupImpl.ForCacheNodes(System.String)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cluster.ClusterGroupImpl.ForDataNodes(System.String)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cluster.ClusterGroupImpl.ForClientNodes(System.String)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cluster.ClusterGroupImpl.ForRemotes">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cluster.ClusterGroupImpl.ForDaemons">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cluster.ClusterGroupImpl.ForHost(Apache.Ignite.Core.Cluster.IClusterNode)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cluster.ClusterGroupImpl.ForRandom">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cluster.ClusterGroupImpl.ForOldest">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cluster.ClusterGroupImpl.ForYoungest">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cluster.ClusterGroupImpl.ForServers">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cluster.ClusterGroupImpl.ForDotNet">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cluster.ClusterGroupImpl.GetNodes">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cluster.ClusterGroupImpl.GetNode(System.Guid)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cluster.ClusterGroupImpl.GetNode">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cluster.ClusterGroupImpl.GetMetrics">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cluster.ClusterGroupImpl.GetMessaging">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cluster.ClusterGroupImpl.CreateMessaging">
            <summary>
            Creates the messaging.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cluster.ClusterGroupImpl.GetEvents">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cluster.ClusterGroupImpl.CreateEvents">
            <summary>
            Creates the events.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cluster.ClusterGroupImpl.GetServices">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cluster.ClusterGroupImpl.CreateServices">
            <summary>
            Creates the services.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cluster.ClusterGroupImpl.PingNode(System.Guid)">
            <summary>
            Pings a remote node.
            </summary>
            <param name="nodeId">ID of a node to ping.</param>
            <returns>True if node for a given ID is alive, false otherwise.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cluster.ClusterGroupImpl.RefreshClusterNodeMetrics(System.Guid,System.Int64)">
            <summary>
            Refresh cluster node metrics.
            </summary>
            <param name="nodeId">Node</param>
            <param name="lastUpdateTime"></param>
            <returns></returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cluster.ClusterGroupImpl.Topology(System.Int64)">
            <summary>
            Gets a topology by version. Returns null if topology history storage doesn't contain 
            specified topology version (history currently keeps the last 1000 snapshots).
            </summary>
            <param name="version">Topology version.</param>
            <returns>Collection of Ignite nodes which represented by specified topology version, 
            if it is present in history storage, {@code null} otherwise.</returns>
            <exception cref="T:Apache.Ignite.Core.Common.IgniteException">If underlying SPI implementation does not support 
            topology history. Currently only {@link org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi}
            supports topology history.</exception>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cluster.ClusterGroupImpl.UpdateTopology(System.Int64,System.Collections.Generic.List{Apache.Ignite.Core.Cluster.IClusterNode})">
            <summary>
            Update topology.
            </summary>
            <param name="newTopVer">New topology version.</param>
            <param name="newNodes">New nodes.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cluster.ClusterGroupImpl.NodesNoRefresh">
            <summary>
            Get current nodes without refreshing the topology.
            </summary>
            <returns>Current nodes.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cluster.ClusterGroupImpl.ResetMetrics">
            <summary>
            Resets the metrics.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cluster.ClusterGroupImpl.ResetLostPartitions(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Resets the lost partitions.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cluster.ClusterGroupImpl.GetCacheMetrics(System.String)">
            <summary>
            Gets the cache metrics within this cluster group.
            </summary>
            <param name="cacheName">Name of the cache.</param>
            <returns>Metrics.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cluster.ClusterGroupImpl.GetMemoryMetrics">
            <summary>
            Gets the memory metrics.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cluster.ClusterGroupImpl.GetMemoryMetrics(System.String)">
            <summary>
            Gets the memory metrics.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cluster.ClusterGroupImpl.GetDataRegionMetrics">
            <summary>
            Gets the data region metrics.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cluster.ClusterGroupImpl.GetDataRegionMetrics(System.String)">
            <summary>
            Gets the data region metrics.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cluster.ClusterGroupImpl.GetDataStorageMetrics">
            <summary>
            Gets the data storage metrics.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cluster.ClusterGroupImpl.SetActive(System.Boolean)">
            <summary>
            Changes Ignite grid state to active or inactive.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cluster.ClusterGroupImpl.IsActive">
            <summary>
            Determines whether this grid is in active state.
            </summary>
            <returns>
              <c>true</c> if the grid is active; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cluster.ClusterGroupImpl.GetPersistentStoreMetrics">
            <summary>
            Gets the persistent store metrics.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cluster.ClusterGroupImpl.GetClusterGroup(Apache.Ignite.Core.Impl.IPlatformTargetInternal)">
            <summary>
            Creates new Cluster Group from given native projection.
            </summary>
            <param name="prj">Native projection.</param>
            <returns>New cluster group.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cluster.ClusterGroupImpl.RefreshNodes">
            <summary>
            Refresh projection nodes.
            </summary>
            <returns>Nodes.</returns>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cluster.ClusterGroupImpl.Ignite">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cluster.ClusterGroupImpl.Predicate">
            <summary>
            Predicate (if any).
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cluster.ClusterGroupImpl.TopologyVersion">
            <summary>
            Topology version.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Cluster.ClusterMetricsImpl">
            <summary>
            Cluster metrics implementation.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cluster.ClusterMetricsImpl.#ctor(Apache.Ignite.Core.Binary.IBinaryRawReader)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Impl.Cluster.ClusterMetricsImpl"/> class.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cluster.ClusterMetricsImpl.LastUpdateTimeRaw">
            <summary>
            Last update time in raw format.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cluster.ClusterMetricsImpl.LastUpdateTime">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cluster.ClusterMetricsImpl.MaximumActiveJobs">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cluster.ClusterMetricsImpl.CurrentActiveJobs">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cluster.ClusterMetricsImpl.AverageActiveJobs">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cluster.ClusterMetricsImpl.MaximumWaitingJobs">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cluster.ClusterMetricsImpl.CurrentWaitingJobs">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cluster.ClusterMetricsImpl.AverageWaitingJobs">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cluster.ClusterMetricsImpl.MaximumRejectedJobs">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cluster.ClusterMetricsImpl.CurrentRejectedJobs">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cluster.ClusterMetricsImpl.AverageRejectedJobs">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cluster.ClusterMetricsImpl.TotalRejectedJobs">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cluster.ClusterMetricsImpl.MaximumCancelledJobs">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cluster.ClusterMetricsImpl.CurrentCancelledJobs">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cluster.ClusterMetricsImpl.AverageCancelledJobs">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cluster.ClusterMetricsImpl.TotalCancelledJobs">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cluster.ClusterMetricsImpl.TotalExecutedJobs">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cluster.ClusterMetricsImpl.MaximumJobWaitTime">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cluster.ClusterMetricsImpl.CurrentJobWaitTime">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cluster.ClusterMetricsImpl.AverageJobWaitTime">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cluster.ClusterMetricsImpl.MaximumJobExecuteTime">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cluster.ClusterMetricsImpl.CurrentJobExecuteTime">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cluster.ClusterMetricsImpl.AverageJobExecuteTime">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cluster.ClusterMetricsImpl.TotalExecutedTasks">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cluster.ClusterMetricsImpl.TotalBusyTime">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cluster.ClusterMetricsImpl.TotalIdleTime">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cluster.ClusterMetricsImpl.CurrentIdleTime">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cluster.ClusterMetricsImpl.BusyTimePercentage">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cluster.ClusterMetricsImpl.IdleTimePercentage">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cluster.ClusterMetricsImpl.TotalCpus">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cluster.ClusterMetricsImpl.CurrentCpuLoad">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cluster.ClusterMetricsImpl.AverageCpuLoad">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cluster.ClusterMetricsImpl.CurrentGcCpuLoad">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cluster.ClusterMetricsImpl.HeapMemoryInitialized">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cluster.ClusterMetricsImpl.HeapMemoryUsed">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cluster.ClusterMetricsImpl.HeapMemoryCommitted">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cluster.ClusterMetricsImpl.HeapMemoryMaximum">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cluster.ClusterMetricsImpl.HeapMemoryTotal">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cluster.ClusterMetricsImpl.NonHeapMemoryInitialized">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cluster.ClusterMetricsImpl.NonHeapMemoryUsed">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cluster.ClusterMetricsImpl.NonHeapMemoryCommitted">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cluster.ClusterMetricsImpl.NonHeapMemoryMaximum">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cluster.ClusterMetricsImpl.NonHeapMemoryTotal">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cluster.ClusterMetricsImpl.Uptime">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cluster.ClusterMetricsImpl.StartTime">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cluster.ClusterMetricsImpl.NodeStartTime">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cluster.ClusterMetricsImpl.CurrentThreadCount">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cluster.ClusterMetricsImpl.MaximumThreadCount">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cluster.ClusterMetricsImpl.TotalStartedThreadCount">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cluster.ClusterMetricsImpl.CurrentDaemonThreadCount">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cluster.ClusterMetricsImpl.LastDataVersion">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cluster.ClusterMetricsImpl.SentMessagesCount">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cluster.ClusterMetricsImpl.SentBytesCount">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cluster.ClusterMetricsImpl.ReceivedMessagesCount">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cluster.ClusterMetricsImpl.ReceivedBytesCount">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cluster.ClusterMetricsImpl.OutboundMessagesQueueSize">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cluster.ClusterMetricsImpl.TotalNodes">
            <inheritDoc /> 
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Cluster.ClusterNodeImpl">
            <summary>
            Cluster node implementation.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cluster.ClusterNodeImpl._id">
            Node ID. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cluster.ClusterNodeImpl._attrs">
            Attributes. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cluster.ClusterNodeImpl._addrs">
            Addresses. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cluster.ClusterNodeImpl._hosts">
            Hosts. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cluster.ClusterNodeImpl._order">
            Order. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cluster.ClusterNodeImpl._isLocal">
            Local flag. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cluster.ClusterNodeImpl._isDaemon">
            Daemon flag. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cluster.ClusterNodeImpl._isClient">
            Client flag. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cluster.ClusterNodeImpl._metrics">
            Metrics. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Cluster.ClusterNodeImpl._igniteRef">
            Ignite reference. 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cluster.ClusterNodeImpl.#ctor(Apache.Ignite.Core.Binary.IBinaryRawReader)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Impl.Cluster.ClusterNodeImpl"/> class.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cluster.ClusterNodeImpl.GetAttribute``1(System.String)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cluster.ClusterNodeImpl.TryGetAttribute``1(System.String,``0@)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cluster.ClusterNodeImpl.GetAttributes">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cluster.ClusterNodeImpl.GetMetrics">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cluster.ClusterNodeImpl.ToString">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cluster.ClusterNodeImpl.Equals(System.Object)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cluster.ClusterNodeImpl.GetHashCode">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Cluster.ClusterNodeImpl.Init(Apache.Ignite.Core.Impl.Ignite)">
            <summary>
            Initializes this instance with a grid.
            </summary>
            <param name="grid">The grid.</param>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cluster.ClusterNodeImpl.Id">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cluster.ClusterNodeImpl.Addresses">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cluster.ClusterNodeImpl.HostNames">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cluster.ClusterNodeImpl.Order">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cluster.ClusterNodeImpl.IsLocal">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cluster.ClusterNodeImpl.IsDaemon">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Cluster.ClusterNodeImpl.IsClient">
            <inheritDoc /> 
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Collections.CollectionExtensions">
            <summary>
            Collection extension methods.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Collections.CollectionExtensions.AsReadOnly``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Returns a read-only System.Collections.Generic.IDictionary{K, V} wrapper for the current collection.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Collections.CollectionExtensions.AsReadOnly``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Returns a read-only System.Collections.Generic.ICollection{K, V} wrapper for the current collection.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Collections.MultiValueDictionary`2">
            <summary>
            Multiple-values-per-key dictionary.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Collections.MultiValueDictionary`2._dict">
            Inner dictionary 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Collections.MultiValueDictionary`2.Add(`0,`1)">
            <summary>
            Adds a value.
            </summary>
            <param name="key">The key.</param>
            <param name="val">The value.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Collections.MultiValueDictionary`2.Remove(`0,`1)">
            <summary>
            Removes the specified value for the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="val">The value.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Collections.MultiValueDictionary`2.TryRemove(`0,`1@)">
            <summary>
            Removes the last value for the specified key and returns it.
            </summary>
            <param name="key">The key.</param>
            <param name="val">The value.</param>
            <returns>True if value has been found for specified key; otherwise false.</returns>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Collections.ReadOnlyCollection`1">
            <summary>
            Read-only wrapper over ICollection{T}.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Collections.ReadOnlyCollection`1._col">
            Wrapped collection. 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Collections.ReadOnlyCollection`1.#ctor(System.Collections.Generic.ICollection{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Impl.Collections.ReadOnlyCollection`1"/> class.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Collections.ReadOnlyCollection`1.GetEnumerator">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Collections.ReadOnlyCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Collections.ReadOnlyCollection`1.Add(`0)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Collections.ReadOnlyCollection`1.Clear">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Collections.ReadOnlyCollection`1.Contains(`0)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Collections.ReadOnlyCollection`1.CopyTo(`0[],System.Int32)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Collections.ReadOnlyCollection`1.Remove(`0)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Collections.ReadOnlyCollection`1.GetReadOnlyException">
            <summary>
            Gets the readonly exception.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Collections.ReadOnlyCollection`1.Count">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Collections.ReadOnlyCollection`1.IsReadOnly">
            <inheritdoc /> 
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Collections.ReadOnlyDictionary`2">
            <summary>
            Read-only wrapper over IDictionary{K, V}.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Collections.ReadOnlyDictionary`2._dict">
            Inner dict. 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Collections.ReadOnlyDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Impl.Collections.ReadOnlyDictionary`2"/> class.
            </summary>
            <param name="dict">The dictionary to wrap.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Collections.ReadOnlyDictionary`2.GetEnumerator">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Collections.ReadOnlyDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Collections.ReadOnlyDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Collections.ReadOnlyDictionary`2.Clear">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Collections.ReadOnlyDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Collections.ReadOnlyDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Collections.ReadOnlyDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Collections.ReadOnlyDictionary`2.ContainsKey(`0)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Collections.ReadOnlyDictionary`2.Add(`0,`1)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Collections.ReadOnlyDictionary`2.Remove(`0)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Collections.ReadOnlyDictionary`2.TryGetValue(`0,`1@)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Collections.ReadOnlyDictionary`2.GetReadonlyException">
            <summary>
            Gets the readonly exception.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Collections.ReadOnlyDictionary`2.Count">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Collections.ReadOnlyDictionary`2.IsReadOnly">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Collections.ReadOnlyDictionary`2.Item(`0)">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Collections.ReadOnlyDictionary`2.Keys">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Collections.ReadOnlyDictionary`2.Values">
            <inheritdoc /> 
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Common.ObjectStringConverter">
            <summary>
            Object-string converter.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Common.ObjectStringConverter.Instance">
            <summary>
            Default instance.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Common.ObjectStringConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, 
            using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="sourceType">A <see cref="T:System.Type"/> that represents the type you want to convert from.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Common.ObjectStringConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="destinationType">
            A <see cref="T:System.Type"/> that represents the type you want to convert to.
            </param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Common.ObjectStringConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, 
            using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Common.ObjectStringConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">
            A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.
            </param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="destinationType">
            The <see cref="T:System.Type"/> to convert the <paramref name="value"/> parameter to.
            </param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Common.BooleanLowerCaseConverter">
            <summary>
            Bollean converter that returns lower-case strings, for XML serialization.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Common.BooleanLowerCaseConverter.Instance">
            <summary>
            Default instance.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Common.BooleanLowerCaseConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">
            A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.
            </param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="destinationType">
            The <see cref="T:System.Type"/> to convert the <paramref name="value"/> parameter to.
            </param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Common.CancelledTask`1">
            <summary>
            Provides cancelled tasks of given type.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Common.CancelledTask`1.TaskCompletionSource">
            Task source. 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Common.CancelledTask`1.#cctor">
            <summary>
            Initializes the <see cref="T:Apache.Ignite.Core.Impl.Common.CancelledTask`1"/> class.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Common.CancelledTask`1.Instance">
            <summary>
            Gets the cancelled task.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Common.Classpath">
            <summary>
            Classpath resolver.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Common.Classpath.EnvIgniteNativeTestClasspath">
            Environment variable: whether to set test classpath or not. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Common.Classpath.ClasspathPrefix">
            Classpath prefix. 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Common.Classpath.CreateClasspath(Apache.Ignite.Core.IgniteConfiguration,System.Boolean,Apache.Ignite.Core.Log.ILogger)">
            <summary>
            Creates classpath from the given configuration, or default classpath if given config is null.
            </summary>
            <param name="cfg">The configuration.</param>
            <param name="forceTestClasspath">Append test directories even if
            <see cref="F:Apache.Ignite.Core.Impl.Common.Classpath.EnvIgniteNativeTestClasspath"/> is not set.</param>
            <param name="log">The log.</param>
            <returns>
            Classpath string.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Common.Classpath.AppendHomeClasspath(System.String,System.Boolean,System.Text.StringBuilder)">
            <summary>
            Appends classpath from home directory, if it is defined.
            </summary>
            <param name="ggHome">The home dir.</param>
            <param name="forceTestClasspath">Append test directories even if
                <see cref="F:Apache.Ignite.Core.Impl.Common.Classpath.EnvIgniteNativeTestClasspath"/> is not set.</param>
            <param name="cpStr">The classpath string.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Common.Classpath.AppendTestClasses(System.String,System.Text.StringBuilder)">
            <summary>
            Append target (compile) directories to classpath (for testing purposes only).
            </summary>
            <param name="path">Path</param>
            <param name="cp">Classpath builder.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Common.Classpath.AppendTestClasses0(System.String,System.Text.StringBuilder)">
            <summary>
            Internal routine to append classes and jars from eploded directory.
            </summary>
            <param name="path">Path.</param>
            <param name="cp">Classpath builder.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Common.Classpath.AppendJars(System.String,System.Text.StringBuilder)">
            <summary>
            Append jars from the given path.
            </summary>
            <param name="path">Path.</param>
            <param name="cpStr">Classpath string builder.</param>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Common.CopyOnWriteConcurrentDictionary`2">
            <summary>
            Concurrent dictionary with CopyOnWrite mechanism inside. 
            Good for frequent reads / infrequent writes scenarios.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Common.CopyOnWriteConcurrentDictionary`2._dict">
            
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Common.CopyOnWriteConcurrentDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="val">The value.</param>
            <returns>true if the dictionary contains an element with the specified key; otherwise, false.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Common.CopyOnWriteConcurrentDictionary`2.GetOrAdd(`0,System.Func{`0,`1})">
            <summary>
            Adds a key/value pair if the key does not already exist.
            </summary>
            <param name="key">The key.</param>
            <param name="valueFactory">The function used to generate a value for the key.</param>
            <returns>The value for the key.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Common.CopyOnWriteConcurrentDictionary`2.Set(`0,`1)">
            <summary>
            Sets a value for the key unconditionally.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Common.CopyOnWriteConcurrentDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the specified key exists in the dictionary.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Common.DelegateConverter">
            <summary>
            Converts generic and non-generic delegates.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Common.DelegateConverter.DefaultMethodName">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Common.DelegateConverter.ReadObjectMethod">
            
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Common.DelegateConverter.CompileFunc(System.Type)">
            <summary>
            Compiles a function without arguments.
            </summary>
            <param name="targetType">Type of the target.</param>
            <returns>Compiled function that calls specified method on specified target.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Common.DelegateConverter.CompileFunc``1(System.Type,System.Type[],System.Boolean[],System.String)">
            <summary>
            Compiles a function with arbitrary number of arguments.
            </summary>
            <typeparam name="T">Resulting delegate type.</typeparam>
            <param name="targetType">Type of the target.</param>
            <param name="argTypes">Argument types.</param>
            <param name="convertToObject">
            Flags that indicate whether func params and/or return value should be converted from/to object.
            </param>
            <param name="methodName">Name of the method.</param>
            <returns>
            Compiled function that calls specified method on specified target.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Common.DelegateConverter.CompileFunc``1(System.Type,System.Reflection.MethodInfo,System.Type[],System.Boolean[])">
            <summary>
            Compiles a function with arbitrary number of arguments.
            </summary>
            <typeparam name="T">Resulting delegate type.</typeparam>
            <param name="method">Method.</param>
            <param name="targetType">Type of the target.</param>
            <param name="argTypes">Argument types.</param>
            <param name="convertToObject">
            Flags that indicate whether func params and/or return value should be converted from/to object.
            </param>
            <returns>
            Compiled function that calls specified method on specified target.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Common.DelegateConverter.CompileFuncFromArray(System.Reflection.MethodInfo)">
            <summary>
            Compiles a function with a single object[] argument which maps array items to actual arguments.
            </summary>
            <param name="method">Method.</param>
            <returns>
            Compiled function that calls specified method.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Common.DelegateConverter.CompileCtor``1(System.Reflection.ConstructorInfo,System.Type[],System.Boolean,System.Boolean)">
            <summary>
            Compiles a generic ctor with arbitrary number of arguments.
            </summary>
            <typeparam name="T">Result func type.</typeparam>
            <param name="ctor">Contructor info.</param>
            <param name="argTypes">Argument types.</param>
            <param name="convertResultToObject">
            Flag that indicates whether ctor return value should be converted to object.</param>
            <param name="convertParamsFromObject">
            Flag that indicates whether ctor args are object and should be converted to concrete type.</param>
            <returns>
            Compiled generic constructor.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Common.DelegateConverter.CompileUninitializedObjectCtor``1(System.Reflection.ConstructorInfo,System.Type[])">
            <summary>
            Compiles a generic ctor with arbitrary number of arguments
            that takes an uninitialized object as a first arguments.
            </summary>
            <typeparam name="T">Result func type.</typeparam>
            <param name="ctor">Contructor info.</param>
            <param name="argTypes">Argument types.</param>
            <returns>
            Compiled generic constructor.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Common.DelegateConverter.CompileCtor``1(System.Type,System.Type[],System.Boolean)">
            <summary>
            Compiles a generic ctor with arbitrary number of arguments.
            </summary>
            <typeparam name="T">Result func type.</typeparam>
            <param name="type">Type to be created by ctor.</param>
            <param name="argTypes">Argument types.</param>
            <param name="convertResultToObject">
            Flag that indicates whether ctor return value should be converted to object.
            </param>
            <returns>
            Compiled generic constructor.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Common.DelegateConverter.CompileCtor``1(System.Reflection.ConstructorInfo,System.Func{System.Type,System.Reflection.ConstructorInfo})">
            <summary>
            Compiles a contructor that reads all arguments from a binary reader.
            </summary>
            <typeparam name="T">Result type</typeparam>
            <param name="ctor">The ctor.</param>
            <param name="innerCtorFunc">Function to retrieve reading constructor for an argument. 
            Can be null or return null, in this case the argument will be read directly via ReadObject.</param>
            <returns></returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Common.DelegateConverter.GetConstructorExpression(System.Reflection.ConstructorInfo,System.Func{System.Type,System.Reflection.ConstructorInfo},System.Linq.Expressions.Expression,System.Type)">
            <summary>
            Gets the constructor expression.
            </summary>
            <param name="ctor">The ctor.</param>
            <param name="innerCtorFunc">The inner ctor function.</param>
            <param name="readerParam">The reader parameter.</param>
            <param name="resultType">Type of the result.</param>
            <returns>
            Ctor call expression.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Common.DelegateConverter.CompileFieldSetter(System.Reflection.FieldInfo)">
            <summary>
            Compiles the field setter.
            </summary>
            <param name="field">The field.</param>
            <returns>Compiled field setter.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Common.DelegateConverter.CompilePropertySetter(System.Reflection.PropertyInfo)">
            <summary>
            Compiles the property setter.
            </summary>
            <param name="prop">The property.</param>
            <returns>Compiled property setter.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Common.DelegateConverter.CompilePropertyGetter(System.Reflection.PropertyInfo)">
            <summary>
            Compiles the property setter.
            </summary>
            <param name="prop">The property.</param>
            <returns>Compiled property setter.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Common.DelegateConverter.CompileFieldGetter(System.Reflection.FieldInfo)">
            <summary>
            Compiles the property setter.
            </summary>
            <param name="field">The field.</param>
            <returns>Compiled property setter.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Common.DelegateConverter.GetWriteFieldMethod(System.Reflection.FieldInfo)">
            <summary>
            Gets a method to write a field (including private and readonly).
            NOTE: Expression Trees can't write readonly fields.
            </summary>
            <param name="field">The field.</param>
            <returns>Resulting MethodInfo.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Common.DelegateConverter.GetConstructorExact(System.Type,System.Type[])">
            <summary>
            Gets the constructor with exactly matching signature.
            <para />
            Type.GetConstructor matches compatible ones (i.e. taking object instead of concrete type).
            </summary>
            <param name="type">The type.</param>
            <param name="types">The argument types.</param>
            <returns>Constructor info.</returns>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Common.DelegateTypeDescriptor">
            <summary>
            Type descriptor with precompiled delegates for known methods.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Common.DelegateTypeDescriptor.Descriptors">
            Cached descriptors. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Common.DelegateTypeDescriptor._computeOutFunc">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Common.DelegateTypeDescriptor._computeFunc">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Common.DelegateTypeDescriptor._eventFilter">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Common.DelegateTypeDescriptor._cacheEntryFilter">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Common.DelegateTypeDescriptor._cacheEntryProcessor">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Common.DelegateTypeDescriptor._messageLsnr">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Common.DelegateTypeDescriptor._computeJobExecute">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Common.DelegateTypeDescriptor._computeJobCancel">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Common.DelegateTypeDescriptor._streamReceiver">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Common.DelegateTypeDescriptor._streamTransformerCtor">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Common.DelegateTypeDescriptor._continuousQueryFilterCtor">
            
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Common.DelegateTypeDescriptor.GetComputeOutFunc(System.Type)">
            <summary>
            Gets the <see cref="T:Apache.Ignite.Core.Compute.IComputeFunc`1"/> invocator.
            </summary>
            <param name="type">Type.</param>
            <returns>Precompiled invocator delegate.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Common.DelegateTypeDescriptor.GetComputeFunc(System.Type)">
            <summary>
            Gets the <see cref="T:Apache.Ignite.Core.Compute.IComputeFunc`2"/> invocator.
            </summary>
            <param name="type">Type.</param>
            <returns>Precompiled invocator delegate.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Common.DelegateTypeDescriptor.GetEventFilter(System.Type)">
            <summary>
            Gets the <see cref="T:Apache.Ignite.Core.Events.IEventFilter`1"/> invocator.
            </summary>
            <param name="type">Type.</param>
            <returns>Precompiled invocator delegate.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Common.DelegateTypeDescriptor.GetCacheEntryFilter(System.Type)">
            <summary>
            Gets the <see cref="T:Apache.Ignite.Core.Cache.ICacheEntryFilter`2"/> invocator.
            </summary>
            <param name="type">Type.</param>
            <returns>Precompiled invocator delegate.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Common.DelegateTypeDescriptor.GetCacheEntryProcessor(System.Type)">
            <summary>
            Gets the <see cref="T:Apache.Ignite.Core.Cache.ICacheEntryProcessor`4"/> invocator.
            </summary>
            <param name="type">Type.</param>
            <returns>Precompiled invocator delegate.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Common.DelegateTypeDescriptor.GetCacheEntryProcessorTypes(System.Type)">
            <summary>
            Gets key and value types for the <see cref="T:Apache.Ignite.Core.Cache.ICacheEntryProcessor`4"/>.
            </summary>
            <param name="type">Type.</param>
            <returns>Key and value types.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Common.DelegateTypeDescriptor.GetMessageListener(System.Type)">
            <summary>
            Gets the <see cref="T:Apache.Ignite.Core.Messaging.IMessageListener`1"/> invocator.
            </summary>
            <param name="type">Type.</param>
            <returns>Precompiled invocator delegate.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Common.DelegateTypeDescriptor.GetComputeJob(System.Type,System.Func{System.Object,System.Object}@,System.Action{System.Object}@)">
            <summary>
            Gets the <see cref="M:Apache.Ignite.Core.Compute.IComputeJob`1.Execute"/> and <see cref="M:Apache.Ignite.Core.Compute.IComputeJob`1.Cancel"/> invocators.
            </summary>
            <param name="type">Type.</param>
            <param name="execute">Execute invocator.</param>
            <param name="cancel">Cancel invocator.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Common.DelegateTypeDescriptor.GetStreamReceiver(System.Type)">
            <summary>
            Gets the <see cref="T:Apache.Ignite.Core.Datastream.IStreamReceiver`2"/> invocator.
            </summary>
            <param name="type">Type.</param>
            <returns>Precompiled invocator delegate.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Common.DelegateTypeDescriptor.GetStreamTransformerCtor(System.Type)">
            <summary>
            Gets the <see cref="T:Apache.Ignite.Core.Datastream.StreamTransformer`4"/>&gt; ctor invocator.
            </summary>
            <param name="type">Type.</param>
            <returns>Precompiled invocator delegate.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Common.DelegateTypeDescriptor.GetContinuousQueryFilterCtor(System.Type)">
            <summary>
            Gets the <see cref="T:Apache.Ignite.Core.Impl.Cache.Query.Continuous.ContinuousQueryFilter`2"/>&gt; ctor invocator.
            </summary>
            <param name="type">Type.</param>
            <returns>Precompiled invocator delegate.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Common.DelegateTypeDescriptor.Get(System.Type)">
            <summary>
            Gets the <see cref="T:Apache.Ignite.Core.Impl.Common.DelegateTypeDescriptor"/> by type.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Common.DelegateTypeDescriptor.ThrowIfMultipleInterfaces(System.Object,System.Type,System.Type)">
            <summary>
            Throws an exception if first argument is not null.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Common.DelegateTypeDescriptor.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Impl.Common.DelegateTypeDescriptor"/> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Common.SerializableTypeDescriptor">
            <summary>
            Type descriptor with precompiled delegates to call serialization-related methods.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Common.SerializableTypeDescriptor.Descriptors">
            Cached descriptors. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Common.SerializableTypeDescriptor._type">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Common.SerializableTypeDescriptor._serializationCtor">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Common.SerializableTypeDescriptor._serializationCtorUninitialized">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Common.SerializableTypeDescriptor._onSerializing">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Common.SerializableTypeDescriptor._onSerialized">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Common.SerializableTypeDescriptor._onDeserializing">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Common.SerializableTypeDescriptor._onDeserialized">
            
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Common.SerializableTypeDescriptor.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Impl.Common.SerializableTypeDescriptor"/> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Common.SerializableTypeDescriptor.Get(System.Type)">
            <summary>
            Gets the <see cref="T:Apache.Ignite.Core.Impl.Common.DelegateTypeDescriptor"/> by type.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Common.SerializableTypeDescriptor.GetMissingCtorException">
            <summary>
            Gets the missing ctor exception.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Common.SerializableTypeDescriptor.CompileCallbackMethod(System.Reflection.MethodInfo)">
            <summary>
            Checks that callback method has signature "void (StreamingContext)" and compiles it.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Common.SerializableTypeDescriptor.SerializationCtor">
            <summary>
            Gets the serialization ctor.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Common.SerializableTypeDescriptor.SerializationCtorUninitialized">
            <summary>
            Gets the serialization ctor to call on an uninitialized instance.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Common.SerializableTypeDescriptor.OnSerializing">
            <summary>
            Gets the OnSerializing callback action.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Common.SerializableTypeDescriptor.OnSerialized">
            <summary>
            Gets the OnSerialized callback action.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Common.SerializableTypeDescriptor.OnDeserializing">
            <summary>
            Gets the OnDeserializing callback action.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Common.SerializableTypeDescriptor.OnDeserialized">
            <summary>
            Gets the OnDeserialized callback action.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Events.EventTypeConverter">
            <summary>
            Converts string to <see cref="T:Apache.Ignite.Core.Events.EventType"/> member value.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Events.EventTypeConverter.Instance">
            <summary>
            Default instance.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Events.EventTypeConverter.EvtIdToNameMap">
            <summary>
            The event type map.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Events.EventTypeConverter.EvtNameToIdMap">
            <summary>
            The event type map.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Events.EventTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, 
            using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="sourceType">A <see cref="T:System.Type"/> that represents the type you want to convert from.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Events.EventTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="destinationType">
            A <see cref="T:System.Type"/> that represents the type you want to convert to.
            </param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Events.EventTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, 
            using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Events.EventTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">
            A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.
            </param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="destinationType">
            The <see cref="T:System.Type"/> to convert the <paramref name="value"/> parameter to.
            </param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Common.Fnv1Hash">
            <summary>
            Fowler-Noll-Vo hash function.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Common.Fnv1Hash.Basis">
            Basis. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Common.Fnv1Hash.Prime">
            Prime. 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Common.Fnv1Hash.Update(System.Int32,System.Int32)">
            <summary>
            Updates the hashcode with next int.
            </summary>
            <param name="current">The current.</param>
            <param name="next">The next.</param>
            <returns>Updated hashcode.</returns>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Common.Future`1">
            <summary>
            Grid future implementation.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Common.IFutureInternal">
            <summary>
            Internal future interface.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Common.IFutureInternal.OnResult(Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream)">
            <summary>
            Set result from stream.
            </summary>
            <param name="stream">Stream.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Common.IFutureInternal.OnNullResult">
            <summary>
            Set null result.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Common.IFutureInternal.OnError(System.Exception)">
            <summary>
            Set error result.
            </summary>
            <param name="err">Exception.</param>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Common.Future`1._converter">
            Converter. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Common.Future`1._taskCompletionSource">
            Task completion source. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Common.Future`1._listenable">
            
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Common.Future`1.#ctor(Apache.Ignite.Core.Impl.Common.IFutureConverter{`0})">
            <summary>
            Constructor.
            </summary>
            <param name="converter">Future result marshaller and converter.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Common.Future`1.Get">
            <summary>
            Gets the result.
            </summary>
            <exception cref="T:System.AggregateException"/>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Common.Future`1.GetTask(System.Threading.CancellationToken)">
            <summary>
            Gets the task with cancellation.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Common.Future`1.OnResult(Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream)">
            <summary>
            Set result from stream.
            </summary>
            <param name="stream">Stream.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Common.Future`1.OnError(System.Exception)">
            <summary>
            Set error result.
            </summary>
            <param name="err">Exception.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Common.Future`1.OnNullResult">
            <summary>
            Set null result.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Common.Future`1.OnResult(`0)">
            <summary>
            Set result.
            </summary>
            <param name="res">Result.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Common.Future`1.OnDone(`0,System.Exception)">
            <summary>
            Set future to Done state.
            </summary>
            <param name="res">Result.</param>
            <param name="err">Error.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Common.Future`1.SetTarget(Apache.Ignite.Core.Impl.Common.Listenable)">
            <summary>
            Sets unmanaged future target for cancellation.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Common.Future`1.OnTokenCancel">
            <summary>
            Called when token cancellation occurs.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Common.Future`1.Task">
            <summary>
            Gets the task.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Common.FutureConverter`1">
            <summary>
            Marshals and converts future value.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Common.IFutureConverter`1">
            <summary>
            Marshals and converts future value.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Common.IFutureConverter`1.Convert(Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream)">
            <summary>
            Reads and converts a value.
            Null stream means null value.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Common.FutureConverter`1._marsh">
            Marshaller. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Common.FutureConverter`1._keepBinary">
            Keep binary flag. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Common.FutureConverter`1._func">
            Converting function. 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Common.FutureConverter`1.#ctor(Apache.Ignite.Core.Impl.Binary.Marshaller,System.Boolean,System.Func{Apache.Ignite.Core.Impl.Binary.BinaryReader,`0})">
            <summary>
            Constructor.
            </summary>
            <param name="marsh">Marshaller.</param>
            <param name="keepBinary">Keep binary flag.</param>
            <param name="func">Converting function.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Common.FutureConverter`1.Convert(Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream)">
            <summary>
            Read and convert a value.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Common.FutureType">
            <summary>
            Future types.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Common.FutureType.Byte">
            <summary> Future type: byte. </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Common.FutureType.Bool">
            <summary> Future type: boolean. </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Common.FutureType.Short">
            <summary> Future type: short. </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Common.FutureType.Char">
            <summary> Future type: char. </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Common.FutureType.Int">
            <summary> Future type: int. </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Common.FutureType.Float">
            <summary> Future type: float. </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Common.FutureType.Long">
            <summary> Future type: long. </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Common.FutureType.Double">
            <summary> Future type: double. </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Common.FutureType.Object">
            <summary> Future type: object. </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Common.IgniteArgumentCheck">
            <summary>
            Arguments check helpers.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Common.IgniteArgumentCheck.NotNull(System.Object,System.String)">
            <summary>
            Throws an ArgumentNullException if specified arg is null.
            </summary>
            <param name="arg">The argument.</param>
            <param name="argName">Name of the argument.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Common.IgniteArgumentCheck.NotNullOrEmpty(System.String,System.String)">
            <summary>
            Throws an ArgumentException if specified arg is null or empty string.
            </summary>
            <param name="arg">The argument.</param>
            <param name="argName">Name of the argument.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Common.IgniteArgumentCheck.NotNullOrEmpty``1(System.Collections.Generic.ICollection{``0},System.String)">
            <summary>
            Throws an ArgumentException if specified arg is null or empty string.
            </summary>
            <param name="collection">The collection.</param>
            <param name="argName">Name of the argument.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Common.IgniteArgumentCheck.Ensure(System.Boolean,System.String,System.String)">
            <summary>
            Throws an ArgumentException if specified condition is false.
            </summary>
            <param name="condition">Condition.</param>
            <param name="argName">Name of the argument.</param>
            <param name="message">Message.</param>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Common.IgniteConfigurationXmlSerializer">
            <summary>
            Serializes <see cref="T:Apache.Ignite.Core.IgniteConfiguration"/> to XML.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Common.IgniteConfigurationXmlSerializer.TypNameAttribute">
            Attribute that specifies a type for abstract properties, such as IpFinder. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Common.IgniteConfigurationXmlSerializer.XmlnsAttribute">
            Xmlns. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Common.IgniteConfigurationXmlSerializer.KeyValPairElement">
            Xmlns. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Common.IgniteConfigurationXmlSerializer.Schema">
            Schema. 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Common.IgniteConfigurationXmlSerializer.Deserialize(System.Xml.XmlReader)">
            <summary>
            Deserializes <see cref="T:Apache.Ignite.Core.IgniteConfiguration"/> from specified <see cref="T:System.Xml.XmlReader"/>.
            </summary>
            <param name="reader">The reader.</param>
            <returns>Resulting <see cref="T:Apache.Ignite.Core.IgniteConfiguration"/>.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Common.IgniteConfigurationXmlSerializer.Serialize(Apache.Ignite.Core.IgniteConfiguration,System.Xml.XmlWriter,System.String)">
            <summary>
            Serializes specified <see cref="T:Apache.Ignite.Core.IgniteConfiguration"/> to <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <param name="configuration">The configuration.</param>
            <param name="writer">The writer.</param>
            <param name="rootElementName">Name of the root element.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Common.IgniteConfigurationXmlSerializer.WriteElement(System.Object,System.Xml.XmlWriter,System.String,System.Type,System.Reflection.PropertyInfo)">
            <summary>
            Writes new element.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Common.IgniteConfigurationXmlSerializer.WriteBasicProperty(System.Object,System.Xml.XmlWriter,System.Type,System.Reflection.PropertyInfo)">
            <summary>
            Writes the property of a basic type (primitives, strings, types).
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Common.IgniteConfigurationXmlSerializer.WriteCollectionProperty(System.Object,System.Xml.XmlWriter,System.Type,System.Reflection.PropertyInfo)">
            <summary>
            Writes the collection property.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Common.IgniteConfigurationXmlSerializer.WriteDictionaryProperty(System.Object,System.Xml.XmlWriter,System.Type,System.Reflection.PropertyInfo)">
            <summary>
            Writes the dictionary property.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Common.IgniteConfigurationXmlSerializer.WriteComplexProperty(System.Object,System.Xml.XmlWriter,System.Type)">
            <summary>
            Writes the complex property (nested object).
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Common.IgniteConfigurationXmlSerializer.ReadElement(System.Xml.XmlReader,System.Object,Apache.Ignite.Core.Impl.Binary.TypeResolver)">
            <summary>
            Reads the element.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Common.IgniteConfigurationXmlSerializer.ReadPropertyValue(System.Xml.XmlReader,Apache.Ignite.Core.Impl.Binary.TypeResolver,System.Reflection.PropertyInfo,System.Type)">
            <summary>
            Reads the property value.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Common.IgniteConfigurationXmlSerializer.ReadComplexProperty(System.Xml.XmlReader,System.Type,System.String,System.Type,Apache.Ignite.Core.Impl.Binary.TypeResolver)">
            <summary>
            Reads the complex property (nested object).
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Common.IgniteConfigurationXmlSerializer.ResolvePropertyType(System.Xml.XmlReader,System.Type,System.String,System.Type,Apache.Ignite.Core.Impl.Binary.TypeResolver)">
            <summary>
            Resolves the type of the property.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Common.IgniteConfigurationXmlSerializer.ReadCollectionProperty(System.Xml.XmlReader,System.Reflection.PropertyInfo,System.Type,Apache.Ignite.Core.Impl.Binary.TypeResolver)">
            <summary>
            Reads the collection.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Common.IgniteConfigurationXmlSerializer.ReadDictionaryProperty(System.Xml.XmlReader,System.Reflection.PropertyInfo,Apache.Ignite.Core.Impl.Binary.TypeResolver)">
            <summary>
            Reads the dictionary.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Common.IgniteConfigurationXmlSerializer.ConvertBasicValue(System.String,System.Reflection.PropertyInfo,System.Type)">
            <summary>
            Reads the basic value.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Common.IgniteConfigurationXmlSerializer.GetConcreteDerivedTypes(System.Type)">
            <summary>
            Gets concrete derived types.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Common.IgniteConfigurationXmlSerializer.GetPropertyOrThrow(System.String,System.Object,System.Type)">
            <summary>
            Gets specified property from a type or throws an exception.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Common.IgniteConfigurationXmlSerializer.XmlNameToPropertyName(System.String)">
            <summary>
            Converts an XML name to CLR name.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Common.IgniteConfigurationXmlSerializer.PropertyNameToXmlName(System.String)">
            <summary>
            Converts a CLR name to XML name.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Common.IgniteConfigurationXmlSerializer.IsBasicType(System.Type)">
            <summary>
            Determines whether specified type is a basic built-in type.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Common.IgniteConfigurationXmlSerializer.IsKeyValuePair(System.Type)">
            <summary>
            Determines whether specified type is KeyValuePair.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Common.IgniteConfigurationXmlSerializer.GetConverter(System.Reflection.PropertyInfo,System.Type)">
            <summary>
            Gets converter for a property.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Common.IgniteConfigurationXmlSerializer.GetNonDefaultProperties(System.Object)">
            <summary>
            Gets properties with non-default value.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Common.IgniteConfigurationXmlSerializer.GetDefaultValue(System.Reflection.PropertyInfo)">
            <summary>
            Gets the default value for a property.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Common.IgniteConfigurationXmlSerializer.IsIgnored(System.Reflection.PropertyInfo)">
            <summary>
            Determines whether the specified property is marked with XmlIgnore.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Common.IgniteConfigurationXmlSerializer.IPair">
            <summary>
            Non-generic Pair accessor.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Common.IgniteConfigurationXmlSerializer.IPair.Key">
            <summary>
            Gets the key.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Common.IgniteConfigurationXmlSerializer.IPair.Value">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Common.IgniteConfigurationXmlSerializer.Pair`2">
            <summary>
            Surrogate dictionary entry to overcome immutable KeyValuePair.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Common.IgniteConfigurationXmlSerializer.Pair`2.Apache#Ignite#Core#Impl#Common#IgniteConfigurationXmlSerializer#IPair#Key">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Common.IgniteConfigurationXmlSerializer.Pair`2.Apache#Ignite#Core#Impl#Common#IgniteConfigurationXmlSerializer#IPair#Value">
            <inheritdoc /> 
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Common.IgniteHome">
            <summary>
            IgniteHome resolver.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Common.IgniteHome.EnvIgniteHome">
            Environment variable: IGNITE_HOME. 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Common.IgniteHome.Resolve(Apache.Ignite.Core.IgniteConfiguration,Apache.Ignite.Core.Log.ILogger)">
            <summary>
            Calculate Ignite home.
            </summary>
            <param name="cfg">Configuration.</param>
            <param name="log">The log.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Common.IgniteHome.Resolve(Apache.Ignite.Core.Log.ILogger)">
            <summary>
            Automatically resolve Ignite home directory.
            </summary>
            <param name="log">The log.</param>
            <returns>
            Ignite home directory.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Common.IgniteHome.IsIgniteHome(System.IO.DirectoryInfo)">
            <summary>
            Determines whether specified dir looks like a Ignite home.
            </summary>
            <param name="dir">Directory.</param>
            <returns>Value indicating whether specified dir looks like a Ignite home.</returns>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Common.LoadedAssembliesResolver">
            <summary>
            Resolves loaded assemblies by name.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Common.LoadedAssembliesResolver.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Impl.Common.LoadedAssembliesResolver"/> class.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Common.LoadedAssembliesResolver.CurrentDomain_AssemblyLoad(System.Object,System.AssemblyLoadEventArgs)">
            <summary>
            Handles the AssemblyLoad event of the AppDomain.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="args">The <see cref="T:System.AssemblyLoadEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Common.LoadedAssembliesResolver.UpdateMap">
            <summary>
            Updates the assembly map according to the current list of loaded assemblies.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Common.LoadedAssembliesResolver.GetAssembly(System.String)">
            <summary>
            Gets the assembly by name.
            </summary>
            <param name="assemblyName">Name of the assembly.</param>
            <returns>Assembly with specified name, or null.</returns>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Common.LoadedAssembliesResolver.Instance">
            <summary>
            Gets the singleton instance.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Common.TypeCaster`1">
            <summary>
            Does type casts without extra boxing. 
            Should be used when casting compile-time incompatible value types instead of "(T)(object)x".
            </summary>
            <typeparam name="T">Target type</typeparam>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Common.TypeCaster`1.Cast``1(``0)">
            <summary>
            Efficiently casts an object from TFrom to T.
            Does not cause boxing for value types.
            </summary>
            <typeparam name="TFrom">Source type to cast from.</typeparam>
            <param name="obj">The object to cast.</param>
            <returns>Casted object.</returns>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Common.TypeCaster`1.Casters`1">
            <summary>
            Inner class serving as a cache.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Common.TypeCaster`1.Casters`1.Caster">
            <summary>
            Compiled caster delegate.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Common.TypeCaster`1.Casters`1.Compile">
            <summary>
            Compiles caster delegate.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Common.TypeStringConverter">
            <summary>
            Converts string to <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Common.TypeStringConverter.Instance">
            <summary>
            Default instance.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Common.TypeStringConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, 
            using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="sourceType">A <see cref="T:System.Type"/> that represents the type you want to convert from.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Common.TypeStringConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="destinationType">
            A <see cref="T:System.Type"/> that represents the type you want to convert to.
            </param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Common.TypeStringConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, 
            using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Common.TypeStringConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">
            A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.
            </param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="destinationType">
            The <see cref="T:System.Type"/> to convert the <paramref name="value"/> parameter to.
            </param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Common.TypeStringConverter.Convert(System.Object)">
            <summary>
            Converts Type to string.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>Resulting string.</returns>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Compute.Closure.ComputeAbstractClosureTask`3">
            <summary>
            Base class for all tasks working with closures.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.Closure.ComputeAbstractClosureTask`3.Map(System.Collections.Generic.IList{Apache.Ignite.Core.Cluster.IClusterNode},`0)">
            <summary>
            This method is called to map or split Ignite task into multiple Ignite jobs. This is the
            first method that gets called when task execution starts.
            </summary>
            <param name="subgrid">Nodes available for this task execution. Note that order of nodes is
            guaranteed to be randomized by container. This ensures that every time you simply iterate
            through Ignite nodes, the order of nodes will be random which over time should result into
            all nodes being used equally.</param>
            <param name="arg">Task execution argument. Can be <c>null</c>. This is the same argument
            as the one passed into <c>ICompute.Execute()</c> methods.</param>
            <returns>
            Map of Ignite jobs assigned to subgrid node. If <c>null</c> or empty map is returned,
            exception will be thrown.
            </returns>
            <exception cref="T:System.NotSupportedException">Map step should not be called on this task.</exception>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.Closure.ComputeAbstractClosureTask`3.OnResult(Apache.Ignite.Core.Compute.IComputeJobResult{`1},System.Collections.Generic.IList{Apache.Ignite.Core.Compute.IComputeJobResult{`1}})">
            <summary>
            Asynchronous callback invoked every time a result from remote execution is
            received. It is ultimately upto this method to return a policy based
            on which the system will either wait for more results, reduce results
            received so far, or failover this job to another node. See
            <see cref="T:Apache.Ignite.Core.Compute.ComputeJobResultPolicy"/> for more information.
            </summary>
            <param name="res">Received remote Ignite executable result.</param>
            <param name="rcvd">All previously received results. Note that if task class has
            <see cref="T:Apache.Ignite.Core.Compute.ComputeTaskNoResultCacheAttribute"/> attribute, then this list will be empty.</param>
            <returns>
            Result policy that dictates how to process further upcoming job results.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.Closure.ComputeAbstractClosureTask`3.Reduce(System.Collections.Generic.IList{Apache.Ignite.Core.Compute.IComputeJobResult{`1}})">
            <summary>
            Reduces (or aggregates) results received so far into one compound result to be returned to
            caller via future.
            <para/>
            Note, that if some jobs did not succeed and could not be failed over then the list of
            results passed into this method will include the failed results. Otherwise, failed
            results will not be in the list.
            </summary>
            <param name="results">Received job results. Note that if task class has
            <see cref="T:Apache.Ignite.Core.Compute.ComputeTaskNoResultCacheAttribute"/> attribute, then this list will be empty.</param>
            <returns>
            Task result constructed from results of remote executions.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.Closure.ComputeAbstractClosureTask`3.Result0(Apache.Ignite.Core.Compute.IComputeJobResult{`1})">
            <summary>
            Internal result processing routine.
            </summary>
            <param name="res">Result.</param>
            <returns>Policy.</returns>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Compute.Closure.ComputeActionJob">
            <summary>
            System job which wraps over <c>Action</c>.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Compute.IComputeJob">
            <summary>
            Non-generic version of IComputeJob{T}.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Compute.Closure.IComputeResourceInjector">
            <summary>
            Interface denoting entity which must perform custom resource injection.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.Closure.IComputeResourceInjector.Inject(Apache.Ignite.Core.Impl.IIgniteInternal)">
            <summary>
            Inject resources.
            </summary>
            <param name="grid">Grid.</param>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Compute.Closure.ComputeActionJob._action">
            Closure. 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.Closure.ComputeActionJob.#ctor(Apache.Ignite.Core.Compute.IComputeAction)">
            <summary>
            Constructor.
            </summary>
            <param name="action">Action.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.Closure.ComputeActionJob.Execute">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.Closure.ComputeActionJob.Cancel">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.Closure.ComputeActionJob.Inject(Apache.Ignite.Core.Impl.IIgniteInternal)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.Closure.ComputeActionJob.WriteBinary(Apache.Ignite.Core.Binary.IBinaryWriter)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.Closure.ComputeActionJob.#ctor(Apache.Ignite.Core.Binary.IBinaryRawReader)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Impl.Compute.Closure.ComputeActionJob"/> class.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Compute.Closure.ComputeFuncJob">
            <summary>
            System job which wraps over <c>Func</c>.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Compute.Closure.ComputeFuncJob._clo">
            Closure. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Compute.Closure.ComputeFuncJob._arg">
            Argument. 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.Closure.ComputeFuncJob.#ctor(Apache.Ignite.Core.Impl.Compute.IComputeFunc,System.Object)">
            <summary>
            Constructor.
            </summary>
            <param name="clo">Closure.</param>
            <param name="arg">Argument.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.Closure.ComputeFuncJob.Execute">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.Closure.ComputeFuncJob.Cancel">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.Closure.ComputeFuncJob.Inject(Apache.Ignite.Core.Impl.IIgniteInternal)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.Closure.ComputeFuncJob.WriteBinary(Apache.Ignite.Core.Binary.IBinaryWriter)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.Closure.ComputeFuncJob.#ctor(Apache.Ignite.Core.Binary.IBinaryRawReader)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Impl.Compute.Closure.ComputeFuncJob"/> class.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Compute.Closure.ComputeMultiClosureTask`3">
            <summary>
            Closure-based task producing multiple jobs and returning a collection of job results.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Compute.Closure.ComputeMultiClosureTask`3._res">
            Result. 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.Closure.ComputeMultiClosureTask`3.#ctor(System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="size">Expected results count.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.Closure.ComputeMultiClosureTask`3.Result0(Apache.Ignite.Core.Compute.IComputeJobResult{`1})">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.Closure.ComputeMultiClosureTask`3.Reduce(System.Collections.Generic.IList{Apache.Ignite.Core.Compute.IComputeJobResult{`1}})">
            <inheritDoc /> 
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Compute.Closure.ComputeOutFuncJob">
            <summary>
            System job which wraps over <c>Func</c>.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Compute.Closure.ComputeOutFuncJob._clo">
            Closure. 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.Closure.ComputeOutFuncJob.#ctor(Apache.Ignite.Core.Impl.Compute.IComputeOutFunc)">
            <summary>
            Constructor.
            </summary>
            <param name="clo">Closure.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.Closure.ComputeOutFuncJob.Execute">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.Closure.ComputeOutFuncJob.Cancel">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.Closure.ComputeOutFuncJob.Inject(Apache.Ignite.Core.Impl.IIgniteInternal)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.Closure.ComputeOutFuncJob.WriteBinary(Apache.Ignite.Core.Binary.IBinaryWriter)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.Closure.ComputeOutFuncJob.#ctor(Apache.Ignite.Core.Binary.IBinaryRawReader)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Impl.Compute.Closure.ComputeOutFuncJob"/> class.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Compute.Closure.ComputeReducingClosureTask`3">
            <summary>
            Closure-based task producing only one job and thus having only single result.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Compute.Closure.ComputeReducingClosureTask`3._rdc">
            Reducer. 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.Closure.ComputeReducingClosureTask`3.#ctor(Apache.Ignite.Core.Compute.IComputeReducer{`1,`2})">
            <summary>
            Constructor.
            </summary>
            <param name="rdc">Reducer.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.Closure.ComputeReducingClosureTask`3.Result0(Apache.Ignite.Core.Compute.IComputeJobResult{`1})">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.Closure.ComputeReducingClosureTask`3.Reduce(System.Collections.Generic.IList{Apache.Ignite.Core.Compute.IComputeJobResult{`1}})">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.Closure.ComputeReducingClosureTask`3.Inject(Apache.Ignite.Core.Impl.IIgniteInternal)">
            <inheritDoc /> 
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Compute.Closure.ComputeSingleClosureTask`3">
            <summary>
            Closure-based task producing only one job and thus having only single result.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Compute.Closure.ComputeSingleClosureTask`3._res">
            Result. 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.Closure.ComputeSingleClosureTask`3.Result0(Apache.Ignite.Core.Compute.IComputeJobResult{`1})">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.Closure.ComputeSingleClosureTask`3.Reduce(System.Collections.Generic.IList{Apache.Ignite.Core.Compute.IComputeJobResult{`1}})">
            <inheritDoc /> 
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Compute.Compute">
            <summary>
            Synchronous Compute facade.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Compute.Compute._compute">
            
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.Compute.#ctor(Apache.Ignite.Core.Impl.Compute.ComputeImpl)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Impl.Compute.Compute"/> class.
            </summary>
            <param name="computeImpl">The compute implementation.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.Compute.WithNoFailover">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.Compute.WithTimeout(System.Int64)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.Compute.WithKeepBinary">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.Compute.ExecuteJavaTask``1(System.String,System.Object)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.Compute.ExecuteJavaTaskAsync``1(System.String,System.Object)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.Compute.ExecuteJavaTaskAsync``1(System.String,System.Object,System.Threading.CancellationToken)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.Compute.Execute``3(Apache.Ignite.Core.Compute.IComputeTask{``0,``1,``2},``0)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.Compute.ExecuteAsync``3(Apache.Ignite.Core.Compute.IComputeTask{``0,``1,``2},``0)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.Compute.ExecuteAsync``3(Apache.Ignite.Core.Compute.IComputeTask{``0,``1,``2},``0,System.Threading.CancellationToken)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.Compute.Execute``2(Apache.Ignite.Core.Compute.IComputeTask{``0,``1})">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.Compute.ExecuteAsync``2(Apache.Ignite.Core.Compute.IComputeTask{``0,``1})">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.Compute.ExecuteAsync``2(Apache.Ignite.Core.Compute.IComputeTask{``0,``1},System.Threading.CancellationToken)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.Compute.Execute``3(System.Type,``0)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.Compute.ExecuteAsync``3(System.Type,``0)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.Compute.ExecuteAsync``3(System.Type,``0,System.Threading.CancellationToken)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.Compute.Execute``2(System.Type)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.Compute.ExecuteAsync``2(System.Type)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.Compute.ExecuteAsync``2(System.Type,System.Threading.CancellationToken)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.Compute.Call``1(Apache.Ignite.Core.Compute.IComputeFunc{``0})">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.Compute.CallAsync``1(Apache.Ignite.Core.Compute.IComputeFunc{``0})">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.Compute.CallAsync``1(Apache.Ignite.Core.Compute.IComputeFunc{``0},System.Threading.CancellationToken)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.Compute.AffinityCall``1(System.String,System.Object,Apache.Ignite.Core.Compute.IComputeFunc{``0})">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.Compute.AffinityCallAsync``1(System.String,System.Object,Apache.Ignite.Core.Compute.IComputeFunc{``0})">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.Compute.AffinityCallAsync``1(System.String,System.Object,Apache.Ignite.Core.Compute.IComputeFunc{``0},System.Threading.CancellationToken)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.Compute.Call``1(System.Func{``0})">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.Compute.CallAsync``2(System.Collections.Generic.IEnumerable{Apache.Ignite.Core.Compute.IComputeFunc{``0}},Apache.Ignite.Core.Compute.IComputeReducer{``0,``1})">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.Compute.CallAsync``2(System.Collections.Generic.IEnumerable{Apache.Ignite.Core.Compute.IComputeFunc{``0}},Apache.Ignite.Core.Compute.IComputeReducer{``0,``1},System.Threading.CancellationToken)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.Compute.Call``1(System.Collections.Generic.IEnumerable{Apache.Ignite.Core.Compute.IComputeFunc{``0}})">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.Compute.CallAsync``1(System.Collections.Generic.IEnumerable{Apache.Ignite.Core.Compute.IComputeFunc{``0}})">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.Compute.CallAsync``1(System.Collections.Generic.IEnumerable{Apache.Ignite.Core.Compute.IComputeFunc{``0}},System.Threading.CancellationToken)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.Compute.Call``2(System.Collections.Generic.IEnumerable{Apache.Ignite.Core.Compute.IComputeFunc{``0}},Apache.Ignite.Core.Compute.IComputeReducer{``0,``1})">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.Compute.Broadcast``1(Apache.Ignite.Core.Compute.IComputeFunc{``0})">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.Compute.BroadcastAsync``1(Apache.Ignite.Core.Compute.IComputeFunc{``0})">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.Compute.BroadcastAsync``1(Apache.Ignite.Core.Compute.IComputeFunc{``0},System.Threading.CancellationToken)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.Compute.Broadcast``2(Apache.Ignite.Core.Compute.IComputeFunc{``0,``1},``0)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.Compute.BroadcastAsync``2(Apache.Ignite.Core.Compute.IComputeFunc{``0,``1},``0)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.Compute.BroadcastAsync``2(Apache.Ignite.Core.Compute.IComputeFunc{``0,``1},``0,System.Threading.CancellationToken)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.Compute.Broadcast(Apache.Ignite.Core.Compute.IComputeAction)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.Compute.BroadcastAsync(Apache.Ignite.Core.Compute.IComputeAction)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.Compute.BroadcastAsync(Apache.Ignite.Core.Compute.IComputeAction,System.Threading.CancellationToken)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.Compute.Run(Apache.Ignite.Core.Compute.IComputeAction)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.Compute.RunAsync(Apache.Ignite.Core.Compute.IComputeAction)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.Compute.RunAsync(Apache.Ignite.Core.Compute.IComputeAction,System.Threading.CancellationToken)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.Compute.AffinityRun(System.String,System.Object,Apache.Ignite.Core.Compute.IComputeAction)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.Compute.AffinityRunAsync(System.String,System.Object,Apache.Ignite.Core.Compute.IComputeAction)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.Compute.AffinityRunAsync(System.String,System.Object,Apache.Ignite.Core.Compute.IComputeAction,System.Threading.CancellationToken)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.Compute.Run(System.Collections.Generic.IEnumerable{Apache.Ignite.Core.Compute.IComputeAction})">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.Compute.RunAsync(System.Collections.Generic.IEnumerable{Apache.Ignite.Core.Compute.IComputeAction})">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.Compute.RunAsync(System.Collections.Generic.IEnumerable{Apache.Ignite.Core.Compute.IComputeAction},System.Threading.CancellationToken)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.Compute.Apply``2(Apache.Ignite.Core.Compute.IComputeFunc{``0,``1},``0)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.Compute.ApplyAsync``2(Apache.Ignite.Core.Compute.IComputeFunc{``0,``1},``0)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.Compute.ApplyAsync``2(Apache.Ignite.Core.Compute.IComputeFunc{``0,``1},``0,System.Threading.CancellationToken)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.Compute.Apply``2(Apache.Ignite.Core.Compute.IComputeFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.Compute.ApplyAsync``2(Apache.Ignite.Core.Compute.IComputeFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.Compute.ApplyAsync``2(Apache.Ignite.Core.Compute.IComputeFunc{``0,``1},System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.Compute.Apply``3(Apache.Ignite.Core.Compute.IComputeFunc{``0,``1},System.Collections.Generic.IEnumerable{``0},Apache.Ignite.Core.Compute.IComputeReducer{``1,``2})">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.Compute.ApplyAsync``3(Apache.Ignite.Core.Compute.IComputeFunc{``0,``1},System.Collections.Generic.IEnumerable{``0},Apache.Ignite.Core.Compute.IComputeReducer{``1,``2})">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.Compute.ApplyAsync``3(Apache.Ignite.Core.Compute.IComputeFunc{``0,``1},System.Collections.Generic.IEnumerable{``0},Apache.Ignite.Core.Compute.IComputeReducer{``1,``2},System.Threading.CancellationToken)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.Compute.GetTaskIfAlreadyCancelled``1(System.Threading.CancellationToken)">
            <summary>
            Gets the cancelled task if specified token is cancelled.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.Compute.IsFailoverException(System.Exception)">
            <summary>
            Determines whether specified exception should result in a job failover.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Compute.Compute.ClusterGroup">
            <inheritDoc /> 
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Compute.IComputeFunc">
            <summary>
            Non-generic version of IComputeFunc{T}.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Compute.ComputeFuncWrapper">
            <summary>
            Wraps generic func into a non-generic for internal usage.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Compute.ComputeFuncWrapper._func">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Compute.ComputeFuncWrapper._invoker">
            
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.ComputeFuncWrapper.#ctor(System.Object,System.Func{System.Object,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Impl.Compute.ComputeFuncWrapper"/> class.
            </summary>
            <param name="func">The function to wrap.</param>
            <param name="invoker">The function invoker.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.ComputeFuncWrapper.Invoke(System.Object)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.ComputeFuncWrapper.WriteBinary(Apache.Ignite.Core.Binary.IBinaryWriter)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.ComputeFuncWrapper.#ctor(Apache.Ignite.Core.Binary.IBinaryRawReader)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Impl.Compute.ComputeFuncWrapper"/> class.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.ComputeFuncWrapper.InjectIgnite(Apache.Ignite.Core.IIgnite)">
            <summary>
            Injects the Ignite instance.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Compute.ComputeFuncExtensions">
            <summary>
            Extension methods for IComputeFunc{T}.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.ComputeFuncExtensions.ToNonGeneric``2(Apache.Ignite.Core.Compute.IComputeFunc{``0,``1})">
            <summary>
            Convert to non-generic wrapper.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Compute.ComputeImpl">
            <summary>
            Compute implementation.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Compute.ComputeImpl.OpAffinity">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Compute.ComputeImpl.OpBroadcast">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Compute.ComputeImpl.OpExec">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Compute.ComputeImpl.OpExecAsync">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Compute.ComputeImpl.OpUnicast">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Compute.ComputeImpl.OpWithNoFailover">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Compute.ComputeImpl.OpWithTimeout">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Compute.ComputeImpl.OpExecNative">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Compute.ComputeImpl._prj">
            Underlying projection. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Compute.ComputeImpl._keepBinary">
            Whether objects must be kept in binary form. 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.ComputeImpl.#ctor(Apache.Ignite.Core.Impl.IPlatformTargetInternal,Apache.Ignite.Core.Impl.Cluster.ClusterGroupImpl,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="target">Target.</param>
            <param name="prj">Projection.</param>
            <param name="keepBinary">Binary flag.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.ComputeImpl.WithNoFailover">
            <summary>
            Sets no-failover flag for the next executed task on this projection in the current thread.
            If flag is set, job will be never failed over even if remote node crashes or rejects execution.
            When task starts execution, the no-failover flag is reset, so all other task will use default
            failover policy, unless this flag is set again.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.ComputeImpl.WithTimeout(System.Int64)">
            <summary>
            Sets task timeout for the next executed task on this projection in the current thread.
            When task starts execution, the timeout is reset, so one timeout is used only once.
            </summary>
            <param name="timeout">Computation timeout in milliseconds.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.ComputeImpl.WithKeepBinary">
            <summary>
            Sets keep-binary flag for the next executed Java task on this projection in the current
            thread so that task argument passed to Java and returned task results will not be
            deserialized.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.ComputeImpl.ExecuteJavaTask``1(System.String,System.Object)">
            <summary>
            Executes given Java task on the grid projection. If task for given name has not been deployed yet,
            then 'taskName' will be used as task class name to auto-deploy the task.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.ComputeImpl.ExecuteJavaTaskAsync``1(System.String,System.Object)">
            <summary>
            Executes given Java task asynchronously on the grid projection.
            If task for given name has not been deployed yet,
            then 'taskName' will be used as task class name to auto-deploy the task.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.ComputeImpl.Execute``3(Apache.Ignite.Core.Compute.IComputeTask{``0,``1,``2},``0)">
            <summary>
            Executes given task on the grid projection. For step-by-step explanation of task execution process
            refer to <see cref="T:Apache.Ignite.Core.Compute.IComputeTask`3"/> documentation.
            </summary>
            <param name="task">Task to execute.</param>
            <param name="taskArg">Optional task argument.</param>
            <returns>Task result.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.ComputeImpl.Execute``3(System.Type,``0)">
            <summary>
            Executes given task on the grid projection. For step-by-step explanation of task execution process
            refer to <see cref="T:Apache.Ignite.Core.Compute.IComputeTask`3"/> documentation.
            </summary>
            <param name="taskType">Task type.</param>
            <param name="taskArg">Optional task argument.</param>
            <returns>Task result.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.ComputeImpl.Execute``1(Apache.Ignite.Core.Compute.IComputeFunc{``0})">
            <summary>
            Executes provided job on a node in this grid projection. The result of the
            job execution is returned from the result closure.
            </summary>
            <param name="clo">Job to execute.</param>
            <returns>Job result for this execution.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.ComputeImpl.Execute``1(System.Func{``0})">
            <summary>
            Executes provided delegate on a node in this grid projection. The result of the
            job execution is returned from the result closure.
            </summary>
            <param name="func">Func to execute.</param>
            <returns>Job result for this execution.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.ComputeImpl.Execute``1(System.Collections.Generic.IEnumerable{Apache.Ignite.Core.Compute.IComputeFunc{``0}})">
            <summary>
            Executes collection of jobs on nodes within this grid projection.
            </summary>
            <param name="clos">Collection of jobs to execute.</param>
            <returns>Collection of job results for this execution.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.ComputeImpl.Execute``2(System.Collections.Generic.IEnumerable{Apache.Ignite.Core.Compute.IComputeFunc{``0}},Apache.Ignite.Core.Compute.IComputeReducer{``0,``1})">
            <summary>
            Executes collection of jobs on nodes within this grid projection.
            </summary>
            <param name="clos">Collection of jobs to execute.</param>
            <param name="rdc">Reducer to reduce all job results into one individual return value.</param>
            <returns>Collection of job results for this execution.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.ComputeImpl.Broadcast``1(Apache.Ignite.Core.Compute.IComputeFunc{``0})">
            <summary>
            Broadcasts given job to all nodes in grid projection. Every participating node will return a job result.
            </summary>
            <param name="clo">Job to broadcast to all projection nodes.</param>
            <returns>Collection of results for this execution.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.ComputeImpl.Broadcast``2(Apache.Ignite.Core.Compute.IComputeFunc{``0,``1},``0)">
            <summary>
            Broadcasts given closure job with passed in argument to all nodes in grid projection.
            Every participating node will return a job result.
            </summary>
            <param name="clo">Job to broadcast to all projection nodes.</param>
            <param name="arg">Job closure argument.</param>
            <returns>Collection of results for this execution.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.ComputeImpl.Broadcast(Apache.Ignite.Core.Compute.IComputeAction)">
            <summary>
            Broadcasts given job to all nodes in grid projection.
            </summary>
            <param name="action">Job to broadcast to all projection nodes.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.ComputeImpl.Run(Apache.Ignite.Core.Compute.IComputeAction)">
            <summary>
            Executes provided job on a node in this grid projection.
            </summary>
            <param name="action">Job to execute.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.ComputeImpl.Run(System.Collections.Generic.IEnumerable{Apache.Ignite.Core.Compute.IComputeAction})">
            <summary>
            Executes collection of jobs on Ignite nodes within this grid projection.
            </summary>
            <param name="actions">Jobs to execute.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.ComputeImpl.Apply``2(Apache.Ignite.Core.Compute.IComputeFunc{``0,``1},``0)">
            <summary>
            Executes provided closure job on a node in this grid projection.
            </summary>
            <param name="clo">Job to run.</param>
            <param name="arg">Job argument.</param>
            <returns>Job result for this execution.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.ComputeImpl.Apply``2(Apache.Ignite.Core.Compute.IComputeFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Executes provided closure job on nodes within this grid projection. A new job is executed for
            every argument in the passed in collection. The number of actual job executions will be
            equal to size of the job arguments collection.
            </summary>
            <param name="clo">Job to run.</param>
            <param name="args">Job arguments.</param>
            <returns>Collection of job results.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.ComputeImpl.Apply``3(Apache.Ignite.Core.Compute.IComputeFunc{``0,``1},System.Collections.Generic.IEnumerable{``0},Apache.Ignite.Core.Compute.IComputeReducer{``1,``2})">
            <summary>
            Executes provided closure job on nodes within this grid projection. A new job is executed for
            every argument in the passed in collection. The number of actual job executions will be
            equal to size of the job arguments collection. The returned job results will be reduced
            into an individual result by provided reducer.
            </summary>
            <param name="clo">Job to run.</param>
            <param name="args">Job arguments.</param>
            <param name="rdc">Reducer to reduce all job results into one individual return value.</param>
            <returns>Reduced job result for this execution.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.ComputeImpl.AffinityRun(System.String,System.Object,Apache.Ignite.Core.Compute.IComputeAction)">
            <summary>
            Executes given job on the node where data for provided affinity key is located
            (a.k.a. affinity co-location).
            </summary>
            <param name="cacheName">Name of the cache to use for affinity co-location.</param>
            <param name="affinityKey">Affinity key.</param>
            <param name="action">Job to execute.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.ComputeImpl.AffinityCall``1(System.String,System.Object,Apache.Ignite.Core.Compute.IComputeFunc{``0})">
            <summary>
            Executes given job on the node where data for provided affinity key is located
            (a.k.a. affinity co-location).
            </summary>
            <param name="cacheName">Name of the cache to use for affinity co-location.</param>
            <param name="affinityKey">Affinity key.</param>
            <param name="clo">Job to execute.</param>
            <returns>Job result for this execution.</returns>
            <typeparam name="TJobRes">Type of job result.</typeparam>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.ComputeImpl.Unmarshal``1(Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.ComputeImpl.ExecuteClosures0``3(Apache.Ignite.Core.Compute.IComputeTask{``0,``1,``2},Apache.Ignite.Core.Impl.Compute.IComputeJob,System.Collections.Generic.ICollection{Apache.Ignite.Core.Impl.Compute.IComputeJob},System.Boolean)">
            <summary>
            Internal routine for closure-based task execution.
            </summary>
            <param name="task">Task.</param>
            <param name="job">Job.</param>
            <param name="jobs">Jobs.</param>
            <param name="broadcast">Broadcast flag.</param>
            <returns>Future.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.ComputeImpl.ExecuteClosures0``3(Apache.Ignite.Core.Compute.IComputeTask{``0,``1,``2},Apache.Ignite.Core.Impl.Compute.IComputeJob,System.Collections.Generic.IEnumerable{Apache.Ignite.Core.Impl.Compute.IComputeJob},System.Int32,System.Int32,System.Action{Apache.Ignite.Core.Impl.Binary.BinaryWriter})">
            <summary>
            Internal routine for closure-based task execution.
            </summary>
            <param name="task">Task.</param>
            <param name="job">Job.</param>
            <param name="jobs">Jobs.</param>
            <param name="opId">Op code.</param>
            <param name="jobsCount">Jobs count.</param>
            <param name="writeAction">Custom write action.</param>
            <returns>Future.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.ComputeImpl.WriteJob(Apache.Ignite.Core.Impl.Compute.IComputeJob,Apache.Ignite.Core.Impl.Binary.BinaryWriter)">
            <summary>
            Writes the job.
            </summary>
            <param name="job">The job.</param>
            <param name="writer">The writer.</param>
            <returns>Handle to the job holder</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.ComputeImpl.WriteTask(Apache.Ignite.Core.Binary.IBinaryRawWriter,System.String,System.Object,System.Collections.Generic.ICollection{Apache.Ignite.Core.Cluster.IClusterNode})">
            <summary>
            Write task to the writer.
            </summary>
            <param name="writer">Writer.</param>
            <param name="taskName">Task name.</param>
            <param name="taskArg">Task arg.</param>
            <param name="nodes">Nodes.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.ComputeImpl.WriteNodeIds(Apache.Ignite.Core.Binary.IBinaryRawWriter,System.Collections.Generic.ICollection{Apache.Ignite.Core.Cluster.IClusterNode})">
            <summary>
            Write node IDs.
            </summary>
            <param name="writer">Writer.</param>
            <param name="nodes">Nodes.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.ComputeImpl.WriteAffinity(Apache.Ignite.Core.Impl.Binary.BinaryWriter,System.String,System.Object)">
            <summary>
            Writes the affinity info.
            </summary>
            <param name="writer">The writer.</param>
            <param name="cacheName">Name of the cache to use for affinity co-location.</param>
            <param name="affinityKey">Affinity key.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.ComputeImpl.GetCountOrZero(System.Object)">
            <summary>
            Gets element count or zero.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Compute.ComputeImpl.ClusterGroup">
            <summary>
            Grid projection to which this compute instance belongs.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Compute.ComputeJobWrapper">
            <summary>
            Wraps generic func into a non-generic for internal usage.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Compute.ComputeJobWrapper._execute">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Compute.ComputeJobWrapper._cancel">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Compute.ComputeJobWrapper._job">
            
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.ComputeJobWrapper.#ctor(Apache.Ignite.Core.Binary.IBinaryRawReader)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Impl.Compute.ComputeJobWrapper"/> class.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.ComputeJobWrapper.#ctor(System.Object,System.Func{System.Object,System.Object},System.Action{System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Impl.Compute.ComputeFuncWrapper"/> class.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.ComputeJobWrapper.Execute">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.ComputeJobWrapper.Cancel">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.ComputeJobWrapper.WriteBinary(Apache.Ignite.Core.Binary.IBinaryWriter)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.ComputeJobWrapper.InjectIgnite(Apache.Ignite.Core.IIgnite)">
            <summary>
            Injects Ignite instance into wrapped object.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Compute.ComputeJobWrapper.Job">
            <summary>
            Gets the inner job.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Compute.ComputeJobExtensions">
            <summary>
            Extension methods for IComputeJob{T}.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.ComputeJobExtensions.ToNonGeneric``1(Apache.Ignite.Core.Compute.IComputeJob{``0})">
            <summary>
            Convert to non-generic wrapper.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.ComputeJobExtensions.Unwrap``2(Apache.Ignite.Core.Compute.IComputeJob{``0})">
            <summary>
            Unwraps job of one type into job of another type.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.ComputeJobExtensions.Unwrap(Apache.Ignite.Core.Compute.IComputeJob{System.Object})">
            <summary>
            Unwraps job of one type into job of another type.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Compute.ComputeJobHolder">
            <summary>
            Holder for user-provided compute job.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Compute.ComputeJobHolder._job">
            Actual job. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Compute.ComputeJobHolder._ignite">
            Owning grid. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Compute.ComputeJobHolder._jobRes">
            Result (set for local jobs only). 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.ComputeJobHolder.#ctor(Apache.Ignite.Core.Impl.Binary.BinaryReader)">
            <summary>
            Default ctor for marshalling.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.ComputeJobHolder.#ctor(Apache.Ignite.Core.Impl.IIgniteInternal,Apache.Ignite.Core.Impl.Compute.IComputeJob)">
            <summary>
            Constructor.
            </summary>
            <param name="grid">Grid.</param>
            <param name="job">Job.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.ComputeJobHolder.ExecuteLocal(System.Boolean)">
            <summary>
            Executes local job.
            </summary>
            <param name="cancel">Cancel flag.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.ComputeJobHolder.ExecuteRemote(Apache.Ignite.Core.Impl.Memory.PlatformMemoryStream,System.Boolean)">
            <summary>
            Execute job serializing result to the stream.
            </summary>
            <param name="cancel">Whether the job must be cancelled.</param>
            <param name="stream">Stream.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.ComputeJobHolder.Cancel">
            <summary>
            Cancel the job.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.ComputeJobHolder.Serialize(Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream)">
            <summary>
            Serialize the job to the stream.
            </summary>
            <param name="stream">Stream.</param>
            <returns>True if successfull.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.ComputeJobHolder.Execute0(System.Boolean,System.Object@,System.Boolean@)">
            <summary>
            Internal job execution routine.
            </summary>
            <param name="cancel">Cancel flag.</param>
            <param name="res">Result.</param>
            <param name="success">Success flag.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.ComputeJobHolder.WriteBinary(Apache.Ignite.Core.Binary.IBinaryWriter)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.ComputeJobHolder.CreateJob(Apache.Ignite.Core.Impl.Ignite,Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream)">
            <summary>
            Create job instance.
            </summary>
            <param name="grid">Grid.</param>
            <param name="stream">Stream.</param>
            <returns></returns>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Compute.ComputeJobHolder.Job">
            <summary>
            Job.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Compute.ComputeJobHolder.JobResult">
            <summary>
            Job result.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Compute.ComputeJobResultGenericWrapper`1">
            <summary>
            Wraps non-generic IComputeJobResult in generic form.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Compute.ComputeJobResultGenericWrapper`1._wrappedRes">
            
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.ComputeJobResultGenericWrapper`1.#ctor(Apache.Ignite.Core.Compute.IComputeJobResult{System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Impl.Compute.ComputeJobResultGenericWrapper`1"/> class.
            </summary>
            <param name="jobRes">The job result to wrap.</param>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Compute.ComputeJobResultGenericWrapper`1.Data">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Compute.ComputeJobResultGenericWrapper`1.Exception">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Compute.ComputeJobResultGenericWrapper`1.Job">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Compute.ComputeJobResultGenericWrapper`1.NodeId">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Compute.ComputeJobResultGenericWrapper`1.Cancelled">
            <inheritdoc /> 
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Compute.ComputeJobResultImpl">
            <summary>
            Job result implementation.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Compute.ComputeJobResultImpl._data">
            Data. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Compute.ComputeJobResultImpl._err">
            Exception. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Compute.ComputeJobResultImpl._job">
            Backing job. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Compute.ComputeJobResultImpl._nodeId">
            Node ID. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Compute.ComputeJobResultImpl._cancelled">
            Cancel flag. 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.ComputeJobResultImpl.#ctor(System.Object,System.Exception,Apache.Ignite.Core.Impl.Compute.IComputeJob,System.Guid,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="data">Data.</param>
            <param name="err">Exception.</param>
            <param name="job">Backing job.</param>
            <param name="nodeId">Node ID.</param>
            <param name="cancelled">Cancel flag.</param>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Compute.ComputeJobResultImpl.Data">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Compute.ComputeJobResultImpl.Exception">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Compute.ComputeJobResultImpl.Job">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Compute.ComputeJobResultImpl.NodeId">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Compute.ComputeJobResultImpl.Cancelled">
            <inheritDoc /> 
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Compute.IComputeOutFunc">
            <summary>
            Non-generic version of IComputeFunc{T}.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Compute.ComputeOutFuncWrapper">
            <summary>
            Wraps generic func into a non-generic for internal usage.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Compute.ComputeOutFuncWrapper._func">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Compute.ComputeOutFuncWrapper._invoker">
            
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.ComputeOutFuncWrapper.#ctor(System.Object,System.Func{System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Impl.Compute.ComputeFuncWrapper"/> class.
            </summary>
            <param name="func">The function to wrap.</param>
            <param name="invoker">The function invoker.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.ComputeOutFuncWrapper.Invoke">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.ComputeOutFuncWrapper.WriteBinary(Apache.Ignite.Core.Binary.IBinaryWriter)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.ComputeOutFuncWrapper.#ctor(Apache.Ignite.Core.Binary.IBinaryRawReader)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Impl.Compute.ComputeOutFuncWrapper"/> class.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.ComputeOutFuncWrapper.InjectIgnite(Apache.Ignite.Core.IIgnite)">
            <summary>
            Injects the grid.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Compute.ComputeOutFuncExtensions">
            <summary>
            Extension methods for IComputeOutFunc{T}.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.ComputeOutFuncExtensions.ToNonGeneric``1(Apache.Ignite.Core.Compute.IComputeFunc{``0})">
            <summary>
            Convert to non-generic wrapper.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Compute.IComputeTaskHolder">
            <summary>
            Compute task holder interface used to avoid generics.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.IComputeTaskHolder.Map(Apache.Ignite.Core.Impl.Memory.PlatformMemoryStream)">
            <summary>
            Perform map step.
            </summary>
            <param name="stream">Stream with IN data (topology info) and for OUT data (map result).</param>
            <returns>Map with produced jobs.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.IComputeTaskHolder.JobResultLocal(Apache.Ignite.Core.Impl.Compute.ComputeJobHolder)">
            <summary>
            Process local job result.
            </summary>
            <param name="jobId">Job pointer.</param>
            <returns>Policy.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.IComputeTaskHolder.JobResultRemote(Apache.Ignite.Core.Impl.Compute.ComputeJobHolder,Apache.Ignite.Core.Impl.Memory.PlatformMemoryStream)">
            <summary>
            Process remote job result.
            </summary>
            <param name="jobId">Job pointer.</param>
            <param name="stream">Stream.</param>
            <returns>Policy.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.IComputeTaskHolder.Reduce">
            <summary>
            Perform task reduce.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.IComputeTaskHolder.Complete(System.Int64)">
            <summary>
            Complete task.
            </summary>
            <param name="taskHandle">Task handle.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.IComputeTaskHolder.CompleteWithError(System.Int64,Apache.Ignite.Core.Impl.Memory.PlatformMemoryStream)">
            <summary>
            Complete task with error.
            </summary>
            <param name="taskHandle">Task handle.</param>
            <param name="stream">Stream with serialized exception.</param>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Compute.ComputeTaskHolder`3">
            <summary>
            Compute task holder.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Compute.ComputeTaskHolder`3.EmptyRes">
            Empty results. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Compute.ComputeTaskHolder`3._compute">
            Compute instance. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Compute.ComputeTaskHolder`3._task">
            Actual task. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Compute.ComputeTaskHolder`3._arg">
            Task argument. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Compute.ComputeTaskHolder`3._resCache">
            Results cache flag. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Compute.ComputeTaskHolder`3._fut">
            Task future. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Compute.ComputeTaskHolder`3._resJobs">
            Jobs whose results are cached. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Compute.ComputeTaskHolder`3._ress">
            Cached results. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Compute.ComputeTaskHolder`3._jobHandles">
            Handles for jobs which are not serialized right away. 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.ComputeTaskHolder`3.#ctor(Apache.Ignite.Core.Impl.Ignite,Apache.Ignite.Core.Impl.Compute.ComputeImpl,Apache.Ignite.Core.Compute.IComputeTask{`0,`1,`2},`0)">
            <summary>
            Constructor.
            </summary>
            <param name="grid">Grid.</param>
            <param name="compute">Compute.</param>
            <param name="task">Task.</param>
            <param name="arg">Argument.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.ComputeTaskHolder`3.Map(Apache.Ignite.Core.Impl.Memory.PlatformMemoryStream)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.ComputeTaskHolder`3.WriteJobs(Apache.Ignite.Core.Impl.Binary.BinaryWriter,System.Collections.Generic.IDictionary{Apache.Ignite.Core.Compute.IComputeJob{`1},Apache.Ignite.Core.Cluster.IClusterNode})">
            <summary>
            Writes job map.
            </summary>
            <param name="writer">Writer.</param>
            <param name="map">Map</param>
            <returns>Job handle list.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.ComputeTaskHolder`3.JobResultLocal(Apache.Ignite.Core.Impl.Compute.ComputeJobHolder)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.ComputeTaskHolder`3.JobResultRemote(Apache.Ignite.Core.Impl.Compute.ComputeJobHolder,Apache.Ignite.Core.Impl.Memory.PlatformMemoryStream)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.ComputeTaskHolder`3.Reduce">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.ComputeTaskHolder`3.Complete(System.Int64)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.ComputeTaskHolder`3.CompleteWithError(System.Int64,System.Exception)">
            <summary>
            Complete task with error.
            </summary>
            <param name="taskHandle">Task handle.</param>
            <param name="e">Error.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.ComputeTaskHolder`3.CompleteWithError(System.Int64,Apache.Ignite.Core.Impl.Memory.PlatformMemoryStream)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.ComputeTaskHolder`3.JobHandles(System.Collections.Generic.List{System.Int64})">
            <summary>
            Manually set job handles. Used by closures because they have separate flow for map step.
            </summary>
            <param name="jobHandles">Job handles.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.ComputeTaskHolder`3.JobResult0(Apache.Ignite.Core.Compute.IComputeJobResult{System.Object})">
            <summary>
            Process job result.
            </summary>
            <param name="res">Result.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.ComputeTaskHolder`3.Finish(`2,System.Exception)">
            <summary>
            Finish task.
            </summary>
            <param name="res">Result.</param>
            <param name="err">Error.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Compute.ComputeTaskHolder`3.Clean(System.Int64)">
            <summary>
            Clean-up task resources.
            </summary>
            <param name="taskHandle"></param>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Compute.ComputeTaskHolder`3.Future">
            <summary>
            Task completion future.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Datastream.DataStreamerBatch`2">
            <summary>
            Data streamer batch.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Datastream.DataStreamerBatch`2._queue">
            Queue. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Datastream.DataStreamerBatch`2._rwLock">
            Lock for concurrency. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Datastream.DataStreamerBatch`2._prev">
            Previous batch. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Datastream.DataStreamerBatch`2._size">
            Current queue size.
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Datastream.DataStreamerBatch`2._sndGuard">
            Send guard. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Datastream.DataStreamerBatch`2._fut">
            
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Datastream.DataStreamerBatch`2.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Datastream.DataStreamerBatch`2.#ctor(Apache.Ignite.Core.Impl.Datastream.DataStreamerBatch{`0,`1})">
            <summary>
            Constructor.
            </summary>
            <param name="prev">Previous batch.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Datastream.DataStreamerBatch`2.Add(System.Object,System.Int32)">
            <summary>
            Add object to the batch.
            </summary>
            <param name="val">Value.</param>
            <param name="cnt">Items count.</param>
            <returns>Positive value in case batch is active, -1 in case no more additions are allowed.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Datastream.DataStreamerBatch`2.Send(Apache.Ignite.Core.Impl.Datastream.DataStreamerImpl{`0,`1},System.Int32)">
            <summary>
            Internal send routine.
            </summary>
            <param name="ldr">streamer.</param>
            <param name="plc">Policy.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Datastream.DataStreamerBatch`2.AwaitCompletion">
            <summary>
            Await completion of current and all previous loads.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Datastream.DataStreamerBatch`2.WriteTo(Apache.Ignite.Core.Impl.Binary.BinaryWriter)">
            <summary>
            Write batch content.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Datastream.DataStreamerBatch`2.ParentsCompleted">
            <summary>
            Checck whether all previous batches are completed.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Datastream.DataStreamerBatch`2.Task">
            <summary>
            Gets the task.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Datastream.DataStreamerEntry`2">
            <summary>
            Data streamer entry.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Datastream.DataStreamerEntry`2._key">
            Key. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Datastream.DataStreamerEntry`2._val">
            Value. 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Datastream.DataStreamerEntry`2.#ctor(`0,`1)">
            <summary>
            Constructor.
            </summary>
            <param name="key">Key.</param>
            <param name="val">Value.</param>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Datastream.DataStreamerEntry`2.Key">
            <summary>
            Key.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Datastream.DataStreamerEntry`2.Value">
            <summary>
            Value.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Datastream.IDataStreamer">
            <summary>
            Data streamer internal interface to get rid of generics.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Datastream.IDataStreamer.TopologyChange(System.Int64,System.Int32)">
            <summary>
            Callback invoked on topology size change.
            </summary>
            <param name="topVer">New topology version.</param>
            <param name="topSize">New topology size.</param>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Datastream.DataStreamerImpl`2">
            <summary>
            Data streamer implementation.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Datastream.DataStreamerImpl`2.PlcContinue">
            Policy: continue. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Datastream.DataStreamerImpl`2.PlcClose">
            Policy: close. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Datastream.DataStreamerImpl`2.PlcCancelClose">
            Policy: cancel and close. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Datastream.DataStreamerImpl`2.PlcFlush">
            Policy: flush. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Datastream.DataStreamerImpl`2.OpUpdate">
            Operation: update. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Datastream.DataStreamerImpl`2.OpReceiver">
            Operation: set receiver. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Datastream.DataStreamerImpl`2.OpAllowOverwrite">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Datastream.DataStreamerImpl`2.OpSetAllowOverwrite">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Datastream.DataStreamerImpl`2.OpSkipStore">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Datastream.DataStreamerImpl`2.OpSetSkipStore">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Datastream.DataStreamerImpl`2.OpPerNodeBufferSize">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Datastream.DataStreamerImpl`2.OpSetPerNodeBufferSize">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Datastream.DataStreamerImpl`2.OpPerNodeParallelOps">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Datastream.DataStreamerImpl`2.OpSetPerNodeParallelOps">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Datastream.DataStreamerImpl`2.OpListenTopology">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Datastream.DataStreamerImpl`2.OpGetTimeout">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Datastream.DataStreamerImpl`2.OpSetTimeout">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Datastream.DataStreamerImpl`2._cacheName">
            Cache name. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Datastream.DataStreamerImpl`2._rwLock">
            Lock. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Datastream.DataStreamerImpl`2._closedEvt">
            Closed event. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Datastream.DataStreamerImpl`2._closeFut">
            Close future. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Datastream.DataStreamerImpl`2._hnd">
            GC handle to this streamer. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Datastream.DataStreamerImpl`2._topVer">
            Topology version. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Datastream.DataStreamerImpl`2._topSize">
            Topology size. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Datastream.DataStreamerImpl`2._bufSndSize">
            Buffer send size. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Datastream.DataStreamerImpl`2._batch">
            Current data streamer batch. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Datastream.DataStreamerImpl`2._flusher">
            Flusher. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Datastream.DataStreamerImpl`2._rcv">
            Receiver. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Datastream.DataStreamerImpl`2._rcvHnd">
            Receiver handle. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Datastream.DataStreamerImpl`2._keepBinary">
            Receiver binary mode. 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Datastream.DataStreamerImpl`2.#ctor(Apache.Ignite.Core.Impl.IPlatformTargetInternal,Apache.Ignite.Core.Impl.Binary.Marshaller,System.String,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="target">Target.</param>
            <param name="marsh">Marshaller.</param>
            <param name="cacheName">Cache name.</param>
            <param name="keepBinary">Binary flag.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Datastream.DataStreamerImpl`2.AddData(`0,`1)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Datastream.DataStreamerImpl`2.AddData(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Datastream.DataStreamerImpl`2.AddData(System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Datastream.DataStreamerImpl`2.RemoveData(`0)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Datastream.DataStreamerImpl`2.TryFlush">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Datastream.DataStreamerImpl`2.Flush">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Datastream.DataStreamerImpl`2.Close(System.Boolean)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Datastream.DataStreamerImpl`2.WithKeepBinary``2">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Datastream.DataStreamerImpl`2.Dispose(System.Boolean)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Datastream.DataStreamerImpl`2.Finalize">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Datastream.DataStreamerImpl`2.TopologyChange(System.Int64,System.Int32)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Datastream.DataStreamerImpl`2.Add0(System.Object,System.Int32)">
            <summary>
            Internal add/remove routine.
            </summary>
            <param name="val">Value.</param>
            <param name="cnt">Items count.</param>
            <returns>Future.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Datastream.DataStreamerImpl`2.Flush0(Apache.Ignite.Core.Impl.Datastream.DataStreamerBatch{`0,`1},System.Boolean,System.Int32)">
            <summary>
            Internal flush routine.
            </summary>
            <param name="curBatch"></param>
            <param name="wait">Whether to wait for flush to complete.</param>
            <param name="plc">Whether this is the last batch.</param>
            <returns>Whether this call was able to CAS previous batch</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Datastream.DataStreamerImpl`2.Update(System.Action{Apache.Ignite.Core.Impl.Binary.BinaryWriter})">
            <summary>
            Start write.
            </summary>
            <returns>Writer.</returns>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Datastream.DataStreamerImpl`2.CacheName">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Datastream.DataStreamerImpl`2.AllowOverwrite">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Datastream.DataStreamerImpl`2.SkipStore">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Datastream.DataStreamerImpl`2.PerNodeBufferSize">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Datastream.DataStreamerImpl`2.PerNodeParallelOperations">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Datastream.DataStreamerImpl`2.AutoFlushFrequency">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Datastream.DataStreamerImpl`2.Task">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Datastream.DataStreamerImpl`2.Receiver">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Datastream.DataStreamerImpl`2.Timeout">
            <inheritDoc /> 
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Datastream.DataStreamerImpl`2.Flusher`2">
            <summary>
            Flusher.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Datastream.DataStreamerImpl`2.Flusher`2.StateRunning">
            State: running. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Datastream.DataStreamerImpl`2.Flusher`2.StateStopping">
            State: stopping. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Datastream.DataStreamerImpl`2.Flusher`2.StateStopped">
            State: stopped. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Datastream.DataStreamerImpl`2.Flusher`2._ldrRef">
            Data streamer. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Datastream.DataStreamerImpl`2.Flusher`2._state">
            Finish flag. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Datastream.DataStreamerImpl`2.Flusher`2._freq">
            Flush frequency. 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Datastream.DataStreamerImpl`2.Flusher`2.#ctor(System.WeakReference)">
            <summary>
            Constructor.
            </summary>
            <param name="ldrRef">Data streamer weak reference..</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Datastream.DataStreamerImpl`2.Flusher`2.Run">
            <summary>
            Main flusher routine.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Datastream.DataStreamerImpl`2.Flusher`2.Stop">
            <summary>
            Stop flusher.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Datastream.DataStreamerImpl`2.Flusher`2.RunThread">
            <summary>
            Runs the flusher thread.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Datastream.DataStreamerImpl`2.Flusher`2.Frequency">
            <summary>
            Frequency.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Datastream.DataStreamerRemoveEntry`1">
            <summary>
            Remove marker.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Datastream.DataStreamerRemoveEntry`1._key">
            Key to remove. 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Datastream.DataStreamerRemoveEntry`1.#ctor(`0)">
            <summary>
            Constructor.
            </summary>
            <param name="key">Key.</param>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Datastream.DataStreamerRemoveEntry`1.Key">
            <summary>
            Key.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Datastream.StreamReceiverHolder">
            <summary>
            Binary wrapper for <see cref="T:Apache.Ignite.Core.Datastream.IStreamReceiver`2"/>.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Datastream.StreamReceiverHolder.RcvNormal">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Datastream.StreamReceiverHolder.RcvTransformer">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Datastream.StreamReceiverHolder._rcv">
            Generic receiver. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Datastream.StreamReceiverHolder._invoke">
            Invoker delegate. 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Datastream.StreamReceiverHolder.#ctor(Apache.Ignite.Core.Binary.IBinaryRawReader)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Impl.Datastream.StreamReceiverHolder"/> class.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Datastream.StreamReceiverHolder.#ctor(System.Object,System.Action{System.Object,Apache.Ignite.Core.Impl.Ignite,Apache.Ignite.Core.Impl.IPlatformTargetInternal,Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Impl.Datastream.StreamReceiverHolder"/> class.
            </summary>
            <param name="rcv">Receiver.</param>
            <param name="invoke">Invoke delegate.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Datastream.StreamReceiverHolder.WriteBinary(Apache.Ignite.Core.Binary.IBinaryWriter)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Datastream.StreamReceiverHolder.Receive(Apache.Ignite.Core.Impl.Ignite,Apache.Ignite.Core.Impl.IPlatformTargetInternal,Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream,System.Boolean)">
            <summary>
            Updates cache with batch of entries.
            </summary>
            <param name="grid">The grid.</param>
            <param name="cache">Cache.</param>
            <param name="stream">Stream.</param>
            <param name="keepBinary">Binary flag.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Datastream.StreamReceiverHolder.InvokeReceiver``2(Apache.Ignite.Core.Datastream.IStreamReceiver{``0,``1},Apache.Ignite.Core.Impl.Ignite,Apache.Ignite.Core.Impl.IPlatformTargetInternal,Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream,System.Boolean)">
            <summary>
            Invokes the receiver.
            </summary>
            <param name="receiver">Receiver.</param>
            <param name="grid">Grid.</param>
            <param name="cache">Cache.</param>
            <param name="stream">Stream.</param>
            <param name="keepBinary">Binary flag.</param>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.DataStructures.AtomicLong">
            <summary>
            Atomic long wrapper.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.DataStructures.AtomicLong._name">
            
        </member>
        <member name="M:Apache.Ignite.Core.Impl.DataStructures.AtomicLong.#ctor(Apache.Ignite.Core.Impl.IPlatformTargetInternal,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Impl.DataStructures.AtomicLong"/> class.
            </summary>
            <param name="target">The target.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.DataStructures.AtomicLong.Read">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.DataStructures.AtomicLong.Increment">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.DataStructures.AtomicLong.Add(System.Int64)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.DataStructures.AtomicLong.Decrement">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.DataStructures.AtomicLong.Exchange(System.Int64)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.DataStructures.AtomicLong.CompareExchange(System.Int64,System.Int64)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.DataStructures.AtomicLong.Close">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.DataStructures.AtomicLong.IsClosed">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.DataStructures.AtomicLong.Name">
            <inheritDoc /> 
        </member>
        <member name="T:Apache.Ignite.Core.Impl.DataStructures.AtomicLong.Op">
            Operation codes. 
        </member>
        <member name="T:Apache.Ignite.Core.Impl.DataStructures.AtomicReference`1">
            <summary>
            Atomic reference.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.DataStructures.AtomicReference`1._name">
            
        </member>
        <member name="M:Apache.Ignite.Core.Impl.DataStructures.AtomicReference`1.#ctor(Apache.Ignite.Core.Impl.IPlatformTargetInternal,System.String)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.DataStructures.AtomicReference`1.Read">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.DataStructures.AtomicReference`1.Write(`0)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.DataStructures.AtomicReference`1.CompareExchange(`0,`0)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.DataStructures.AtomicReference`1.Close">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.DataStructures.AtomicReference`1.Name">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.DataStructures.AtomicReference`1.IsClosed">
            <inheritDoc /> 
        </member>
        <member name="T:Apache.Ignite.Core.Impl.DataStructures.AtomicReference`1.Op">
            Opcodes. 
        </member>
        <member name="T:Apache.Ignite.Core.Impl.DataStructures.AtomicSequence">
            <summary>
            Atomic long wrapper.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.DataStructures.AtomicSequence._name">
            
        </member>
        <member name="M:Apache.Ignite.Core.Impl.DataStructures.AtomicSequence.#ctor(Apache.Ignite.Core.Impl.IPlatformTargetInternal,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Impl.DataStructures.AtomicLong"/> class.
            </summary>
            <param name="target">The target.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.DataStructures.AtomicSequence.Read">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.DataStructures.AtomicSequence.Increment">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.DataStructures.AtomicSequence.Add(System.Int64)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.DataStructures.AtomicSequence.Close">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.DataStructures.AtomicSequence.Name">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.DataStructures.AtomicSequence.BatchSize">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.DataStructures.AtomicSequence.IsClosed">
            <inheritDoc /> 
        </member>
        <member name="T:Apache.Ignite.Core.Impl.DataStructures.AtomicSequence.Op">
            
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Events.Events">
            <summary>
            Ignite events.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Events.Events._localFilters">
            Map from user func to local wrapper, needed for invoke/unsubscribe. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Events.Events._clusterGroup">
            Cluster group. 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Events.Events.#ctor(Apache.Ignite.Core.Impl.IPlatformTargetInternal,Apache.Ignite.Core.Cluster.IClusterGroup)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Impl.Events.Events"/> class.
            </summary>
            <param name="target">Target.</param>
            <param name="clusterGroup">Cluster group.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Events.Events.RemoteQuery``1(Apache.Ignite.Core.Events.IEventFilter{``0},System.Nullable{System.TimeSpan},System.Int32[])">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Events.Events.RemoteQueryAsync``1(Apache.Ignite.Core.Events.IEventFilter{``0},System.Nullable{System.TimeSpan},System.Int32[])">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Events.Events.RemoteQuery``1(Apache.Ignite.Core.Events.IEventFilter{``0},System.Nullable{System.TimeSpan},System.Collections.Generic.IEnumerable{System.Int32})">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Events.Events.RemoteQueryAsync``1(Apache.Ignite.Core.Events.IEventFilter{``0},System.Nullable{System.TimeSpan},System.Collections.Generic.IEnumerable{System.Int32})">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Events.Events.RemoteListen``1(System.Int32,System.Nullable{System.TimeSpan},System.Boolean,Apache.Ignite.Core.Events.IEventFilter{``0},Apache.Ignite.Core.Events.IEventFilter{``0},System.Int32[])">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Events.Events.RemoteListen``1(System.Int32,System.Nullable{System.TimeSpan},System.Boolean,Apache.Ignite.Core.Events.IEventFilter{``0},Apache.Ignite.Core.Events.IEventFilter{``0},System.Collections.Generic.IEnumerable{System.Int32})">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Events.Events.StopRemoteListen(System.Guid)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Events.Events.WaitForLocal(System.Int32[])">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Events.Events.WaitForLocalAsync(System.Int32[])">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Events.Events.WaitForLocal(System.Collections.Generic.IEnumerable{System.Int32})">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Events.Events.WaitForLocalAsync(System.Collections.Generic.IEnumerable{System.Int32})">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Events.Events.WaitForLocal``1(Apache.Ignite.Core.Events.IEventFilter{``0},System.Int32[])">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Events.Events.WaitForLocalAsync``1(Apache.Ignite.Core.Events.IEventFilter{``0},System.Int32[])">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Events.Events.WaitForLocal``1(Apache.Ignite.Core.Events.IEventFilter{``0},System.Collections.Generic.IEnumerable{System.Int32})">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Events.Events.WaitForLocalAsync``1(Apache.Ignite.Core.Events.IEventFilter{``0},System.Collections.Generic.IEnumerable{System.Int32})">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Events.Events.LocalQuery(System.Int32[])">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Events.Events.LocalQuery(System.Collections.Generic.IEnumerable{System.Int32})">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Events.Events.RecordLocal(Apache.Ignite.Core.Events.IEvent)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Events.Events.LocalListen``1(Apache.Ignite.Core.Events.IEventListener{``0},System.Int32[])">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Events.Events.LocalListen``1(Apache.Ignite.Core.Events.IEventListener{``0},System.Collections.Generic.IEnumerable{System.Int32})">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Events.Events.StopLocalListen``1(Apache.Ignite.Core.Events.IEventListener{``0},System.Int32[])">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Events.Events.StopLocalListen``1(Apache.Ignite.Core.Events.IEventListener{``0},System.Collections.Generic.IEnumerable{System.Int32})">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Events.Events.EnableLocal(System.Collections.Generic.IEnumerable{System.Int32})">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Events.Events.EnableLocal(System.Int32[])">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Events.Events.DisableLocal(System.Int32[])">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Events.Events.DisableLocal(System.Collections.Generic.IEnumerable{System.Int32})">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Events.Events.GetEnabledEvents">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Events.Events.IsEnabled(System.Int32)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Events.Events.GetFilterHandle``1(Apache.Ignite.Core.Events.IEventFilter{``0})">
            <summary>
            Gets the filter handle.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Events.Events.ReadEvents``1(Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream)">
            <summary>
            Reads events from a binary stream.
            </summary>
            <typeparam name="T">Event type.</typeparam>
            <param name="reader">Reader.</param>
            <returns>Resulting list or null.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Events.Events.ReadEvents``1(Apache.Ignite.Core.Impl.Binary.BinaryReader)">
            <summary>
            Reads events from a binary reader.
            </summary>
            <typeparam name="T">Event type.</typeparam>
            <param name="binaryReader">Reader.</param>
            <returns>Resulting list or null.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Events.Events.GetLocalFilters(System.Object,System.Int32[])">
            <summary>
            Gets local filters by user listener and event type.
            </summary>
            <param name="listener">Listener.</param>
            <param name="types">Types.</param>
            <returns>Collection of local listener wrappers.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Events.Events.LocalListen``1(Apache.Ignite.Core.Events.IEventListener{``0},System.Int32)">
            <summary>
            Adds an event listener for local events.
            </summary>
            <typeparam name="T">Type of events.</typeparam>
            <param name="listener">Predicate that is called on each received event.</param>
            <param name="type">Event type for which this listener will be notified</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Events.Events.CreateLocalListener``1(Apache.Ignite.Core.Events.IEventListener{``0},System.Int32)">
            <summary>
            Creates a user filter wrapper.
            </summary>
            <typeparam name="T">Event object type.</typeparam>
            <param name="listener">Listener.</param>
            <param name="type">Event type.</param>
            <returns>Created wrapper.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Events.Events.InvokeLocalListener``1(Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream,Apache.Ignite.Core.Events.IEventListener{``0})">
            <summary>
            Invokes local filter using data from specified stream.
            </summary>
            <typeparam name="T">Event object type.</typeparam>
            <param name="stream">The stream.</param>
            <param name="listener">The listener.</param>
            <returns>Filter invocation result.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Events.Events.WriteEventTypes(System.Int32[],Apache.Ignite.Core.Binary.IBinaryRawWriter)">
            <summary>
            Writes the event types.
            </summary>
            <param name="types">Types.</param>
            <param name="writer">Writer.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Events.Events.ReadEventTypes(Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream)">
            <summary>
            Writes the event types.
            </summary>
            <param name="reader">Reader.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Events.Events.TypesToArray(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Converts types enumerable to array.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Events.Events.WriteRemoteQuery``1(Apache.Ignite.Core.Events.IEventFilter{``0},System.Nullable{System.TimeSpan},System.Int32[],Apache.Ignite.Core.Binary.IBinaryRawWriter)">
            <summary>
            Writes the remote query.
            </summary>
            <param name="filter">The filter.</param>
            <param name="timeout">The timeout.</param>
            <param name="types">The types.</param>
            <param name="writer">The writer.</param>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Events.Events.ClusterGroup">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Events.Events.Ignite">
            
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Events.Events.Op">
            <summary>
            Opcodes.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Events.Events.LocalEventFilter`1">
            <summary>
            Local user filter wrapper.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.IInteropCallback">
            <summary>
            Interop callback.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.IInteropCallback.Invoke(Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream)">
            <summary>
            Invokes callback.
            </summary>
            <param name="stream">Stream.</param>
            <returns>Invocation result.</returns>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Events.Events.LocalEventFilter`1._marshaller">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Events.Events.LocalEventFilter`1._listener">
            
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Events.Events.LocalEventFilter`1.#ctor(Apache.Ignite.Core.Impl.Binary.Marshaller,Apache.Ignite.Core.Events.IEventFilter{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Impl.Events.Events.LocalEventFilter`1"/> class.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Events.Events.LocalEventFilter`1.Invoke(Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream)">
            <inheritdoc /> 
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Events.Events.LocalHandledEventFilter">
            <summary>
            Local user filter wrapper with handle.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Handle.Handle`1">
            <summary>
            Wrapper over some resource ensuring it's release.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Handle.IHandle">
            <summary>
            Wrapper over some resource ensuring it's release.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Handle.IHandle.Release">
            <summary>
            Release the resource.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Handle.Handle`1._target">
            Target.
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Handle.Handle`1._releaseAction">
            Release action. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Handle.Handle`1._released">
            Release flag. 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Handle.Handle`1.#ctor(`0,System.Action{`0})">
            <summary>
            Constructor.
            </summary>
            <param name="target">Target.</param>
            <param name="releaseAction">Release action.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Handle.Handle`1.Release">
            <summary>
            Release the resource.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Handle.Handle`1.Target">
            <summary>
            Target.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Events.Events.LocalHandledEventFilter.Handle">
            
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Events.Events.LocalHandledEventFilter.Invoke(Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Events.Events.LocalHandledEventFilter.#ctor(System.Func{Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream,System.Boolean},System.Action{System.Func{Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream,System.Boolean}})">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Impl.Events.Events.LocalHandledEventFilter"/> class.
            </summary>
            <param name="invokeFunc">The invoke function.</param>
            <param name="releaseAction">The release action.</param>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Events.RemoteListenEventFilter">
            <summary>
            Event filter/listener holder for RemoteListen.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Events.RemoteListenEventFilter._ignite">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Events.RemoteListenEventFilter._filter">
            
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Events.RemoteListenEventFilter.#ctor(Apache.Ignite.Core.Impl.Ignite,System.Func{Apache.Ignite.Core.Events.IEvent,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Impl.Events.RemoteListenEventFilter"/> class.
            </summary>
            <param name="ignite">The grid.</param>
            <param name="filter">The filter.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Events.RemoteListenEventFilter.Invoke(Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Events.RemoteListenEventFilter.CreateInstance(System.Int64,Apache.Ignite.Core.Impl.Ignite)">
            <summary>
            Creates an instance of this class from a stream.
            </summary>
            <param name="memPtr">Memory pointer.</param>
            <param name="grid">Grid</param>
            <returns>Deserialized instance of <see cref="T:Apache.Ignite.Core.Impl.Events.RemoteListenEventFilter"/></returns>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.ExceptionUtils">
            <summary>
            Managed environment. Acts as a gateway for native code.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.ExceptionUtils.ClsNoClsDefFoundErr">
            NoClassDefFoundError fully-qualified class name which is important during startup phase. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.ExceptionUtils.ClsNoSuchMthdErr">
            NoSuchMethodError fully-qualified class name which is important during startup phase. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.ExceptionUtils.ClsCachePartialUpdateErr">
            InteropCachePartialUpdateException. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.ExceptionUtils.Exs">
            Map with predefined exceptions. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.ExceptionUtils.InnerClassRegex">
            Inner class regex. 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.ExceptionUtils.#cctor">
            <summary>
            Static initializer.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.ExceptionUtils.GetException(Apache.Ignite.Core.Impl.IIgniteInternal,System.String,System.String,System.String,Apache.Ignite.Core.Impl.Binary.BinaryReader,System.Exception)">
            <summary>
            Creates exception according to native code class and message.
            </summary>
            <param name="igniteInt">The ignite.</param>
            <param name="clsName">Exception class name.</param>
            <param name="msg">Exception message.</param>
            <param name="stackTrace">Native stack trace.</param>
            <param name="reader">Error data reader.</param>
            <param name="innerException">Inner exception.</param>
            <returns>Exception.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.ExceptionUtils.ProcessCachePartialUpdateException(Apache.Ignite.Core.Impl.IIgniteInternal,System.String,System.String,Apache.Ignite.Core.Impl.Binary.BinaryReader)">
            <summary>
            Process cache partial update exception.
            </summary>
            <param name="ignite">The ignite.</param>
            <param name="msg">Message.</param>
            <param name="stackTrace">Stack trace.</param>
            <param name="reader">Reader.</param>
            <returns>CachePartialUpdateException.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.ExceptionUtils.GetJvmInitializeException(System.String,System.String,System.String)">
            <summary>
            Create JVM initialization exception.
            </summary>
            <param name="clsName">Class name.</param>
            <param name="msg">Message.</param>
            <param name="stackTrace">Stack trace.</param>
            <returns>Exception.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.ExceptionUtils.ReadNullableList(Apache.Ignite.Core.Impl.Binary.BinaryReader)">
            <summary>
            Reads nullable list.
            </summary>
            <param name="reader">Reader.</param>
            <returns>List.</returns>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Ignite">
            <summary>
            Native Ignite wrapper.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Ignite._cfg">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Ignite._name">
            Grid name. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Ignite._proc">
            Unmanaged node. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Ignite._marsh">
            Marshaller. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Ignite._prj">
            Initial projection. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Ignite._binary">
            Binary. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Ignite._binaryProc">
            Binary processor. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Ignite._lifecycleHandlers">
            Lifecycle handlers. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Ignite._locNode">
            Local node. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Ignite._transactions">
            Transactions facade. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Ignite._cbs">
            Callbacks 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Ignite._nodes">
            Node info cache. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Ignite._clientReconnectTaskCompletionSource">
            Client reconnect task completion source. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Ignite._pluginProcessor">
            Plugin processor. 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Ignite.#ctor(Apache.Ignite.Core.IgniteConfiguration,System.String,Apache.Ignite.Core.Impl.IPlatformTargetInternal,Apache.Ignite.Core.Impl.Binary.Marshaller,System.Collections.Generic.IList{Apache.Ignite.Core.Impl.LifecycleHandlerHolder},Apache.Ignite.Core.Impl.Unmanaged.UnmanagedCallbacks)">
            <summary>
            Constructor.
            </summary>
            <param name="cfg">Configuration.</param>
            <param name="name">Grid name.</param>
            <param name="proc">Interop processor.</param>
            <param name="marsh">Marshaller.</param>
            <param name="lifecycleHandlers">Lifecycle beans.</param>
            <param name="cbs">Callbacks.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Ignite.SetCompactFooter">
            <summary>
            Sets the compact footer setting.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Ignite.OnStart">
            <summary>
            On-start routine.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Ignite.GetCluster">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Ignite.ForLocal">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Ignite.GetCompute">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Ignite.ForNodes(System.Collections.Generic.IEnumerable{Apache.Ignite.Core.Cluster.IClusterNode})">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Ignite.ForNodes(Apache.Ignite.Core.Cluster.IClusterNode[])">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Ignite.ForNodeIds(System.Collections.Generic.IEnumerable{System.Guid})">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Ignite.ForNodeIds(System.Guid[])">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Ignite.ForPredicate(System.Func{Apache.Ignite.Core.Cluster.IClusterNode,System.Boolean})">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Ignite.ForAttribute(System.String,System.String)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Ignite.ForCacheNodes(System.String)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Ignite.ForDataNodes(System.String)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Ignite.ForClientNodes(System.String)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Ignite.ForRemotes">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Ignite.ForDaemons">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Ignite.ForHost(Apache.Ignite.Core.Cluster.IClusterNode)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Ignite.ForRandom">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Ignite.ForOldest">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Ignite.ForYoungest">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Ignite.ForDotNet">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Ignite.ForServers">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Ignite.GetNodes">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Ignite.GetNode(System.Guid)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Ignite.GetNode">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Ignite.GetMetrics">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Ignite.Dispose">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Ignite.Stop(System.Boolean)">
            <summary>
            Internal stop routine.
            </summary>
            <param name="cancel">Cancel flag.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Ignite.BeforeNodeStop">
            <summary>
            Called before node has stopped.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Ignite.AfterNodeStop">
            <summary>
            Called after node has stopped.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Ignite.GetCache``2(System.String)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Ignite.GetOrCreateCache``2(System.String)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Ignite.GetOrCreateCache``2(Apache.Ignite.Core.Cache.Configuration.CacheConfiguration)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Ignite.GetOrCreateCache``2(Apache.Ignite.Core.Cache.Configuration.CacheConfiguration,Apache.Ignite.Core.Cache.Configuration.NearCacheConfiguration)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Ignite.CreateCache``2(System.String)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Ignite.CreateCache``2(Apache.Ignite.Core.Cache.Configuration.CacheConfiguration)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Ignite.CreateCache``2(Apache.Ignite.Core.Cache.Configuration.CacheConfiguration,Apache.Ignite.Core.Cache.Configuration.NearCacheConfiguration)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Ignite.GetOrCreateCache``2(Apache.Ignite.Core.Cache.Configuration.CacheConfiguration,Apache.Ignite.Core.Cache.Configuration.NearCacheConfiguration,Apache.Ignite.Core.Impl.Ignite.Op)">
            <summary>
            Gets or creates the cache.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Ignite.DestroyCache(System.String)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Ignite.GetCache``2(Apache.Ignite.Core.Impl.IPlatformTargetInternal,System.Boolean)">
            <summary>
            Gets cache from specified native cache object.
            </summary>
            <param name="nativeCache">Native cache.</param>
            <param name="keepBinary">Keep binary flag.</param>
            <returns>
            New instance of cache wrapping specified native cache.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Ignite.GetLocalNode">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Ignite.PingNode(System.Guid)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Ignite.GetTopology(System.Int64)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Ignite.ResetMetrics">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Ignite.GetDataStreamer``2(System.String)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Ignite.GetDataStreamer``2(System.String,System.Boolean)">
            <summary>
            Gets the data streamer.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Ignite.GetIgnite">
            <summary>
            Gets the public Ignite interface.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Ignite.GetBinary">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Ignite.GetAffinity(System.String)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Ignite.GetTransactions">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Ignite.GetMessaging">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Ignite.GetEvents">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Ignite.GetServices">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Ignite.GetAtomicLong(System.String,System.Int64,System.Boolean)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Ignite.GetAtomicSequence(System.String,System.Int64,System.Boolean)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Ignite.GetAtomicReference``1(System.String,``0,System.Boolean)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Ignite.GetConfiguration">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Ignite.CreateNearCache``2(System.String,Apache.Ignite.Core.Cache.Configuration.NearCacheConfiguration)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Ignite.GetOrCreateNearCache``2(System.String,Apache.Ignite.Core.Cache.Configuration.NearCacheConfiguration)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Ignite.GetCacheNames">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Ignite.GetPlugin``1(System.String)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Ignite.ResetLostPartitions(System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Ignite.ResetLostPartitions(System.String[])">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Ignite.GetMemoryMetrics">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Ignite.GetMemoryMetrics(System.String)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Ignite.SetActive(System.Boolean)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Ignite.IsActive">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Ignite.GetPersistentStoreMetrics">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Ignite.GetDataRegionMetrics">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Ignite.GetDataRegionMetrics(System.String)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Ignite.GetDataStorageMetrics">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Ignite.GetOrCreateNearCache0``2(System.String,Apache.Ignite.Core.Cache.Configuration.NearCacheConfiguration,Apache.Ignite.Core.Impl.Ignite.Op)">
            <summary>
            Gets or creates near cache.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Ignite.UpdateNodeInfo(System.Int64)">
            <summary>
            Updates the node information from stream.
            </summary>
            <param name="memPtr">Stream ptr.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Ignite.GetNode(System.Nullable{System.Guid})">
            <summary>
            Gets the node from cache.
            </summary>
            <param name="id">Node id.</param>
            <returns>Cached node.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Ignite.OnClientDisconnected">
            <summary>
            Called when local client node has been disconnected from the cluster.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Ignite.OnClientReconnected(System.Boolean)">
            <summary>
            Called when local client node has been reconnected to the cluster.
            </summary>
            <param name="clusterRestarted">Cluster restarted flag.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Ignite.ProcessorReleaseStart">
            <summary>
            Notify processor that it is safe to use.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Ignite.LoggerIsLevelEnabled(Apache.Ignite.Core.Log.LogLevel)">
            <summary>
            Checks whether log level is enabled in Java logger.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Ignite.LoggerLog(Apache.Ignite.Core.Log.LogLevel,System.String,System.String,System.String)">
            <summary>
            Logs to the Java logger.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Ignite.GetExtension(System.Int32)">
            <summary>
            Gets the platform plugin extension.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Ignite.Name">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Ignite.Apache#Ignite#Core#Cluster#IClusterGroup#Ignite">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Ignite.TopologyVersion">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Ignite.ClientReconnectTask">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Ignite.Logger">
            <inheritdoc /> 
        </member>
        <member name="E:Apache.Ignite.Core.Impl.Ignite.Stopping">
            <inheritdoc /> 
        </member>
        <member name="E:Apache.Ignite.Core.Impl.Ignite.Stopped">
            <inheritdoc /> 
        </member>
        <member name="E:Apache.Ignite.Core.Impl.Ignite.ClientDisconnected">
            <inheritdoc /> 
        </member>
        <member name="E:Apache.Ignite.Core.Impl.Ignite.ClientReconnected">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Ignite.ClusterGroup">
            <summary>
            Gets internal projection.
            </summary>
            <returns>Projection.</returns>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Ignite.BinaryProcessor">
            <summary>
            Gets the binary processor.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Ignite.Configuration">
            <summary>
            Configuration.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Ignite.HandleRegistry">
            <summary>
            Handle registry.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Ignite.InteropProcessor">
            <summary>
            Gets the interop processor.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Ignite.PluginProcessor">
            <summary>
            Gets the plugin processor.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Ignite.Op">
            <summary>
            Operation codes for PlatformProcessorImpl calls.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.IgniteManager">
            <summary>
            Native interface manager.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.IgniteManager.CmdJvmMinMemJava">
            Java Command line argument: Xms. Case sensitive. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.IgniteManager.CmdJvmMaxMemJava">
            Java Command line argument: Xmx. Case sensitive. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.IgniteManager.SyncRoot">
            Monitor for DLL load synchronization. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.IgniteManager._ctx">
            First created context. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.IgniteManager._jvmCfg">
            Configuration used on JVM start. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.IgniteManager.Mem">
            Memory manager. 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.IgniteManager.CreateJvmContext(Apache.Ignite.Core.IgniteConfiguration,Apache.Ignite.Core.Impl.Unmanaged.UnmanagedCallbacks,Apache.Ignite.Core.Log.ILogger)">
            <summary>
            Create JVM.
            </summary>
            <param name="cfg">Configuration.</param>
            <param name="cbs">Callbacks.</param>
            <param name="log"></param>
            <returns>Context.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.IgniteManager.DestroyJvm">
            <summary>
            Blocks until JVM stops.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.IgniteManager.CreateJvm(Apache.Ignite.Core.IgniteConfiguration,Apache.Ignite.Core.Impl.Unmanaged.UnmanagedCallbacks)">
            <summary>
            Create JVM.
            </summary>
            <returns>JVM.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.IgniteManager.GetMergedJvmOptions(Apache.Ignite.Core.IgniteConfiguration)">
            <summary>
            Gets JvmOptions collection merged with individual properties (Min/Max mem, etc) according to priority.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.IgniteManager.JvmConfig(Apache.Ignite.Core.IgniteConfiguration)">
            <summary>
            Create JVM configuration value object.
            </summary>
            <param name="cfg">Configuration.</param>
            <returns>JVM configuration.</returns>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.IgniteManager.Memory">
            <summary>
            Memory manager attached to currently running JVM.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.IgniteManager.JvmConfiguration">
            <summary>
            JVM configuration.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.IgniteManager.JvmConfiguration.GetHashCode">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.IgniteManager.JvmConfiguration.Equals(System.Object)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.IgniteManager.JvmConfiguration.ToString">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.IgniteManager.JvmConfiguration.Home">
            <summary>
            Gets or sets the home.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.IgniteManager.JvmConfiguration.Dll">
            <summary>
            Gets or sets the DLL.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.IgniteManager.JvmConfiguration.Classpath">
            <summary>
            Gets or sets the cp.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.IgniteManager.JvmConfiguration.Options">
            <summary>
            Gets or sets the options.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Log.JavaLogger">
            <summary>
            Logger that delegates to Java.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Log.ILogger">
            <summary>
            Defines Ignite logging interface.
            <para/>
            This interface only provides essential log methods.
            All convenience overloads are in <see cref="T:Apache.Ignite.Core.Log.LoggerExtensions"/>.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Log.ILogger.Log(Apache.Ignite.Core.Log.LogLevel,System.String,System.Object[],System.IFormatProvider,System.String,System.String,System.Exception)">
            <summary>
            Logs the specified message.
            </summary>
            <param name="level">The level.</param>
            <param name="message">The message.</param>
            <param name="args">The arguments to format <paramref name="message" />.
            Can be null (formatting will not occur).</param>
            <param name="formatProvider">The format provider. Can be null if <paramref name="args" /> is null.</param>
            <param name="category">The logging category name.</param>
            <param name="nativeErrorInfo">The native error information.</param>
            <param name="ex">The exception. Can be null.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Log.ILogger.IsEnabled(Apache.Ignite.Core.Log.LogLevel)">
            <summary>
            Determines whether the specified log level is enabled.
            </summary>
            <param name="level">The level.</param>
            <returns>Value indicating whether the specified log level is enabled</returns>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Log.JavaLogger._ignite">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Log.JavaLogger._enabledLevels">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Log.JavaLogger._pendingLogs">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Log.JavaLogger._syncRoot">
            
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Log.JavaLogger.SetIgnite(Apache.Ignite.Core.Impl.Ignite)">
            <summary>
            Sets the processor.
            </summary>
            <param name="ignite">The proc.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Log.JavaLogger.Log(Apache.Ignite.Core.Log.LogLevel,System.String,System.Object[],System.IFormatProvider,System.String,System.String,System.Exception)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Log.JavaLogger.IsEnabled(Apache.Ignite.Core.Log.LogLevel)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Log.JavaLogger.Log(Apache.Ignite.Core.Log.LogLevel,System.String,System.String,System.String)">
            <summary>
            Logs the message.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.IgniteUtils">
            <summary>
            Native utility methods.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.IgniteUtils.EnvJavaHome">
            Environment variable: JAVA_HOME. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.IgniteUtils.FileJvmDll">
            File: jvm.dll. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.IgniteUtils.FileIgniteJniDll">
            File: Ignite.Jni.dll. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.IgniteUtils.DirIgniteTmp">
            Prefix for temp directory names. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.IgniteUtils.JvmDllLookupPaths">
            Lookup paths. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.IgniteUtils.JreRegistryKeys">
            Registry lookup paths. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.IgniteUtils._loaded">
            Loaded. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.IgniteUtils._rnd">
            Thread-local random. 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.IgniteUtils.Shuffle``1(System.Collections.Generic.IList{``0})">
            <summary>
            Returns shuffled list copy.
            </summary>
            <returns>Shuffled list copy.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.IgniteUtils.LoadDlls(System.String,Apache.Ignite.Core.Log.ILogger)">
            <summary>
            Load JVM DLL if needed.
            </summary>
            <param name="configJvmDllPath">JVM DLL path from config.</param>
            <param name="log">Log.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.IgniteUtils.CreateInstance``1(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Create new instance of specified class.
            </summary>
            <param name="typeName">Class name</param>
            <param name="props">Properties to set.</param>
            <returns>New Instance.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.IgniteUtils.SetProperties(System.Object,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Set properties on the object.
            </summary>
            <param name="target">Target object.</param>
            <param name="props">Properties.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.IgniteUtils.LoadJvmDll(System.String,Apache.Ignite.Core.Log.ILogger)">
            <summary>
            Loads the JVM DLL.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.IgniteUtils.FormatWin32Error(System.Int32)">
            <summary>
            Formats the Win32 error.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.IgniteUtils.LoadDll(System.String,System.String)">
            <summary>
            Try loading DLLs first using file path, then using it's simple name.
            </summary>
            <param name="filePath"></param>
            <param name="simpleName"></param>
            <returns>Zero in case of success, error code in case of failure.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.IgniteUtils.GetJvmDllPaths(System.String)">
            <summary>
            Gets the JVM DLL paths in order of lookup priority.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.IgniteUtils.UnpackEmbeddedResource(System.String,System.String)">
            <summary>
            Unpacks an embedded resource into a temporary folder and returns the full path of resulting file.
            </summary>
            <param name="resourceName">Resource name.</param>
            <param name="fileName">Name of the resulting file.</param>
            <returns>
            Path to a temp file with an unpacked resource.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.IgniteUtils.WriteResourceToTempFile(System.String,System.String)">
            <summary>
            Writes the resource to temporary file.
            </summary>
            <param name="resource">The resource.</param>
            <param name="name">File name prefix</param>
            <returns>Path to the resulting temp file.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.IgniteUtils.TryCleanTempDirectories">
            <summary>
            Tries to clean temporary directories created with <see cref="M:Apache.Ignite.Core.Impl.IgniteUtils.GetTempDirectoryName"/>.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.IgniteUtils.GetTempDirectoryName">
            <summary>
            Creates a uniquely named, empty temporary directory on disk and returns the full path of that directory.
            </summary>
            <returns>The full path of the temporary directory.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.IgniteUtils.Utf8UnmanagedToString(System.SByte*,System.Int32)">
            <summary>
            Convert unmanaged char array to string.
            </summary>
            <param name="chars">Char array.</param>
            <param name="charsLen">Char array length.</param>
            <returns></returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.IgniteUtils.StringToUtf8Unmanaged(System.String)">
            <summary>
            Convert string to unmanaged byte array.
            </summary>
            <param name="str">String.</param>
            <returns>Unmanaged byte array.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.IgniteUtils.ReadNodes(Apache.Ignite.Core.Impl.Binary.BinaryReader,System.Func{Apache.Ignite.Core.Impl.Cluster.ClusterNodeImpl,System.Boolean})">
            <summary>
            Reads node collection from stream.
            </summary>
            <param name="reader">Reader.</param>
            <param name="pred">The predicate.</param>
            <returns> Nodes list or null. </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.IgniteUtils.EncodePeekModes(Apache.Ignite.Core.Cache.CachePeekMode[])">
            <summary>
            Encodes the peek modes into a single int value.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.IgniteUtils.ThreadLocalRandom">
            <summary>
            Gets thread local random.
            </summary>
            <value>Thread local random.</value>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Handle.HandleRegistry">
            <summary>
            Resource registry.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Handle.HandleRegistry.DfltFastCap">
            Default critical resources capacity. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Handle.HandleRegistry._fast">
            Array for fast-path. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Handle.HandleRegistry._slow">
            Dictionery for slow-path. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Handle.HandleRegistry._fastCap">
            Capacity of fast array. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Handle.HandleRegistry._fastCtr">
            Counter for fast-path. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Handle.HandleRegistry._slowCtr">
            Counter for slow-path. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Handle.HandleRegistry._closed">
            Close flag. 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Handle.HandleRegistry.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Handle.HandleRegistry.#ctor(System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="fastCap">Amount of critical resources this registry can allocate in "fast" mode.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Handle.HandleRegistry.Allocate(System.Object)">
            <summary>
            Allocate a handle for resource.
            </summary>
            <param name="target">Target.</param>
            <returns>Pointer.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Handle.HandleRegistry.AllocateSafe(System.Object)">
            <summary>
            Allocate a handle in safe mode.
            </summary>
            <param name="target">Target.</param>
            <returns>Pointer.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Handle.HandleRegistry.AllocateCritical(System.Object)">
            <summary>
            Allocate a handle for critical resource.
            </summary>
            <param name="target">Target.</param>
            <returns>Pointer.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Handle.HandleRegistry.AllocateCriticalSafe(System.Object)">
            <summary>
            Allocate a handle for critical resource in safe mode.
            </summary>
            <param name="target">Target.</param>
            <returns>Pointer.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Handle.HandleRegistry.Allocate0(System.Object,System.Boolean,System.Boolean)">
            <summary>
            Internal allocation routine.
            </summary>
            <param name="target">Target.</param>
            <param name="critical">Critical flag.</param>
            <param name="safe">Safe flag.</param>
            <returns>Pointer.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Handle.HandleRegistry.Release(System.Int64,System.Boolean)">
            <summary>
            Release handle.
            </summary>
            <param name="id">Identifier.</param>
            <param name="quiet">Whether release must be quiet or not.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Handle.HandleRegistry.Release0(System.Object,System.Boolean)">
            <summary>
            Internal release routine.
            </summary>
            <param name="target">Target.</param>
            <param name="quiet">Whether release must be quiet or not.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Handle.HandleRegistry.Get``1(System.Int64)">
            <summary>
            Gets handle target.
            </summary>
            <param name="id">Identifier.</param>
            <returns>Target.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Handle.HandleRegistry.Get``1(System.Int64,System.Boolean)">
            <summary>
            Gets handle target.
            </summary>
            <param name="id">Identifier.</param>
            <param name="throwOnAbsent">Whether to throw an exception if resource is not found.</param>
            <returns>Target.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Handle.HandleRegistry.Close">
            <summary>
            Close the registry. All resources allocated at the moment of close are
            guaranteed to be released.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Handle.HandleRegistry.GetItems">
            <summary>
            Gets a snapshot of currently referenced objects list.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Handle.HandleRegistry.GetClosedException">
            <summary>
            Create new exception for closed state.
            </summary>
            <returns>Exception.</returns>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Handle.HandleRegistry.Closed">
            <summary>
            Closed flag.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Handle.HandleRegistry.Count">
            <summary>
            Gets the current handle count.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.LifecycleHandlerHolder">
            <summary>
            Lifecycle bean holder.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.LifecycleHandlerHolder._target">
            Target bean. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.LifecycleHandlerHolder._startEvt">
            Whether start event was invoked. 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.LifecycleHandlerHolder.#ctor(Apache.Ignite.Core.Lifecycle.ILifecycleHandler)">
            <summary>
            Constructor.
            </summary>
            <param name="target">Target bean.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.LifecycleHandlerHolder.OnLifecycleEvent(Apache.Ignite.Core.Lifecycle.LifecycleEventType)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.LifecycleHandlerHolder.OnStart(Apache.Ignite.Core.Impl.Ignite)">
            <summary>
            Grid start callback.
            </summary>
            <param name="grid">Ignite instance.</param>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Memory.InteropExternalMemory">
            <summary>
            Interop external memory chunk.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Memory.PlatformMemory">
            <summary>
            Abstract memory chunk.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Memory.IPlatformMemory">
            <summary>
            Platform memory chunk.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.IPlatformMemory.GetStream">
            <summary>
            Gets stream for read/write operations on the given memory chunk.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.IPlatformMemory.Reallocate(System.Int32)">
            <summary>
            Reallocates memory chunk.
            </summary>
            <param name="cap">Minimum capacity.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.IPlatformMemory.Release">
            <summary>
            Release memory.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Memory.IPlatformMemory.Pointer">
            <summary>
            Cross-platform pointer.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Memory.IPlatformMemory.Data">
            <summary>
            Data pointer.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Memory.IPlatformMemory.Capacity">
            <summary>
            CalculateCapacity.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Memory.IPlatformMemory.Length">
            <summary>
            Length.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Memory.PlatformMemory._memPtr">
            Memory pointer. 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformMemory.#ctor(System.Int64)">
            <summary>
            Constructor.
            </summary>
            <param name="memPtr">Memory pointer.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformMemory.GetStream">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformMemory.Reallocate(System.Int32)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformMemory.Release">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Memory.PlatformMemory.Pointer">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Memory.PlatformMemory.Data">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Memory.PlatformMemory.Capacity">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Memory.PlatformMemory.Length">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.InteropExternalMemory.#ctor(System.Int64)">
            <summary>
            Constructor.
            </summary>
            <param name="memPtr">Memory pointer.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.InteropExternalMemory.Reallocate(System.Int32)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.InteropExternalMemory.Release">
            <inheritdoc /> 
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Memory.InteropMemoryUtils">
            <summary>
            Utility methods for interop memory management.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.InteropMemoryUtils.ReallocateExternal(System.Int64,System.Int32)">
            <summary>
            Re-allocate external memory chunk.
            </summary>
            <param name="memPtr">Memory pointer.</param>
            <param name="cap">CalculateCapacity.</param>
            <returns>New memory pointer.</returns>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Memory.PlatformBigEndianMemoryStream">
            <summary>
            Platform memory stream for big endian platforms.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Memory.PlatformMemoryStream">
            <summary>
            Platform memory stream.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream">
            <summary>
            Stream capable of working with binary objects.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream.WriteBool(System.Boolean)">
            <summary>
            Write bool.
            </summary>
            <param name="val">Bool value.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream.ReadBool">
            <summary>
            Read bool.
            </summary>
            <returns>Bool value.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream.WriteBoolArray(System.Boolean[])">
            <summary>
            Write bool array.
            </summary>
            <param name="val">Bool array.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream.ReadBoolArray(System.Int32)">
            <summary>
            Read bool array.
            </summary>
            <param name="cnt">Count.</param>
            <returns>Bool array.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream.WriteByte(System.Byte)">
            <summary>
            Write byte.
            </summary>
            <param name="val">Byte value.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream.ReadByte">
            <summary>
            Read byte.
            </summary>
            <returns>Byte value.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream.WriteByteArray(System.Byte[])">
            <summary>
            Write byte array.
            </summary>
            <param name="val">Byte array.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream.ReadByteArray(System.Int32)">
            <summary>
            Read byte array.
            </summary>
            <param name="cnt">Count.</param>
            <returns>Byte array.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream.WriteShort(System.Int16)">
            <summary>
            Write short.
            </summary>
            <param name="val">Short value.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream.ReadShort">
            <summary>
            Read short.
            </summary>
            <returns>Short value.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream.WriteShortArray(System.Int16[])">
            <summary>
            Write short array.
            </summary>
            <param name="val">Short array.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream.ReadShortArray(System.Int32)">
            <summary>
            Read short array.
            </summary>
            <param name="cnt">Count.</param>
            <returns>Short array.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream.WriteChar(System.Char)">
            <summary>
            Write char.
            </summary>
            <param name="val">Char value.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream.ReadChar">
            <summary>
            Read char.
            </summary>
            <returns>Char value.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream.WriteCharArray(System.Char[])">
            <summary>
            Write char array.
            </summary>
            <param name="val">Char array.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream.ReadCharArray(System.Int32)">
            <summary>
            Read char array.
            </summary>
            <param name="cnt">Count.</param>
            <returns>Char array.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream.WriteInt(System.Int32)">
            <summary>
            Write int.
            </summary>
            <param name="val">Int value.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream.WriteInt(System.Int32,System.Int32)">
            <summary>
            Write int to specific position.
            </summary>
            <param name="writePos">Position.</param>
            <param name="val">Value.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream.ReadInt">
            <summary>
            Read int.
            </summary>
            <returns>Int value.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream.WriteIntArray(System.Int32[])">
            <summary>
            Write int array.
            </summary>
            <param name="val">Int array.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream.ReadIntArray(System.Int32)">
            <summary>
            Read int array.
            </summary>
            <param name="cnt">Count.</param>
            <returns>Int array.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream.WriteLong(System.Int64)">
            <summary>
            Write long.
            </summary>
            <param name="val">Long value.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream.ReadLong">
            <summary>
            Read long.
            </summary>
            <returns>Long value.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream.WriteLongArray(System.Int64[])">
            <summary>
            Write long array.
            </summary>
            <param name="val">Long array.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream.ReadLongArray(System.Int32)">
            <summary>
            Read long array.
            </summary>
            <param name="cnt">Count.</param>
            <returns>Long array.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream.WriteFloat(System.Single)">
            <summary>
            Write float.
            </summary>
            <param name="val">Float value.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream.ReadFloat">
            <summary>
            Read float.
            </summary>
            <returns>Float value.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream.WriteFloatArray(System.Single[])">
            <summary>
            Write float array.
            </summary>
            <param name="val">Float array.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream.ReadFloatArray(System.Int32)">
            <summary>
            Read float array.
            </summary>
            <param name="cnt">Count.</param>
            <returns>Float array.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream.WriteDouble(System.Double)">
            <summary>
            Write double.
            </summary>
            <param name="val">Double value.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream.ReadDouble">
            <summary>
            Read double.
            </summary>
            <returns>Double value.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream.WriteDoubleArray(System.Double[])">
            <summary>
            Write double array.
            </summary>
            <param name="val">Double array.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream.ReadDoubleArray(System.Int32)">
            <summary>
            Read double array.
            </summary>
            <param name="cnt">Count.</param>
            <returns>Double array.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream.WriteString(System.Char*,System.Int32,System.Int32,System.Text.Encoding)">
            <summary>
            Write string.
            </summary>
            <param name="chars">Characters.</param>
            <param name="charCnt">Char count.</param>
            <param name="byteCnt">Byte count.</param>
            <param name="encoding">Encoding.</param>
            <returns>Amounts of bytes written.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write arbitrary data.
            </summary>
            <param name="src">Source array.</param>
            <param name="off">Offset</param>
            <param name="cnt">Count.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read arbitrary data.
            </summary>
            <param name="dest">Destination array.</param>
            <param name="off">Offset.</param>
            <param name="cnt">Count.</param>
            <returns>Amount of bytes read.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream.Write(System.Byte*,System.Int32)">
            <summary>
            Write arbitrary data.
            </summary>
            <param name="src">Source.</param>
            <param name="cnt">Count.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream.Read(System.Byte*,System.Int32)">
            <summary>
            Read arbitrary data.
            </summary>
            <param name="dest">Destination.</param>
            <param name="cnt">Count.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream.GetArray">
            <summary>
            Gets underlying array, avoiding copying if possible.
            </summary>
            <returns>Underlying array.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream.GetArrayCopy">
            <summary>
            Gets underlying data in a new array.
            </summary>
            <returns>New array with data.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream.IsSameArray(System.Byte[])">
            <summary>
            Check whether array passed as argument is the same as the stream hosts.
            </summary>
            <param name="arr">Array.</param>
            <returns><c>True</c> if they are same.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream.Seek(System.Int32,System.IO.SeekOrigin)">
            <summary>
            Seek to the given position.
            </summary>
            <param name="offset">Offset.</param>
            <param name="origin">Seek origin.</param>
            <returns>Position.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream.Apply``2(Apache.Ignite.Core.Impl.Binary.IO.IBinaryStreamProcessor{``0,``1},``0)">
            <summary>
            Applies specified processor to the raw stream data.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream.Flush">
            <summary>
            Flushes the data to underlying storage.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream.Position">
            <summary>
            Position.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream.Remaining">
            <summary>
            Gets remaining bytes in the stream.
            </summary>
            <value>Remaining bytes.</value>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Memory.PlatformMemoryStream.Len1">
            Length: 1 byte. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Memory.PlatformMemoryStream.Len2">
            Length: 2 bytes. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Memory.PlatformMemoryStream.Len4">
            Length: 4 bytes. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Memory.PlatformMemoryStream.Len8">
            Length: 8 bytes. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Memory.PlatformMemoryStream.Shift2">
            Shift: 2 bytes. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Memory.PlatformMemoryStream.Shift4">
            Shift: 4 bytes. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Memory.PlatformMemoryStream.Shift8">
            Shift: 8 bytes. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Memory.PlatformMemoryStream._mem">
            Underlying memory. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Memory.PlatformMemoryStream._data">
            Actual data. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Memory.PlatformMemoryStream._cap">
            CalculateCapacity. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Memory.PlatformMemoryStream._pos">
            Position. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Memory.PlatformMemoryStream._len">
            Length. 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformMemoryStream.#ctor(Apache.Ignite.Core.Impl.Memory.IPlatformMemory)">
            <summary>
            Constructor.
            </summary>
            <param name="mem">Memory.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformMemoryStream.WriteByte(System.Byte)">
            <summary>
            Write byte.
            </summary>
            <param name="val">Byte value.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformMemoryStream.WriteByteArray(System.Byte[])">
            <summary>
            Write byte array.
            </summary>
            <param name="val">Byte array.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformMemoryStream.WriteBool(System.Boolean)">
            <summary>
            Write bool.
            </summary>
            <param name="val">Bool value.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformMemoryStream.WriteBoolArray(System.Boolean[])">
            <summary>
            Write bool array.
            </summary>
            <param name="val">Bool array.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformMemoryStream.WriteShort(System.Int16)">
            <summary>
            Write short.
            </summary>
            <param name="val">Short value.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformMemoryStream.WriteShortArray(System.Int16[])">
            <summary>
            Write short array.
            </summary>
            <param name="val">Short array.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformMemoryStream.WriteChar(System.Char)">
            <summary>
            Write char.
            </summary>
            <param name="val">Char value.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformMemoryStream.WriteCharArray(System.Char[])">
            <summary>
            Write char array.
            </summary>
            <param name="val">Char array.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformMemoryStream.WriteInt(System.Int32)">
            <summary>
            Write int.
            </summary>
            <param name="val">Int value.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformMemoryStream.WriteInt(System.Int32,System.Int32)">
            <summary>
            Write int to specific position.
            </summary>
            <param name="writePos">Position.</param>
            <param name="val">Value.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformMemoryStream.WriteIntArray(System.Int32[])">
            <summary>
            Write int array.
            </summary>
            <param name="val">Int array.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformMemoryStream.WriteLong(System.Int64)">
            <summary>
            Write long.
            </summary>
            <param name="val">Long value.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformMemoryStream.WriteLongArray(System.Int64[])">
            <summary>
            Write long array.
            </summary>
            <param name="val">Long array.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformMemoryStream.WriteFloat(System.Single)">
            <summary>
            Write float.
            </summary>
            <param name="val">Float value.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformMemoryStream.WriteFloatArray(System.Single[])">
            <summary>
            Write float array.
            </summary>
            <param name="val">Float array.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformMemoryStream.WriteDouble(System.Double)">
            <summary>
            Write double.
            </summary>
            <param name="val">Double value.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformMemoryStream.WriteDoubleArray(System.Double[])">
            <summary>
            Write double array.
            </summary>
            <param name="val">Double array.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformMemoryStream.WriteString(System.Char*,System.Int32,System.Int32,System.Text.Encoding)">
            <summary>
            Write string.
            </summary>
            <param name="chars">Characters.</param>
            <param name="charCnt">Char count.</param>
            <param name="byteCnt">Byte count.</param>
            <param name="encoding">Encoding.</param>
            <returns>
            Amounts of bytes written.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformMemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write arbitrary data.
            </summary>
            <param name="src">Source array.</param>
            <param name="off">Offset</param>
            <param name="cnt">Count.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformMemoryStream.Write(System.Byte*,System.Int32)">
            <summary>
            Write arbitrary data.
            </summary>
            <param name="src">Source.</param>
            <param name="cnt">Count.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformMemoryStream.ReadByte">
            <summary>
            Read byte.
            </summary>
            <returns>
            Byte value.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformMemoryStream.ReadByteArray(System.Int32)">
            <summary>
            Read byte array.
            </summary>
            <param name="cnt">Count.</param>
            <returns>
            Byte array.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformMemoryStream.ReadBool">
            <summary>
            Read bool.
            </summary>
            <returns>
            Bool value.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformMemoryStream.ReadBoolArray(System.Int32)">
            <summary>
            Read bool array.
            </summary>
            <param name="cnt">Count.</param>
            <returns>
            Bool array.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformMemoryStream.ReadShort">
            <summary>
            Read short.
            </summary>
            <returns>
            Short value.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformMemoryStream.ReadShortArray(System.Int32)">
            <summary>
            Read short array.
            </summary>
            <param name="cnt">Count.</param>
            <returns>
            Short array.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformMemoryStream.ReadChar">
            <summary>
            Read char.
            </summary>
            <returns>
            Char value.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformMemoryStream.ReadCharArray(System.Int32)">
            <summary>
            Read char array.
            </summary>
            <param name="cnt">Count.</param>
            <returns>
            Char array.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformMemoryStream.ReadInt">
            <summary>
            Read int.
            </summary>
            <returns>
            Int value.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformMemoryStream.ReadIntArray(System.Int32)">
            <summary>
            Read int array.
            </summary>
            <param name="cnt">Count.</param>
            <returns>
            Int array.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformMemoryStream.ReadLong">
            <summary>
            Read long.
            </summary>
            <returns>
            Long value.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformMemoryStream.ReadLongArray(System.Int32)">
            <summary>
            Read long array.
            </summary>
            <param name="cnt">Count.</param>
            <returns>
            Long array.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformMemoryStream.ReadFloat">
            <summary>
            Read float.
            </summary>
            <returns>
            Float value.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformMemoryStream.ReadFloatArray(System.Int32)">
            <summary>
            Read float array.
            </summary>
            <param name="cnt">Count.</param>
            <returns>
            Float array.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformMemoryStream.ReadDouble">
            <summary>
            Read double.
            </summary>
            <returns>
            Double value.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformMemoryStream.ReadDoubleArray(System.Int32)">
            <summary>
            Read double array.
            </summary>
            <param name="cnt">Count.</param>
            <returns>
            Double array.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read arbitrary data.
            </summary>
            <param name="dest">Destination array.</param>
            <param name="off">Offset.</param>
            <param name="cnt">Count.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformMemoryStream.Read(System.Byte*,System.Int32)">
            <summary>
            Read arbitrary data.
            </summary>
            <param name="dest">Destination.</param>
            <param name="cnt">Count.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformMemoryStream.SynchronizeOutput">
            <summary>
            Synchronize stream write opeartions with underlying memory and return current memory pointer.
            <returns>Memory pointer.</returns>
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformMemoryStream.SynchronizeInput">
            <summary>
            Synchronized stream read operations from underlying memory. This is required when stream was passed 
            to Java and something might have been written there.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformMemoryStream.Reset">
            <summary>
            Reset stream state. Sets both position and length to 0.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformMemoryStream.Reuse">
            <summary>
            Reset stream state as if it was just created.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformMemoryStream.Seek(System.Int32,System.IO.SeekOrigin)">
            <summary>
            Seek to the given positoin.
            </summary>
            <param name="offset">Offset.</param>
            <param name="origin">Seek origin.</param>
            <returns>
            Position.
            </returns>
            <exception cref="T:System.ArgumentException">
            Unsupported seek origin:  + origin
            or
            Seek before origin:  + newPos
            </exception>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformMemoryStream.Apply``2(Apache.Ignite.Core.Impl.Binary.IO.IBinaryStreamProcessor{``0,``1},``0)">
            <summary>
            Returns a hash code for the specified byte range.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformMemoryStream.Flush">
            <summary>
            Flushes the data to underlying storage.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformMemoryStream.EnsureWriteCapacityAndShift(System.Int32)">
            <summary>
            Ensure capacity for write and shift position.
            </summary>
            <param name="cnt">Bytes count.</param>
            <returns>Position before shift.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformMemoryStream.EnsureWriteCapacity(System.Int32)">
            <summary>
            Ensure write capacity.
            </summary>
            <param name="reqCap">Required capacity.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformMemoryStream.EnsureReadCapacityAndShift(System.Int32)">
            <summary>
            Ensure capacity for read and shift position.
            </summary>
            <param name="cnt">Bytes count.</param>
            <returns>Position before shift.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformMemoryStream.CopyToAndShift(System.Byte*,System.Int32)">
            <summary>
            Copy (read) some data into destination and shift the stream forward.
            </summary>
            <param name="dest">Destination.</param>
            <param name="cnt">Bytes count.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformMemoryStream.CopyFromAndShift(System.Byte*,System.Int32)">
            <summary>
            Copy (write) some data from source and shift the stream forward.
            </summary>
            <param name="src">Source.</param>
            <param name="cnt">Bytes count.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformMemoryStream.CalculateCapacity(System.Int32,System.Int32)">
            <summary>
            Calculate new capacity.
            </summary>
            <param name="curCap">Current capacity.</param>
            <param name="reqCap">Required capacity.</param>
            <returns>New capacity.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformMemoryStream.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformMemoryStream.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Apache.Ignite.Core.Impl.Memory.PlatformMemoryStream"/> class.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformMemoryStream.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformMemoryStream.GetArray">
            <summary>
            Gets underlying array, avoiding copying if possible.
            </summary>
            <returns>
            Underlying array.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformMemoryStream.GetArrayCopy">
            <summary>
            Gets underlying data in a new array.
            </summary>
            <returns>
            New array with data.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformMemoryStream.IsSameArray(System.Byte[])">
            <summary>
            Check whether array passed as argument is the same as the stream hosts.
            </summary>
            <param name="arr">Array.</param>
            <returns>
              <c>True</c> if they are same.
            </returns>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Memory.PlatformMemoryStream.MemoryPointer">
            <summary>
            Get cross-platform memory pointer for the stream.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Memory.PlatformMemoryStream.Position">
            <summary>
            Position.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Memory.PlatformMemoryStream.Remaining">
            <summary>
            Gets remaining bytes in the stream.
            </summary>
            <value>
            Remaining bytes.
            </value>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Memory.PlatformMemoryStream.Data">
            <summary>
            Gets the data.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformBigEndianMemoryStream.#ctor(Apache.Ignite.Core.Impl.Memory.IPlatformMemory)">
            <summary>
            Constructor.
            </summary>
            <param name="mem"></param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformBigEndianMemoryStream.WriteShort(System.Int16)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformBigEndianMemoryStream.WriteShortArray(System.Int16[])">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformBigEndianMemoryStream.WriteChar(System.Char)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformBigEndianMemoryStream.WriteCharArray(System.Char[])">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformBigEndianMemoryStream.WriteInt(System.Int32)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformBigEndianMemoryStream.WriteInt(System.Int32,System.Int32)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformBigEndianMemoryStream.WriteIntArray(System.Int32[])">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformBigEndianMemoryStream.WriteLong(System.Int64)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformBigEndianMemoryStream.WriteLongArray(System.Int64[])">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformBigEndianMemoryStream.WriteFloat(System.Single)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformBigEndianMemoryStream.WriteFloatArray(System.Single[])">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformBigEndianMemoryStream.WriteDouble(System.Double)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformBigEndianMemoryStream.WriteDoubleArray(System.Double[])">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformBigEndianMemoryStream.ReadShort">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformBigEndianMemoryStream.ReadShortArray(System.Int32)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformBigEndianMemoryStream.ReadChar">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformBigEndianMemoryStream.ReadCharArray(System.Int32)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformBigEndianMemoryStream.ReadInt">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformBigEndianMemoryStream.ReadIntArray(System.Int32)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformBigEndianMemoryStream.ReadLong">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformBigEndianMemoryStream.ReadLongArray(System.Int32)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformBigEndianMemoryStream.ReadFloat">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformBigEndianMemoryStream.ReadFloatArray(System.Int32)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformBigEndianMemoryStream.ReadDouble">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformBigEndianMemoryStream.ReadDoubleArray(System.Int32)">
            <inheritDoc /> 
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Memory.PlatformMemoryManager">
            <summary>
            Memory manager implementation.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Memory.PlatformMemoryManager._dfltCap">
            Default capacity. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Memory.PlatformMemoryManager._threadLocPool">
            Thread-local pool. 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformMemoryManager.#ctor(System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="dfltCap">Default capacity.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformMemoryManager.Allocate">
            <summary>
            Allocate memory.
            </summary>
            <returns>Memory.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformMemoryManager.Allocate(System.Int32)">
            <summary>
            Allocate memory having at least the given capacity.
            </summary>
            <param name="cap">Minimum capacity.</param>
            <returns>Memory.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformMemoryManager.Get(System.Int64)">
            <summary>
            Gets memory from existing pointer.
            </summary>
            <param name="memPtr">Cross-platform memory pointer.</param>
            <returns>Memory.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformMemoryManager.Pool">
            <summary>
            Gets or creates thread-local memory pool.
            </summary>
            <returns>Memory pool.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformMemoryManager.GetExternalMemory(System.Int64)">
            <summary>
            Gets the external memory.
            </summary>
            <param name="memPtr">Cross-platform memory pointer.</param>
            <returns>Memory.</returns>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Memory.PlatformMemoryPool">
            <summary>
            Platform memory pool.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Memory.PlatformMemoryPool._mem1">
            First pooled memory chunk. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Memory.PlatformMemoryPool._mem2">
            Second pooled memory chunk. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Memory.PlatformMemoryPool._mem3">
            Third pooled memory chunk. 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformMemoryPool.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformMemoryPool.Allocate(System.Int32)">
            <summary>
            Allocate memory chunk, optionally pooling it.
            </summary>
            <param name="cap">Minimum capacity.</param>
            <returns>Memory chunk</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformMemoryPool.Reallocate(System.Int64,System.Int32)">
            <summary>
            Re-allocate existing pool memory chunk.
            </summary>
            <param name="memPtr">Memory pointer.</param>
            <param name="cap">Minimum capacity.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformMemoryPool.Release(System.Int64)">
            <summary>
            Release pooled memory chunk.
            </summary>
            <param name="memPtr">Memory pointer.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformMemoryPool.Get(System.Int64)">
            <summary>
            Get pooled memory chunk.
            </summary>
            <param name="memPtr">Memory pointer.</param>
            <returns>Memory chunk.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformMemoryPool.ReleaseHandle">
            <inheritdoc /> 
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Memory.PlatformMemoryUtils">
            <summary>
            Utility methods for platform memory management.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Memory.PlatformMemoryUtils.PoolHdrLen">
            Header length. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Memory.PlatformMemoryUtils.PoolHdrOffMem1">
            Pool header offset: first memory chunk. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Memory.PlatformMemoryUtils.PoolHdrOffMem2">
            Pool header offset: second memory chunk. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Memory.PlatformMemoryUtils.PoolHdrOffMem3">
            Pool header offset: third memory chunk. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Memory.PlatformMemoryUtils.MemHdrLen">
            Memory chunk header length. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Memory.PlatformMemoryUtils.MemHdrOffCap">
            Offset: capacity. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Memory.PlatformMemoryUtils.MemHdrOffLen">
            Offset: length. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Memory.PlatformMemoryUtils.MemHdrOffFlags">
            Offset: flags. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Memory.PlatformMemoryUtils.FlagExt">
            Flag: external. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Memory.PlatformMemoryUtils.FlagPooled">
            Flag: pooled. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Memory.PlatformMemoryUtils.FlagAcquired">
            Flag: whether this pooled memory chunk is acquired. 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformMemoryUtils.GetData(System.Int64)">
            <summary>
            Gets data pointer for the given memory chunk.
            </summary>
            <param name="memPtr">Memory pointer.</param>
            <returns>Data pointer.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformMemoryUtils.GetCapacity(System.Int64)">
            <summary>
            Gets capacity for the given memory chunk.
            </summary>
            <param name="memPtr">Memory pointer.</param>
            <returns>CalculateCapacity.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformMemoryUtils.GetLength(System.Int64)">
            <summary>
            Gets length for the given memory chunk.
            </summary>
            <param name="memPtr">Memory pointer.</param>
            <returns>Length.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformMemoryUtils.SetLength(System.Int64,System.Int32)">
            <summary>
            Sets length for the given memory chunk.
            </summary>
            <param name="memPtr">Memory pointer.</param>
            <param name="len">Length.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformMemoryUtils.GetFlags(System.Int64)">
            <summary>
            Gets flags for the given memory chunk.
            </summary>
            <param name="memPtr">Memory pointer.</param>
            <returns>Flags.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformMemoryUtils.SetFlags(System.Int64,System.Int32)">
            <summary>
            Sets flags for the given memory chunk.
            </summary>
            <param name="memPtr">Memory pointer.</param>
            <param name="flags">Flags.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformMemoryUtils.IsExternal(System.Int32)">
            <summary>
            Check whether flags denote that this memory chunk is external.
            </summary>
            <param name="flags">Flags.</param>
            <returns><c>True</c> if owned by Java.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformMemoryUtils.IsPooled(System.Int32)">
            <summary>
            Check whether flags denote pooled memory chunk.
            </summary>
            <param name="flags">Flags.</param>
            <returns><c>True</c> if pooled.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformMemoryUtils.IsAcquired(System.Int64)">
            <summary>
            Check whether this memory chunk is pooled and acquired.
            </summary>
            <param name="memPtr">Memory pointer.</param>
            <returns><c>True</c> if acquired.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformMemoryUtils.IsAcquired(System.Int32)">
            <summary>
            Check whether flags denote pooled and acquired memory chunk.
            </summary>
            <param name="flags">Flags.</param>
            <returns><c>True</c> if acquired.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformMemoryUtils.AllocateUnpooled(System.Int32)">
            <summary>
            Allocate unpooled memory chunk.
            </summary>
            <param name="cap">Minimum capacity.</param>
            <returns>New memory pointer.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformMemoryUtils.ReallocateUnpooled(System.Int64,System.Int32)">
            <summary>
            Reallocate unpooled memory chunk.
            </summary>
            <param name="memPtr">Memory pointer.</param>
            <param name="cap">Minimum capacity.</param>
            <returns></returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformMemoryUtils.ReleaseUnpooled(System.Int64)">
            <summary>
            Release unpooled memory chunk.
            </summary>
            <param name="memPtr">Memory pointer.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformMemoryUtils.AllocatePool">
            <summary>
            Allocate pool memory.
            </summary>
            <returns>Pool pointer.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformMemoryUtils.ReleasePool(System.Int64)">
            <summary>
            Release pool memory.
            </summary>
            <param name="poolPtr">Pool pointer.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformMemoryUtils.AllocatePooled(System.Int64,System.Int32)">
            <summary>
            Allocate pooled memory chunk.
            </summary>
            <param name="poolPtr">Pool pointer.</param>
            <param name="cap">CalculateCapacity.</param>
            <returns>Memory pointer or <c>0</c> in case there are no free memory chunks in the pool.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformMemoryUtils.AllocatePooled0(System.Int64,System.Int32)">
            <summary>
            Internal pooled memory chunk allocation routine.
            </summary>
            <param name="memPtr">Memory pointer.</param>
            <param name="cap">CalculateCapacity.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformMemoryUtils.ReallocatePooled(System.Int64,System.Int32)">
            <summary>
            Reallocate pooled memory chunk.
            </summary>
            <param name="memPtr">Memory pointer.</param>
            <param name="cap">Minimum capacity.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformMemoryUtils.ReleasePooled(System.Int64)">
            <summary>
            Release pooled memory chunk.
            </summary>
            <param name="memPtr">Memory pointer.</param>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Memory.PlatformMemoryUtils.Memcpy">
            memcpy function handle. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Memory.PlatformMemoryUtils.MemcpyInverted">
            Whether src and dest arguments are inverted. 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformMemoryUtils.#cctor">
            <summary>
            Static initializer.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformMemoryUtils.CopyMemory(System.Void*,System.Void*,System.Int32)">
            <summary>
            Unsafe memory copy routine.
            </summary>
            <param name="src">Source.</param>
            <param name="dest">Destination.</param>
            <param name="len">Length.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformMemoryUtils.CopyMemory(System.Byte*,System.Byte*,System.Int32)">
            <summary>
            Unsafe memory copy routine.
            </summary>
            <param name="src">Source.</param>
            <param name="dest">Destination.</param>
            <param name="len">Length.</param>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Memory.PlatformMemoryUtils.MemCopy">
            Array copy delegate. 
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Memory.PlatformPooledMemory">
            <summary>
            Platform pooled memory chunk.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Memory.PlatformPooledMemory._stream">
            Cached stream. 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformPooledMemory.#ctor(System.Int64)">
            <summary>
            Constructor.
            </summary>
            <param name="memPtr">Memory pointer.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformPooledMemory.GetStream">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformPooledMemory.Reallocate(System.Int32)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformPooledMemory.Release">
            <inheritdoc /> 
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Memory.PlatformUnpooledMemory">
            <summary>
            Platform unpooled memory chunk.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformUnpooledMemory.#ctor(System.Int64)">
            <summary>
            Constructor.
            </summary>
            <param name="memPtr">Memory pointer.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformUnpooledMemory.Reallocate(System.Int32)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Memory.PlatformUnpooledMemory.Release">
            <inheritdoc /> 
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Messaging.MessageListenerHolder">
            <summary>
            Non-generic binary message listener wrapper.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Messaging.MessageListenerHolder._invoker">
            Invoker function that takes key and value and invokes wrapped IMessageListener 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Messaging.MessageListenerHolder._ignite">
            Current Ignite instance. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Messaging.MessageListenerHolder._filter">
            Underlying filter. 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Messaging.MessageListenerHolder.#ctor(Apache.Ignite.Core.Impl.Ignite,System.Object,System.Func{System.Guid,System.Object,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Impl.Messaging.MessageListenerHolder"/> class.
            </summary>
            <param name="grid">Grid.</param>
            <param name="filter">The <see cref="T:Apache.Ignite.Core.Messaging.IMessageListener`1"/> to wrap.</param>
            <param name="invoker">The invoker func that takes key and value and invokes wrapped IMessageListener.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Messaging.MessageListenerHolder.Invoke(Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream)">
            <summary>
            Invoke the filter.
            </summary>
            <param name="input">Input.</param>
            <returns></returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Messaging.MessageListenerHolder.Release">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Messaging.MessageListenerHolder.CreateLocal``1(Apache.Ignite.Core.Impl.Ignite,Apache.Ignite.Core.Messaging.IMessageListener{``0})">
            <summary>
            Creates local holder instance.
            </summary>
            <param name="grid">Ignite instance.</param>
            <param name="listener">Filter.</param>
            <returns>
            New instance of <see cref="T:Apache.Ignite.Core.Impl.Messaging.MessageListenerHolder"/>
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Messaging.MessageListenerHolder.CreateRemote(Apache.Ignite.Core.Impl.Ignite,System.Int64)">
            <summary>
            Creates remote holder instance.
            </summary>
            <param name="grid">Grid.</param>
            <param name="memPtr">Memory pointer.</param>
            <returns>Deserialized instance of <see cref="T:Apache.Ignite.Core.Impl.Messaging.MessageListenerHolder"/></returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Messaging.MessageListenerHolder.GetInvoker(System.Object)">
            <summary>
            Gets the invoker func.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Messaging.MessageListenerHolder.WriteBinary(Apache.Ignite.Core.Binary.IBinaryWriter)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Messaging.MessageListenerHolder.#ctor(Apache.Ignite.Core.Impl.Binary.BinaryReader)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Impl.Messaging.MessageListenerHolder"/> class.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Messaging.MessageListenerHolder.Filter">
            <summary>
            Wrapped <see cref="T:Apache.Ignite.Core.Messaging.IMessageListener`1"/>.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Messaging.MessageListenerHolder.DestroyAction">
            <summary>
            Destroy callback.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Messaging.Messaging">
            <summary>
            Messaging functionality.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Messaging.IMessaging">
            <summary>
            Provides functionality for topic-based message exchange among nodes defined by <see cref="T:Apache.Ignite.Core.Cluster.IClusterGroup"/>.
            Users can send ordered and unordered messages to various topics. Note that same topic name
            cannot be reused between ordered and unordered messages.
            <para/>
            All members are thread-safe and may be used concurrently from multiple threads.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Messaging.IMessaging.Send(System.Object,System.Object)">
            <summary>
            Sends a message with specified topic to the nodes in the underlying cluster group.
            </summary>
            <param name="message">Message to send.</param>
            <param name="topic">Topic to send to, null for default topic.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Messaging.IMessaging.SendAll(System.Collections.IEnumerable,System.Object)">
            <summary>
            Sends messages with specified topic to the nodes in the underlying cluster group.
            </summary>
            <param name="messages">Messages to send.</param>
            <param name="topic">Topic to send to, null for default topic.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Messaging.IMessaging.SendOrdered(System.Object,System.Object,System.Nullable{System.TimeSpan})">
            <summary>
            Sends a message with specified topic to the nodes in the underlying cluster group.
            Messages sent with this method will arrive in the same order they were sent. Note that if a topic is used
            for ordered messages, then it cannot be reused for non-ordered messages.
            </summary>
            <param name="message">Message to send.</param>
            <param name="topic">Topic to send to, null for default topic.</param>
            <param name="timeout">
            Message timeout, null for for default value from configuration (IgniteConfiguration.getNetworkTimeout).
            </param>
        </member>
        <member name="M:Apache.Ignite.Core.Messaging.IMessaging.LocalListen``1(Apache.Ignite.Core.Messaging.IMessageListener{``0},System.Object)">
            <summary>
            Adds local listener for given topic on local node only. This listener will be notified whenever any
            node within the cluster group will send a message for a given topic to this node. Local listen
            subscription will happen regardless of whether local node belongs to this cluster group or not.
            </summary>
            <param name="listener">
            Predicate that is called on each received message. If predicate returns false,
            then it will be unsubscribed from any further notifications.
            </param>
            <param name="topic">Topic to subscribe to.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Messaging.IMessaging.StopLocalListen``1(Apache.Ignite.Core.Messaging.IMessageListener{``0},System.Object)">
            <summary>
            Unregisters local listener for given topic on local node only.
            </summary>
            <param name="listener">Listener predicate.</param>
            <param name="topic">Topic to unsubscribe from.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Messaging.IMessaging.RemoteListen``1(Apache.Ignite.Core.Messaging.IMessageListener{``0},System.Object)">
            <summary>
            Adds a message listener for a given topic to all nodes in the cluster group (possibly including
            this node if it belongs to the cluster group as well). This means that any node within this cluster
            group can send a message for a given topic and all nodes within the cluster group will receive
            listener notifications.
            </summary>
            <param name="listener">
            Predicate that is called on each received message. If predicate returns false,
            then it will be unsubscribed from any further notifications.
            </param>
            <param name="topic">Topic to unsubscribe from.</param>
            <returns>
            Operation ID that can be passed to <see cref="M:Apache.Ignite.Core.Messaging.IMessaging.StopRemoteListen(System.Guid)"/> method to stop listening.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Messaging.IMessaging.RemoteListenAsync``1(Apache.Ignite.Core.Messaging.IMessageListener{``0},System.Object)">
            <summary>
            Adds a message listener for a given topic to all nodes in the cluster group (possibly including
            this node if it belongs to the cluster group as well). This means that any node within this cluster
            group can send a message for a given topic and all nodes within the cluster group will receive
            listener notifications.
            </summary>
            <param name="listener">
            Predicate that is called on each received message. If predicate returns false,
            then it will be unsubscribed from any further notifications.
            </param>
            <param name="topic">Topic to unsubscribe from.</param>
            <returns>
            Operation ID that can be passed to <see cref="M:Apache.Ignite.Core.Messaging.IMessaging.StopRemoteListen(System.Guid)"/> method to stop listening.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Messaging.IMessaging.StopRemoteListen(System.Guid)">
            <summary>
            Unregisters all listeners identified with provided operation ID on all nodes in the cluster group.
            </summary>
            <param name="opId">Operation ID that was returned from <see cref="M:Apache.Ignite.Core.Messaging.IMessaging.RemoteListen``1(Apache.Ignite.Core.Messaging.IMessageListener{``0},System.Object)"/> method.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Messaging.IMessaging.StopRemoteListenAsync(System.Guid)">
            <summary>
            Unregisters all listeners identified with provided operation ID on all nodes in the cluster group.
            </summary>
            <param name="opId">Operation ID that was returned from <see cref="M:Apache.Ignite.Core.Messaging.IMessaging.RemoteListen``1(Apache.Ignite.Core.Messaging.IMessageListener{``0},System.Object)"/> method.</param>
        </member>
        <member name="P:Apache.Ignite.Core.Messaging.IMessaging.ClusterGroup">
            <summary>
            Gets the cluster group to which this instance belongs.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Messaging.Messaging._funcMap">
            Map from user (func+topic) -> id, needed for unsubscription. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Messaging.Messaging._ignite">
            Grid 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Messaging.Messaging._clusterGroup">
            Cluster group. 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Messaging.Messaging.#ctor(Apache.Ignite.Core.Impl.IPlatformTargetInternal,Apache.Ignite.Core.Cluster.IClusterGroup)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Impl.Messaging.Messaging"/> class.
            </summary>
            <param name="target">Target.</param>
            <param name="prj">Cluster group.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Messaging.Messaging.Send(System.Object,System.Object)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Messaging.Messaging.SendAll(System.Collections.IEnumerable,System.Object)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Messaging.Messaging.SendOrdered(System.Object,System.Object,System.Nullable{System.TimeSpan})">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Messaging.Messaging.LocalListen``1(Apache.Ignite.Core.Messaging.IMessageListener{``0},System.Object)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Messaging.Messaging.StopLocalListen``1(Apache.Ignite.Core.Messaging.IMessageListener{``0},System.Object)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Messaging.Messaging.RemoteListen``1(Apache.Ignite.Core.Messaging.IMessageListener{``0},System.Object)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Messaging.Messaging.RemoteListenAsync``1(Apache.Ignite.Core.Messaging.IMessageListener{``0},System.Object)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Messaging.Messaging.StopRemoteListen(System.Guid)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Messaging.Messaging.StopRemoteListenAsync(System.Guid)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Messaging.Messaging.GetKey(System.Object,System.Object)">
            <summary>
            Gets the key for user-provided filter and topic.
            </summary>
            <param name="filter">Filter.</param>
            <param name="topic">Topic.</param>
            <returns>Compound dictionary key.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Messaging.Messaging.RemoteListen``2(Apache.Ignite.Core.Messaging.IMessageListener{``0},System.Object,System.Func{System.Action{Apache.Ignite.Core.Binary.IBinaryRawWriter},System.Func{Apache.Ignite.Core.Impl.Binary.BinaryReader,System.Guid},``1})">
            <summary>
            Remotes listen.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Messaging.Messaging.ClusterGroup">
            <inheritdoc /> 
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Messaging.Messaging.Op">
            <summary>
            Opcodes.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.NativeMethods">
            <summary>
            Native methods.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.NativeMethods.ERROR_BAD_EXE_FORMAT">
            <summary>
            ERROR_BAD_EXE_FORMAT constant.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.NativeMethods.ERROR_MOD_NOT_FOUND">
            <summary>
            ERROR_MOD_NOT_FOUND constant.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.NativeMethods.LoadLibrary(System.String)">
            <summary>
            Load DLL with WinAPI.
            </summary>
            <param name="path">Path to dll.</param>
            <returns></returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.NativeMethods.GetTotalPhysicalMemory">
            <summary>
            Gets the total physical memory.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.NativeMethods.GlobalMemoryStatusEx(Apache.Ignite.Core.Impl.NativeMethods.MEMORYSTATUSEX@)">
            <summary>
            Globals the memory status.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.NativeMethods.MEMORYSTATUSEX.Init">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Impl.NativeMethods.MEMORYSTATUSEX"/> struct.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Binary.IO.BinaryStreamBase">
            <summary>
            Base class for managed and unmanaged data streams.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.IO.BinaryStreamBase.ByteZero">
            Byte: zero. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.IO.BinaryStreamBase.ByteOne">
            Byte: one. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.IO.BinaryStreamBase.LittleEndian">
            LITTLE_ENDIAN flag. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.IO.BinaryStreamBase.Pos">
            Position. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.IO.BinaryStreamBase._disposed">
            Disposed flag. 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.BinaryStreamBase.WriteByte(System.Byte)">
            <summary>
            Write byte.
            </summary>
            <param name="val">Byte value.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.BinaryStreamBase.ReadByte">
            <summary>
            Read byte.
            </summary>
            <returns>
            Byte value.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.BinaryStreamBase.WriteByteArray(System.Byte[])">
            <summary>
            Write byte array.
            </summary>
            <param name="val">Byte array.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.BinaryStreamBase.WriteByteArray0(System.Byte[],System.Byte*)">
            <summary>
            Internal routine to write byte array.
            </summary>
            <param name="val">Byte array.</param>
            <param name="data">Data pointer.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.BinaryStreamBase.ReadByteArray(System.Int32)">
            <summary>
            Read byte array.
            </summary>
            <param name="cnt">Count.</param>
            <returns>
            Byte array.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.BinaryStreamBase.ReadByteArray0(System.Int32,System.Byte*)">
            <summary>
            Internal routine to read byte array.
            </summary>
            <param name="len">Array length.</param>
            <param name="data">Data pointer.</param>
            <returns>Byte array</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.BinaryStreamBase.WriteBool(System.Boolean)">
            <summary>
            Write bool.
            </summary>
            <param name="val">Bool value.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.BinaryStreamBase.ReadBool">
            <summary>
            Read bool.
            </summary>
            <returns>
            Bool value.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.BinaryStreamBase.WriteBoolArray(System.Boolean[])">
            <summary>
            Write bool array.
            </summary>
            <param name="val">Bool array.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.BinaryStreamBase.WriteBoolArray0(System.Boolean[],System.Byte*)">
            <summary>
            Internal routine to write bool array.
            </summary>
            <param name="val">Bool array.</param>
            <param name="data">Data pointer.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.BinaryStreamBase.ReadBoolArray(System.Int32)">
            <summary>
            Read bool array.
            </summary>
            <param name="cnt">Count.</param>
            <returns>
            Bool array.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.BinaryStreamBase.ReadBoolArray0(System.Int32,System.Byte*)">
            <summary>
            Internal routine to read bool array.
            </summary>
            <param name="len">Array length.</param>
            <param name="data">Data pointer.</param>
            <returns>Bool array</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.BinaryStreamBase.WriteShort(System.Int16)">
            <summary>
            Write short.
            </summary>
            <param name="val">Short value.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.BinaryStreamBase.WriteShort0(System.Int16,System.Byte*)">
            <summary>
            Internal routine to write short value.
            </summary>
            <param name="val">Short value.</param>
            <param name="data">Data pointer.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.BinaryStreamBase.ReadShort">
            <summary>
            Read short.
            </summary>
            <returns>
            Short value.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.BinaryStreamBase.ReadShort0(System.Byte*)">
            <summary>
            Internal routine to read short value.
            </summary>
            <param name="data">Data pointer.</param>
            <returns>Short value</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.BinaryStreamBase.WriteShortArray(System.Int16[])">
            <summary>
            Write short array.
            </summary>
            <param name="val">Short array.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.BinaryStreamBase.WriteShortArray0(System.Int16[],System.Byte*,System.Int32)">
            <summary>
            Internal routine to write short array.
            </summary>
            <param name="val">Short array.</param>
            <param name="data">Data pointer.</param>
            <param name="cnt">Bytes count.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.BinaryStreamBase.ReadShortArray(System.Int32)">
            <summary>
            Read short array.
            </summary>
            <param name="cnt">Count.</param>
            <returns>
            Short array.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.BinaryStreamBase.ReadShortArray0(System.Int32,System.Byte*,System.Int32)">
            <summary>
            Internal routine to read short array.
            </summary>
            <param name="len">Array length.</param>
            <param name="data">Data pointer.</param>
            <param name="cnt">Bytes count.</param>
            <returns>Short array</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.BinaryStreamBase.WriteChar(System.Char)">
            <summary>
            Write char.
            </summary>
            <param name="val">Char value.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.BinaryStreamBase.ReadChar">
            <summary>
            Read char.
            </summary>
            <returns>
            Char value.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.BinaryStreamBase.WriteCharArray(System.Char[])">
            <summary>
            Write char array.
            </summary>
            <param name="val">Char array.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.BinaryStreamBase.WriteCharArray0(System.Char[],System.Byte*,System.Int32)">
            <summary>
            Internal routine to write char array.
            </summary>
            <param name="val">Char array.</param>
            <param name="data">Data pointer.</param>
            <param name="cnt">Bytes count.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.BinaryStreamBase.ReadCharArray(System.Int32)">
            <summary>
            Read char array.
            </summary>
            <param name="cnt">Count.</param>
            <returns>
            Char array.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.BinaryStreamBase.ReadCharArray0(System.Int32,System.Byte*,System.Int32)">
            <summary>
            Internal routine to read char array.
            </summary>
            <param name="len">Count.</param>
            <param name="data">Data pointer.</param>
            <param name="cnt">Bytes count.</param>
            <returns>Char array</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.BinaryStreamBase.WriteInt(System.Int32)">
            <summary>
            Write int.
            </summary>
            <param name="val">Int value.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.BinaryStreamBase.WriteInt(System.Int32,System.Int32)">
            <summary>
            Write int to specific position.
            </summary>
            <param name="writePos">Position.</param>
            <param name="val">Value.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.BinaryStreamBase.WriteInt0(System.Int32,System.Byte*)">
            <summary>
            Internal routine to write int value.
            </summary>
            <param name="val">Int value.</param>
            <param name="data">Data pointer.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.BinaryStreamBase.ReadInt">
            <summary>
            Read int.
            </summary>
            <returns>
            Int value.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.BinaryStreamBase.ReadInt0(System.Byte*)">
            <summary>
            Internal routine to read int value.
            </summary>
            <param name="data">Data pointer.</param>
            <returns>Int value</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.BinaryStreamBase.WriteIntArray(System.Int32[])">
            <summary>
            Write int array.
            </summary>
            <param name="val">Int array.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.BinaryStreamBase.WriteIntArray0(System.Int32[],System.Byte*,System.Int32)">
            <summary>
            Internal routine to write int array.
            </summary>
            <param name="val">Int array.</param>
            <param name="data">Data pointer.</param>
            <param name="cnt">Bytes count.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.BinaryStreamBase.ReadIntArray(System.Int32)">
            <summary>
            Read int array.
            </summary>
            <param name="cnt">Count.</param>
            <returns>
            Int array.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.BinaryStreamBase.ReadIntArray0(System.Int32,System.Byte*,System.Int32)">
            <summary>
            Internal routine to read int array.
            </summary>
            <param name="len">Count.</param>
            <param name="data">Data pointer.</param>
            <param name="cnt">Bytes count.</param>
            <returns>Int array</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.BinaryStreamBase.WriteFloat(System.Single)">
            <summary>
            Write float.
            </summary>
            <param name="val">Float value.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.BinaryStreamBase.ReadFloat">
            <summary>
            Read float.
            </summary>
            <returns>
            Float value.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.BinaryStreamBase.WriteFloatArray(System.Single[])">
            <summary>
            Write float array.
            </summary>
            <param name="val">Float array.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.BinaryStreamBase.WriteFloatArray0(System.Single[],System.Byte*,System.Int32)">
            <summary>
            Internal routine to write float array.
            </summary>
            <param name="val">Int array.</param>
            <param name="data">Data pointer.</param>
            <param name="cnt">Bytes count.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.BinaryStreamBase.ReadFloatArray(System.Int32)">
            <summary>
            Read float array.
            </summary>
            <param name="cnt">Count.</param>
            <returns>
            Float array.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.BinaryStreamBase.ReadFloatArray0(System.Int32,System.Byte*,System.Int32)">
            <summary>
            Internal routine to read float array.
            </summary>
            <param name="len">Count.</param>
            <param name="data">Data pointer.</param>
            <param name="cnt">Bytes count.</param>
            <returns>Float array</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.BinaryStreamBase.WriteLong(System.Int64)">
            <summary>
            Write long.
            </summary>
            <param name="val">Long value.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.BinaryStreamBase.WriteLong0(System.Int64,System.Byte*)">
            <summary>
            Internal routine to write long value.
            </summary>
            <param name="val">Long value.</param>
            <param name="data">Data pointer.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.BinaryStreamBase.ReadLong">
            <summary>
            Read long.
            </summary>
            <returns>
            Long value.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.BinaryStreamBase.ReadLong0(System.Byte*)">
            <summary>
            Internal routine to read long value.
            </summary>
            <param name="data">Data pointer.</param>
            <returns>Long value</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.BinaryStreamBase.WriteLongArray(System.Int64[])">
            <summary>
            Write long array.
            </summary>
            <param name="val">Long array.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.BinaryStreamBase.WriteLongArray0(System.Int64[],System.Byte*,System.Int32)">
            <summary>
            Internal routine to write long array.
            </summary>
            <param name="val">Long array.</param>
            <param name="data">Data pointer.</param>
            <param name="cnt">Bytes count.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.BinaryStreamBase.ReadLongArray(System.Int32)">
            <summary>
            Read long array.
            </summary>
            <param name="cnt">Count.</param>
            <returns>
            Long array.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.BinaryStreamBase.ReadLongArray0(System.Int32,System.Byte*,System.Int32)">
            <summary>
            Internal routine to read long array.
            </summary>
            <param name="len">Count.</param>
            <param name="data">Data pointer.</param>
            <param name="cnt">Bytes count.</param>
            <returns>Long array</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.BinaryStreamBase.WriteDouble(System.Double)">
            <summary>
            Write double.
            </summary>
            <param name="val">Double value.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.BinaryStreamBase.ReadDouble">
            <summary>
            Read double.
            </summary>
            <returns>
            Double value.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.BinaryStreamBase.WriteDoubleArray(System.Double[])">
            <summary>
            Write double array.
            </summary>
            <param name="val">Double array.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.BinaryStreamBase.WriteDoubleArray0(System.Double[],System.Byte*,System.Int32)">
            <summary>
            Internal routine to write double array.
            </summary>
            <param name="val">Double array.</param>
            <param name="data">Data pointer.</param>
            <param name="cnt">Bytes count.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.BinaryStreamBase.ReadDoubleArray(System.Int32)">
            <summary>
            Read double array.
            </summary>
            <param name="cnt">Count.</param>
            <returns>
            Double array.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.BinaryStreamBase.ReadDoubleArray0(System.Int32,System.Byte*,System.Int32)">
            <summary>
            Internal routine to read double array.
            </summary>
            <param name="len">Count.</param>
            <param name="data">Data pointer.</param>
            <param name="cnt">Bytes count.</param>
            <returns>Double array</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.BinaryStreamBase.WriteString(System.Char*,System.Int32,System.Int32,System.Text.Encoding)">
            <summary>
            Write string.
            </summary>
            <param name="chars">Characters.</param>
            <param name="charCnt">Char count.</param>
            <param name="byteCnt">Byte count.</param>
            <param name="encoding">Encoding.</param>
            <returns>
            Amounts of bytes written.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.BinaryStreamBase.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write arbitrary data.
            </summary>
            <param name="src">Source array.</param>
            <param name="off">Offset</param>
            <param name="cnt">Count.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.BinaryStreamBase.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read arbitrary data.
            </summary>
            <param name="dest">Destination array.</param>
            <param name="off">Offset.</param>
            <param name="cnt">Count.</param>
            <returns>
            Amount of bytes read.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.BinaryStreamBase.Write(System.Byte*,System.Int32)">
            <summary>
            Write arbitrary data.
            </summary>
            <param name="src">Source.</param>
            <param name="cnt">Count.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.BinaryStreamBase.WriteInternal(System.Byte*,System.Int32,System.Byte*)">
            <summary>
            Internal write routine.
            </summary>
            <param name="src">Source.</param>
            <param name="cnt">Count.</param>
            <param name="data">Data (dsetination).</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.BinaryStreamBase.Read(System.Byte*,System.Int32)">
            <summary>
            Read arbitrary data.
            </summary>
            <param name="dest">Destination.</param>
            <param name="cnt">Count.</param>
            <returns></returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.BinaryStreamBase.ReadInternal(System.Byte*,System.Byte*,System.Int32)">
            <summary>
            Internal read routine.
            </summary>
            <param name="src">Source</param>
            <param name="dest">Destination.</param>
            <param name="cnt">Count.</param>
            <returns>Amount of bytes written.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.BinaryStreamBase.GetArray">
            <summary>
            Gets underlying array, avoiding copying if possible.
            </summary>
            <returns>
            Underlying array.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.BinaryStreamBase.GetArrayCopy">
            <summary>
            Gets underlying data in a new array.
            </summary>
            <returns>
            New array with data.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.BinaryStreamBase.IsSameArray(System.Byte[])">
            <summary>
            Check whether array passed as argument is the same as the stream hosts.
            </summary>
            <param name="arr">Array.</param>
            <returns>
              <c>True</c> if they are same.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.BinaryStreamBase.Seek(System.Int32,System.IO.SeekOrigin)">
            <summary>
            Seek to the given position.
            </summary>
            <param name="offset">Offset.</param>
            <param name="origin">Seek origin.</param>
            <returns>
            Position.
            </returns>
            <exception cref="T:System.ArgumentException">
            Unsupported seek origin:  + origin
            or
            Seek before origin:  + newPos
            </exception>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.BinaryStreamBase.Apply``2(Apache.Ignite.Core.Impl.Binary.IO.IBinaryStreamProcessor{``0,``1},``0)">
            <summary>
            Returns a hash code for the specified byte range.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.BinaryStreamBase.Flush">
            <summary>
            Flushes the data to underlying storage.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.BinaryStreamBase.Dispose">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.BinaryStreamBase.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.BinaryStreamBase.EnsureWriteCapacity(System.Int32)">
            <summary>
            Ensure capacity for write.
            </summary>
            <param name="cnt">Bytes count.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.BinaryStreamBase.EnsureWriteCapacityAndShift(System.Int32)">
            <summary>
            Ensure capacity for write and shift position.
            </summary>
            <param name="cnt">Bytes count.</param>
            <returns>Position before shift.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.BinaryStreamBase.EnsureReadCapacity(System.Int32)">
            <summary>
            Ensure capacity for read.
            </summary>
            <param name="cnt">Bytes count.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.BinaryStreamBase.EnsureReadCapacityAndShift(System.Int32)">
            <summary>
            Ensure capacity for read and shift position.
            </summary>
            <param name="cnt">Bytes count.</param>
            <returns>Position before shift.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.BinaryStreamBase.ShiftWrite(System.Int32)">
            <summary>
            Shift position due to write
            </summary>
            <param name="cnt">Bytes count.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.BinaryStreamBase.ShiftRead(System.Int32)">
            <summary>
            Shift position due to read.
            </summary>
            <param name="cnt">Bytes count.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.BinaryStreamBase.Capacity(System.Int32,System.Int32)">
            <summary>
            Calculate new capacity.
            </summary>
            <param name="curCap">Current capacity.</param>
            <param name="reqCap">Required capacity.</param>
            <returns>New capacity.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.BinaryStreamBase.CopyMemory(System.Byte*,System.Byte*,System.Int32)">
            <summary>
            Unsafe memory copy routine.
            </summary>
            <param name="src">Source.</param>
            <param name="dest">Destination.</param>
            <param name="len">Length.</param>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.IO.BinaryStreamBase.Position">
            <summary>
            Position.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.IO.BinaryStreamBase.Remaining">
            <summary>
            Gets remaining bytes in the stream.
            </summary>
            <value>
                Remaining bytes.
            </value>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Binary.IO.BinaryHeapStream">
            <summary>
            Binary onheap stream.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.IO.BinaryHeapStream._data">
            Data array. 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.BinaryHeapStream.#ctor(System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="cap">Initial capacity.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.BinaryHeapStream.#ctor(System.Byte[])">
            <summary>
            Constructor.
            </summary>
            <param name="data">Data array.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.BinaryHeapStream.WriteByte(System.Byte)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.BinaryHeapStream.ReadByte">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.BinaryHeapStream.WriteByteArray(System.Byte[])">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.BinaryHeapStream.ReadByteArray(System.Int32)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.BinaryHeapStream.WriteBoolArray(System.Boolean[])">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.BinaryHeapStream.ReadBoolArray(System.Int32)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.BinaryHeapStream.WriteShort(System.Int16)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.BinaryHeapStream.ReadShort">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.BinaryHeapStream.WriteShortArray(System.Int16[])">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.BinaryHeapStream.ReadShortArray(System.Int32)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.BinaryHeapStream.WriteCharArray(System.Char[])">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.BinaryHeapStream.ReadCharArray(System.Int32)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.BinaryHeapStream.WriteInt(System.Int32)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.BinaryHeapStream.WriteInt(System.Int32,System.Int32)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.BinaryHeapStream.ReadInt">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.BinaryHeapStream.WriteIntArray(System.Int32[])">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.BinaryHeapStream.ReadIntArray(System.Int32)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.BinaryHeapStream.WriteFloatArray(System.Single[])">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.BinaryHeapStream.ReadFloatArray(System.Int32)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.BinaryHeapStream.WriteLong(System.Int64)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.BinaryHeapStream.ReadLong">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.BinaryHeapStream.WriteLongArray(System.Int64[])">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.BinaryHeapStream.ReadLongArray(System.Int32)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.BinaryHeapStream.WriteDoubleArray(System.Double[])">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.BinaryHeapStream.ReadDoubleArray(System.Int32)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.BinaryHeapStream.WriteString(System.Char*,System.Int32,System.Int32,System.Text.Encoding)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.BinaryHeapStream.Write(System.Byte*,System.Int32)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.BinaryHeapStream.Read(System.Byte*,System.Int32)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.BinaryHeapStream.GetArray">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.BinaryHeapStream.GetArrayCopy">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.BinaryHeapStream.IsSameArray(System.Byte[])">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.BinaryHeapStream.Apply``2(Apache.Ignite.Core.Impl.Binary.IO.IBinaryStreamProcessor{``0,``1},``0)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.BinaryHeapStream.Dispose(System.Boolean)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.BinaryHeapStream.EnsureWriteCapacity(System.Int32)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IO.BinaryHeapStream.EnsureReadCapacity(System.Int32)">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.IO.BinaryHeapStream.Remaining">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.IO.BinaryHeapStream.InternalArray">
            <summary>
            Internal array.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Binary.IBinaryTypeDescriptor">
            <summary>
            Type descriptor.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IBinaryTypeDescriptor.UpdateWriteStructure(Apache.Ignite.Core.Impl.Binary.Structure.BinaryStructure,System.Int32,System.Collections.Generic.IList{Apache.Ignite.Core.Impl.Binary.Structure.BinaryStructureUpdate})">
            <summary>
            Update write type structure.
            </summary>
            <param name="exp">Expected type structure.</param>
            <param name="pathIdx">Path index.</param>
            <param name="updates">Recorded updates.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IBinaryTypeDescriptor.UpdateReadStructure(Apache.Ignite.Core.Impl.Binary.Structure.BinaryStructure,System.Int32,System.Collections.Generic.IList{Apache.Ignite.Core.Impl.Binary.Structure.BinaryStructureUpdate})">
            <summary>
            Update read type structure.
            </summary>
            <param name="exp">Expected type structure.</param>
            <param name="pathIdx">Path index.</param>
            <param name="updates">Recorded updates.</param>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.IBinaryTypeDescriptor.Type">
            <summary>
            Type.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.IBinaryTypeDescriptor.TypeId">
            <summary>
            Type ID.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.IBinaryTypeDescriptor.TypeName">
            <summary>
            Type name.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.IBinaryTypeDescriptor.UserType">
            <summary>
            User type flag.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.IBinaryTypeDescriptor.KeepDeserialized">
            <summary>
            Whether to cache deserialized value in IBinaryObject
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.IBinaryTypeDescriptor.NameMapper">
            <summary>
            Name converter.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.IBinaryTypeDescriptor.IdMapper">
            <summary>
            Mapper.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.IBinaryTypeDescriptor.Serializer">
            <summary>
            Serializer.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.IBinaryTypeDescriptor.AffinityKeyFieldName">
            <summary>
            Affinity key field name.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.IBinaryTypeDescriptor.IsEnum">
            <summary>
            Gets a value indicating whether this descriptor represents an enum type.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.IBinaryTypeDescriptor.WriterTypeStructure">
            <summary>
            Write type structure.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.IBinaryTypeDescriptor.ReaderTypeStructure">
            <summary>
            Read type structure.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.IBinaryTypeDescriptor.Schema">
            <summary>
            Gets the schema.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.IBinaryTypeDescriptor.IsRegistered">
            <summary>
            Gets a value indicating whether this descriptor is registered in the cluster.
            </summary>
            <value>
            <c>true</c> if this instance is registered; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Binary.Metadata.IBinaryTypeHandler">
            <summary>
            Binary type metadata handler.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.Metadata.IBinaryTypeHandler.OnFieldWrite(System.Int32,System.String,System.Int32)">
            <summary>
            Callback invoked when named field is written.
            </summary>
            <param name="fieldId">Field ID.</param>
            <param name="fieldName">Field name.</param>
            <param name="typeId">Field type ID.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.Metadata.IBinaryTypeHandler.OnObjectWriteFinished">
            <summary>
            Callback invoked when object write is finished and it is time to collect missing metadata.
            </summary>
            <returns>Collected metadata.</returns>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Binary.Metadata.BinaryTypeHashsetHandler">
            <summary>
            Metadata handler which uses hash set to determine whether field was already written or not.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.Metadata.BinaryTypeHashsetHandler.EmptyFields">
            Empty fields collection. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.Metadata.BinaryTypeHashsetHandler._ids">
            IDs known when serialization starts. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.Metadata.BinaryTypeHashsetHandler._fieldMap">
            New fields. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.Metadata.BinaryTypeHashsetHandler._newType">
            
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.Metadata.BinaryTypeHashsetHandler.#ctor(System.Collections.Generic.ICollection{System.Int32},System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="ids">IDs.</param>
            <param name="newType">True is metadata for type is not saved.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.Metadata.BinaryTypeHashsetHandler.OnFieldWrite(System.Int32,System.String,System.Int32)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.Metadata.BinaryTypeHashsetHandler.OnObjectWriteFinished">
            <inheritdoc /> 
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Binary.Metadata.BinaryTypeHolder">
            <summary>
            Metadata for particular type.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.Metadata.BinaryTypeHolder._typeId">
            Type ID. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.Metadata.BinaryTypeHolder._typeName">
            Type name. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.Metadata.BinaryTypeHolder._affKeyFieldName">
            Affinity key field name. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.Metadata.BinaryTypeHolder._isEnum">
            Enum flag. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.Metadata.BinaryTypeHolder._marshaller">
            Marshaller. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.Metadata.BinaryTypeHolder._ids">
            Collection of know field IDs. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.Metadata.BinaryTypeHolder._meta">
            Last known unmodifiable metadata which is given to the user. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.Metadata.BinaryTypeHolder._saved">
            Saved flag (set if type metadata was saved at least once). 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.Metadata.BinaryTypeHolder.#ctor(System.Int32,System.String,System.String,System.Boolean,Apache.Ignite.Core.Impl.Binary.Marshaller)">
            <summary>
            Constructor.
            </summary>
            <param name="typeId">Type ID.</param>
            <param name="typeName">Type name.</param>
            <param name="affKeyFieldName">Affinity key field name.</param>
            <param name="isEnum">Enum flag.</param>
            <param name="marshaller">The marshaller.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.Metadata.BinaryTypeHolder.Saved">
            <summary>
            Get saved flag.
            </summary>
            <returns>True if type metadata was saved at least once.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.Metadata.BinaryTypeHolder.GetFieldIds">
            <summary>
            Currently cached field IDs.
            </summary>
            <returns>Cached field IDs.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.Metadata.BinaryTypeHolder.Merge(Apache.Ignite.Core.Impl.Binary.Metadata.BinaryType)">
            <summary>
            Merge newly sent field metadatas into existing ones.
            </summary>
            <param name="meta">Binary type to merge.</param>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Binary.Metadata.BinaryType">
            <summary>
            Binary metadata implementation.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Binary.IBinaryType">
            <summary>
            Binary type metadata.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryType.GetFieldTypeName(System.String)">
            <summary>
            Gets field type for the given field name.
            </summary>
            <param name="fieldName">Field name.</param>
            <returns>Field type.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryType.GetEnumValues">
            <summary>
            Gets the enum values.
            Only valid when <see cref="P:Apache.Ignite.Core.Binary.IBinaryType.IsEnum"/> is true.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Binary.IBinaryType.TypeName">
            <summary>
            Gets type name.
            </summary>
            <returns>Type name.</returns>
        </member>
        <member name="P:Apache.Ignite.Core.Binary.IBinaryType.Fields">
            <summary>
            Gets field names for that type.
            </summary>
            <returns>Field names.</returns>
        </member>
        <member name="P:Apache.Ignite.Core.Binary.IBinaryType.AffinityKeyFieldName">
            <summary>
            Gets optional affinity key field name.
            </summary>
            <returns>Affinity key field name or null in case it is not provided.</returns>
        </member>
        <member name="P:Apache.Ignite.Core.Binary.IBinaryType.IsEnum">
            <summary>
            Gets a value indicating whether this type represents an enum.
            </summary>
            <value>   
            <c>true</c> if this instance represents an enum; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Apache.Ignite.Core.Binary.IBinaryType.TypeId">
            <summary>
            Gets the type identifier.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.Metadata.BinaryType.Empty">
            Empty metadata. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.Metadata.BinaryType.EmptyDict">
            Empty dictionary. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.Metadata.BinaryType.EmptyList">
            Empty list. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.Metadata.BinaryType.TypeNames">
            Type name map. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.Metadata.BinaryType._fields">
            Fields. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.Metadata.BinaryType._enumNameToValue">
            Enum values. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.Metadata.BinaryType._enumValueToName">
            Enum names. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.Metadata.BinaryType._isEnum">
            Enum flag. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.Metadata.BinaryType._typeId">
            Type id. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.Metadata.BinaryType._typeName">
            Type name. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.Metadata.BinaryType._affinityKeyFieldName">
            Aff key field name. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.Metadata.BinaryType._descriptor">
            Type descriptor. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.Metadata.BinaryType._marshaller">
            Marshaller. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.Metadata.BinaryType._schema">
            Schema. 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.Metadata.BinaryType.#cctor">
            <summary>
            Initializes the <see cref="T:Apache.Ignite.Core.Impl.Binary.Metadata.BinaryType"/> class.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.Metadata.BinaryType.GetTypeName(System.Int32)">
            <summary>
            Get type name by type ID.
            </summary>
            <param name="typeId">Type ID.</param>
            <returns>Type name.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.Metadata.BinaryType.#ctor(Apache.Ignite.Core.Impl.Binary.BinaryReader,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Impl.Binary.Metadata.BinaryType"/> class.
            </summary>
            <param name="reader">The reader.</param>
            <param name="readSchemas">Whether to read schemas.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.Metadata.BinaryType.#ctor(Apache.Ignite.Core.Impl.Binary.IBinaryTypeDescriptor,Apache.Ignite.Core.Impl.Binary.Marshaller,System.Collections.Generic.IDictionary{System.String,Apache.Ignite.Core.Impl.Binary.Metadata.BinaryField})">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Impl.Binary.Metadata.BinaryType"/> class.
            </summary>
            <param name="desc">Descriptor.</param>
            <param name="marshaller">Marshaller.</param>
            <param name="fields">Fields.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.Metadata.BinaryType.#ctor(System.Int32,System.String,System.Collections.Generic.IDictionary{System.String,Apache.Ignite.Core.Impl.Binary.Metadata.BinaryField},System.String,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.Int32},Apache.Ignite.Core.Impl.Binary.Marshaller)">
            <summary>
            Constructor.
            </summary>
            <param name="typeId">Type ID.</param>
            <param name="typeName">Type name.</param>
            <param name="fields">Fields.</param>
            <param name="affKeyFieldName">Affinity key field name.</param>
            <param name="isEnum">Enum flag.</param>
            <param name="enumValues">Enum values.</param>
            <param name="marshaller">Marshaller.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.Metadata.BinaryType.GetFieldTypeName(System.String)">
            <summary>
            Gets field type for the given field name.
            </summary>
            <param name="fieldName">Field name.</param>
            <returns>
            Field type.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.Metadata.BinaryType.GetEnumValues">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.Metadata.BinaryType.GetFieldsMap">
            <summary>
            Gets fields map.
            </summary>
            <returns>Fields map.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.Metadata.BinaryType.UpdateFields(System.Collections.Generic.IDictionary{System.String,Apache.Ignite.Core.Impl.Binary.Metadata.BinaryField})">
            <summary>
            Updates the fields.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.Metadata.BinaryType.GetEnumValue(System.String)">
            <summary>
            Gets the enum value by name.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.Metadata.BinaryType.GetEnumName(System.Int32)">
            <summary>
            Gets the name of the enum value.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.Metadata.BinaryType.GetEnumValues(Apache.Ignite.Core.Impl.Binary.IBinaryTypeDescriptor)">
            <summary>
            Gets the enum values.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.Metadata.BinaryType.GetEnumValueAsInt(System.Type,System.Object)">
            <summary>
            Gets the enum value as int.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.Metadata.BinaryType.TypeId">
            <summary>
            Type ID.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.Metadata.BinaryType.TypeName">
            <summary>
            Gets type name.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.Metadata.BinaryType.Fields">
            <summary>
            Gets field names for that type.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.Metadata.BinaryType.AffinityKeyFieldName">
            <summary>
            Gets optional affinity key field name.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.Metadata.BinaryType.IsEnum">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.Metadata.BinaryType.Descriptor">
            <summary>
            Gets the descriptor.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.Metadata.BinaryType.EnumValuesMap">
            <summary>
            Gets the enum values map.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.Metadata.BinaryType.Schema">
            <summary>
            Gets the schema.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Binary.BinaryBuilderField">
            <summary>
            Binary builder field.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryBuilderField.RmvMarker">
            Remove marker. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryBuilderField._type">
            Type. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryBuilderField._value">
            Value. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryBuilderField._writeAction">
            Write action. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryBuilderField._typeId">
            Type id. 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryBuilderField.#ctor(System.Type,System.Object,System.Byte,System.Action{Apache.Ignite.Core.Impl.Binary.BinaryWriter,System.Object})">
            <summary>
            Constructor.
            </summary>
            <param name="type">Type.</param>
            <param name="value">Value.</param>
            <param name="typeId">The type identifier.</param>
            <param name="writeAction">Optional write action.</param>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.BinaryBuilderField.Type">
            <summary>
            Type.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.BinaryBuilderField.Value">
            <summary>
            Value.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.BinaryBuilderField.WriteAction">
            <summary>
            Gets the write action.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.BinaryBuilderField.TypeId">
            <summary>
            Gets the type identifier.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Binary.BinaryObjectBuilder">
            <summary>
            Binary builder implementation.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Binary.IBinaryObjectBuilder">
            <summary>
            binary object builder. Provides ability to build binary objects dynamically
            without having class definitions.
            <para />
            Note that type ID is required in order to build binary object. Usually it is
            enough to provide a simple type name and Ignite will generate the type ID
            automatically.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryObjectBuilder.GetField``1(System.String)">
            <summary>
            Get object field value. If value is another binary object, then
            builder for this object will be returned. If value is a container
            for other objects (array, ICollection, IDictionary), then container
            will be returned with primitive types in deserialized form and
            binary objects as builders. Any change in builder or collection
            returned through this method will be reflected in the resulting
            binary object after build.
            </summary>
            <param name="fieldName">Field name.</param>
            <returns>Field value.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryObjectBuilder.SetField``1(System.String,``0)">
            <summary>
            Set object field value. Value can be of any type including other
            <see cref="T:Apache.Ignite.Core.Binary.IBinaryObject"/> and other builders.
            </summary>
            <param name="fieldName">Field name.</param>
            <param name="val">Field value.</param>
            <returns>Current builder instance.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryObjectBuilder.RemoveField(System.String)">
            <summary>
            Remove object field.
            </summary>
            <param name="fieldName">Field name.</param>
            <returns>Current builder instance.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryObjectBuilder.Build">
            <summary>
            Build the object.
            </summary>
            <returns>Resulting binary object.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryObjectBuilder.SetArrayField``1(System.String,``0[])">
            <summary>
            Sets the array field.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="val">The value.</param>
            <returns>Current builder instance.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryObjectBuilder.SetBooleanField(System.String,System.Boolean)">
            <summary>
            Sets the boolean field.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="val">The value.</param>
            <returns>Current builder instance.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryObjectBuilder.SetBooleanArrayField(System.String,System.Boolean[])">
            <summary>
            Sets the boolean array field.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="val">The value.</param>
            <returns>Current builder instance.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryObjectBuilder.SetByteField(System.String,System.Byte)">
            <summary>
            Sets the byte field.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="val">The value.</param>
            <returns>Current builder instance.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryObjectBuilder.SetByteArrayField(System.String,System.Byte[])">
            <summary>
            Sets the byte array field.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="val">The value.</param>
            <returns>Current builder instance.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryObjectBuilder.SetCharField(System.String,System.Char)">
            <summary>
            Sets the char field.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="val">The value.</param>
            <returns>Current builder instance.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryObjectBuilder.SetCharArrayField(System.String,System.Char[])">
            <summary>
            Sets the char array field.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="val">The value.</param>
            <returns>Current builder instance.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryObjectBuilder.SetCollectionField(System.String,System.Collections.ICollection)">
            <summary>
            Sets the collection field.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="val">The value.</param>
            <returns>Current builder instance.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryObjectBuilder.SetDecimalField(System.String,System.Nullable{System.Decimal})">
            <summary>
            Sets the decimal field.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="val">The value.</param>
            <returns>Current builder instance.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryObjectBuilder.SetDecimalArrayField(System.String,System.Nullable{System.Decimal}[])">
            <summary>
            Sets the decimal array field.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="val">The value.</param>
            <returns>Current builder instance.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryObjectBuilder.SetDictionaryField(System.String,System.Collections.IDictionary)">
            <summary>
            Sets the dictionary field.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="val">The value.</param>
            <returns>Current builder instance.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryObjectBuilder.SetDoubleField(System.String,System.Double)">
            <summary>
            Sets the double field.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="val">The value.</param>
            <returns>Current builder instance.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryObjectBuilder.SetDoubleArrayField(System.String,System.Double[])">
            <summary>
            Sets the double array field.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="val">The value.</param>
            <returns>Current builder instance.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryObjectBuilder.SetEnumField``1(System.String,``0)">
            <summary>
            Sets the enum field.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="val">The value.</param>
            <returns>Current builder instance.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryObjectBuilder.SetEnumArrayField``1(System.String,``0[])">
            <summary>
            Sets the enum array field.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="val">The value.</param>
            <returns>Current builder instance.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryObjectBuilder.SetFloatField(System.String,System.Single)">
            <summary>
            Sets the float field.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="val">The value.</param>
            <returns>Current builder instance.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryObjectBuilder.SetFloatArrayField(System.String,System.Single[])">
            <summary>
            Sets the float array field.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="val">The value.</param>
            <returns>Current builder instance.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryObjectBuilder.SetGuidField(System.String,System.Nullable{System.Guid})">
            <summary>
            Sets the guid field.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="val">The value.</param>
            <returns>Current builder instance.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryObjectBuilder.SetGuidArrayField(System.String,System.Nullable{System.Guid}[])">
            <summary>
            Sets the guid array field.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="val">The value.</param>
            <returns>Current builder instance.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryObjectBuilder.SetIntField(System.String,System.Int32)">
            <summary>
            Sets the int field.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="val">The value.</param>
            <returns>Current builder instance.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryObjectBuilder.SetIntArrayField(System.String,System.Int32[])">
            <summary>
            Sets the int array field.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="val">The value.</param>
            <returns>Current builder instance.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryObjectBuilder.SetLongField(System.String,System.Int64)">
            <summary>
            Sets the long field.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="val">The value.</param>
            <returns>Current builder instance.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryObjectBuilder.SetLongArrayField(System.String,System.Int64[])">
            <summary>
            Sets the long array field.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="val">The value.</param>
            <returns>Current builder instance.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryObjectBuilder.SetShortField(System.String,System.Int16)">
            <summary>
            Sets the short field.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="val">The value.</param>
            <returns>Current builder instance.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryObjectBuilder.SetShortArrayField(System.String,System.Int16[])">
            <summary>
            Sets the short array field.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="val">The value.</param>
            <returns>Current builder instance.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryObjectBuilder.SetStringField(System.String,System.String)">
            <summary>
            Sets the string field.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="val">The value.</param>
            <returns>Current builder instance.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryObjectBuilder.SetStringArrayField(System.String,System.String[])">
            <summary>
            Sets the string array field.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="val">The value.</param>
            <returns>Current builder instance.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryObjectBuilder.SetTimestampField(System.String,System.Nullable{System.DateTime})">
            <summary>
            Sets the timestamp field.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="val">The value.</param>
            <returns>Current builder instance.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryObjectBuilder.SetTimestampArrayField(System.String,System.Nullable{System.DateTime}[])">
            <summary>
            Sets the timestamp array field.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="val">The value.</param>
            <returns>Current builder instance.</returns>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryObjectBuilder.EmptyVals">
            Cached dictionary with no values. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryObjectBuilder._binary">
            Binary. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryObjectBuilder._parent">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryObjectBuilder._obj">
            Initial binary object. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryObjectBuilder._desc">
            Type descriptor. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryObjectBuilder._vals">
            Values. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryObjectBuilder._cache">
            Contextual fields. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryObjectBuilder._ctx">
            Current context. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryObjectBuilder.WriteArrayAction">
            Write array action. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryObjectBuilder.WriteCollectionAction">
            Write collection action. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryObjectBuilder.WriteTimestampAction">
            Write timestamp action. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryObjectBuilder.WriteTimestampArrayAction">
            Write timestamp array action. 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryObjectBuilder.#ctor(Apache.Ignite.Core.Impl.Binary.Binary,Apache.Ignite.Core.Impl.Binary.BinaryObjectBuilder,Apache.Ignite.Core.Impl.Binary.BinaryObject,Apache.Ignite.Core.Impl.Binary.IBinaryTypeDescriptor)">
            <summary>
            Constructor.
            </summary>
            <param name="binary">Binary.</param>
            <param name="parent">Parent builder.</param>
            <param name="obj">Initial binary object.</param>
            <param name="desc">Type descriptor.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryObjectBuilder.GetField``1(System.String)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryObjectBuilder.SetField``1(System.String,``0)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryObjectBuilder.SetArrayField``1(System.String,``0[])">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryObjectBuilder.SetBooleanField(System.String,System.Boolean)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryObjectBuilder.SetBooleanArrayField(System.String,System.Boolean[])">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryObjectBuilder.SetByteField(System.String,System.Byte)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryObjectBuilder.SetByteArrayField(System.String,System.Byte[])">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryObjectBuilder.SetCharField(System.String,System.Char)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryObjectBuilder.SetCharArrayField(System.String,System.Char[])">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryObjectBuilder.SetCollectionField(System.String,System.Collections.ICollection)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryObjectBuilder.SetDecimalField(System.String,System.Nullable{System.Decimal})">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryObjectBuilder.SetDecimalArrayField(System.String,System.Nullable{System.Decimal}[])">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryObjectBuilder.SetDictionaryField(System.String,System.Collections.IDictionary)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryObjectBuilder.SetDoubleField(System.String,System.Double)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryObjectBuilder.SetDoubleArrayField(System.String,System.Double[])">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryObjectBuilder.SetEnumField``1(System.String,``0)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryObjectBuilder.SetEnumArrayField``1(System.String,``0[])">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryObjectBuilder.SetFloatField(System.String,System.Single)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryObjectBuilder.SetFloatArrayField(System.String,System.Single[])">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryObjectBuilder.SetGuidField(System.String,System.Nullable{System.Guid})">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryObjectBuilder.SetGuidArrayField(System.String,System.Nullable{System.Guid}[])">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryObjectBuilder.SetIntField(System.String,System.Int32)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryObjectBuilder.SetIntArrayField(System.String,System.Int32[])">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryObjectBuilder.SetLongField(System.String,System.Int64)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryObjectBuilder.SetLongArrayField(System.String,System.Int64[])">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryObjectBuilder.SetShortField(System.String,System.Int16)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryObjectBuilder.SetShortArrayField(System.String,System.Int16[])">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryObjectBuilder.SetStringField(System.String,System.String)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryObjectBuilder.SetStringArrayField(System.String,System.String[])">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryObjectBuilder.SetTimestampField(System.String,System.Nullable{System.DateTime})">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryObjectBuilder.SetTimestampArrayField(System.String,System.Nullable{System.DateTime}[])">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryObjectBuilder.RemoveField(System.String)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryObjectBuilder.Build">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryObjectBuilder.Child(Apache.Ignite.Core.Impl.Binary.BinaryObject)">
            <summary>
            Create child builder.
            </summary>
            <param name="obj">binary object.</param>
            <returns>Child builder.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryObjectBuilder.TryGetCachedField``1(System.Int32,``0@)">
            <summary>
            Get cache field.
            </summary>
            <param name="pos">Position.</param>
            <param name="val">Value.</param>
            <returns><c>true</c> if value is found in cache.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryObjectBuilder.CacheField``1(System.Int32,``0)">
            <summary>
            Add field to cache test.
            </summary>
            <param name="pos">Position.</param>
            <param name="val">Value.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryObjectBuilder.GetWriteAction(System.Byte,System.Int32)">
            <summary>
            Gets the write action by header.
            </summary>
            <param name="header">The header.</param>
            <param name="pos">Position.</param>
            <returns>Write action.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryObjectBuilder.SetField0(System.String,Apache.Ignite.Core.Impl.Binary.BinaryBuilderField)">
            <summary>
            Internal set field routine.
            </summary>
            <param name="fieldName">Name.</param>
            <param name="val">Value.</param>
            <returns>This builder.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryObjectBuilder.Mutate(Apache.Ignite.Core.Impl.Binary.IO.BinaryHeapStream,Apache.Ignite.Core.Impl.Binary.IO.BinaryHeapStream,Apache.Ignite.Core.Impl.Binary.IBinaryTypeDescriptor,System.Collections.Generic.IDictionary{System.String,Apache.Ignite.Core.Impl.Binary.BinaryBuilderField})">
            <summary>
            Mutate binary object.
            </summary>
            <param name="inStream">Input stream with initial object.</param>
            <param name="outStream">Output stream.</param>
            <param name="desc">Type descriptor.</param>
            <param name="vals">Values.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryObjectBuilder.Mutate0(Apache.Ignite.Core.Impl.Binary.BinaryObjectBuilder.Context,Apache.Ignite.Core.Impl.Binary.IO.BinaryHeapStream,Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream,System.Boolean,System.Collections.Generic.IDictionary{System.Int32,Apache.Ignite.Core.Impl.Binary.BinaryBuilderField})">
            <summary>
            Internal mutation routine.
            </summary>
            <param name="inStream">Input stream.</param>
            <param name="outStream">Output stream.</param>
            <param name="ctx">Context.</param>
            <param name="changeHash">WHether hash should be changed.</param>
            <param name="vals">Values to be replaced.</param>
            <returns>Mutated object.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryObjectBuilder.WriteField(Apache.Ignite.Core.Impl.Binary.BinaryObjectBuilder.Context,Apache.Ignite.Core.Impl.Binary.BinaryBuilderField)">
            <summary>
            Writes the specified field.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryObjectBuilder.ProcessBinary(Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream,Apache.Ignite.Core.Impl.Binary.BinaryObject)">
            <summary>
            Process binary object inverting handles if needed.
            </summary>
            <param name="outStream">Output stream.</param>
            <param name="port">Binary object.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryObjectBuilder.ProcessBuilder(Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream,Apache.Ignite.Core.Impl.Binary.BinaryObjectBuilder)">
            <summary>
            Process child builder.
            </summary>
            <param name="outStream">Output stream.</param>
            <param name="builder">Builder.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryObjectBuilder.WriteAsPredefined(System.Byte,Apache.Ignite.Core.Impl.Binary.IO.BinaryHeapStream,Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream,Apache.Ignite.Core.Impl.Binary.BinaryObjectBuilder.Context)">
            <summary>
            Write object as a predefined type if possible.
            </summary>
            <param name="hdr">Header.</param>
            <param name="inStream">Input stream.</param>
            <param name="outStream">Output stream.</param>
            <param name="ctx">Context.</param>
            <returns><c>True</c> if was written.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryObjectBuilder.TransferBytes(Apache.Ignite.Core.Impl.Binary.IO.BinaryHeapStream,Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream,System.Int32)">
            <summary>
            Transfer bytes from one stream to another.
            </summary>
            <param name="inStream">Input stream.</param>
            <param name="outStream">Output stream.</param>
            <param name="cnt">Bytes count.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryObjectBuilder.TransferArray(Apache.Ignite.Core.Impl.Binary.IO.BinaryHeapStream,Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream,System.Int32)">
            <summary>
            Transfer array of fixed-size elements from one stream to another.
            </summary>
            <param name="inStream">Input stream.</param>
            <param name="outStream">Output stream.</param>
            <param name="elemSize">Element size.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryObjectBuilder.BinaryFromDescriptor(Apache.Ignite.Core.Impl.Binary.IBinaryTypeDescriptor)">
            <summary>
            Create empty binary object from descriptor.
            </summary>
            <param name="desc">Descriptor.</param>
            <returns>Empty binary object.</returns>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Binary.BinaryObjectBuilder.Context">
            <summary>
            Mutation context.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryObjectBuilder.Context._oldToNew">
            Map from object position in old binary to position in new binary. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryObjectBuilder.Context._parent">
            Parent context. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryObjectBuilder.Context._writer">
            Binary writer. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryObjectBuilder.Context._children">
            Children contexts. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryObjectBuilder.Context._closed">
            Closed flag; if context is closed, it can no longer be used. 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryObjectBuilder.Context.#ctor">
            <summary>
            Constructor for parent context where writer invocation is not expected.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryObjectBuilder.Context.#ctor(Apache.Ignite.Core.Impl.Binary.BinaryWriter)">
            <summary>
            Constructor for parent context.
            </summary>
            <param name="writer">Writer</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryObjectBuilder.Context.#ctor(Apache.Ignite.Core.Impl.Binary.BinaryObjectBuilder.Context)">
            <summary>
            Constructor.
            </summary>
            <param name="parent">Parent context.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryObjectBuilder.Context.AddOldToNew(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Add another old-to-new position mapping.
            </summary>
            <param name="oldPos">Old position.</param>
            <param name="newPos">New position.</param>
            <param name="hndPos">Handle position.</param>
            <returns><c>True</c> if ampping was added, <c>false</c> if mapping already existed and handle
            position in the new object is returned.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryObjectBuilder.Context.OldToNew(System.Int32,System.Int32@)">
            <summary>
            Get mapping of old position to the new one.
            </summary>
            <param name="oldPos">Old position.</param>
            <param name="newPos">New position.</param>
            <returns><c>True</c> if mapping exists.</returns>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.BinaryObjectBuilder.Context.Writer">
            <summary>
            Writer.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.BinaryObjectBuilder.Context.Closed">
            <summary>
            Closed flag.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Binary.BinaryFullTypeDescriptor">
            <summary>
            Full type descriptor.
            </summary> 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryFullTypeDescriptor._type">
            Type. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryFullTypeDescriptor._typeId">
            Type ID. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryFullTypeDescriptor._typeName">
            Type name. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryFullTypeDescriptor._userType">
            User type flag. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryFullTypeDescriptor._nameMapper">
            Name converter. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryFullTypeDescriptor._idMapper">
            Mapper. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryFullTypeDescriptor._serializer">
            Serializer. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryFullTypeDescriptor._keepDeserialized">
            Whether to cache deserialized value in IBinaryObject 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryFullTypeDescriptor._affKeyFieldName">
            Affinity field key name. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryFullTypeDescriptor._writerTypeStruct">
            Type structure. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryFullTypeDescriptor._readerTypeStructure">
            Type structure. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryFullTypeDescriptor._schema">
            Type schema. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryFullTypeDescriptor._isEnum">
            Enum flag. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryFullTypeDescriptor._isRegistered">
            Register flag. 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryFullTypeDescriptor.#ctor(System.Type,System.Int32,System.String,System.Boolean,Apache.Ignite.Core.Binary.IBinaryNameMapper,Apache.Ignite.Core.Binary.IBinaryIdMapper,Apache.Ignite.Core.Impl.Binary.IBinarySerializerInternal,System.Boolean,System.String,System.Boolean,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="type">Type.</param>
            <param name="typeId">Type ID.</param>
            <param name="typeName">Type name.</param>
            <param name="userType">User type flag.</param>
            <param name="nameMapper">Name converter.</param>
            <param name="idMapper">Mapper.</param>
            <param name="serializer">Serializer.</param>
            <param name="keepDeserialized">Whether to cache deserialized value in IBinaryObject</param>
            <param name="affKeyFieldName">Affinity field key name.</param>
            <param name="isEnum">Enum flag.</param>
            <param name="isRegistered">Registered flag.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryFullTypeDescriptor.#ctor(Apache.Ignite.Core.Impl.Binary.BinaryFullTypeDescriptor,System.Type,Apache.Ignite.Core.Impl.Binary.IBinarySerializerInternal,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Impl.Binary.BinaryFullTypeDescriptor"/> class,
            copying values from specified descriptor.
            </summary>
            <param name="desc">The descriptor to copy from.</param>
            <param name="type">Type.</param>
            <param name="serializer">Serializer.</param>
            <param name="isRegistered">Registered flag.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryFullTypeDescriptor.UpdateWriteStructure(Apache.Ignite.Core.Impl.Binary.Structure.BinaryStructure,System.Int32,System.Collections.Generic.IList{Apache.Ignite.Core.Impl.Binary.Structure.BinaryStructureUpdate})">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryFullTypeDescriptor.UpdateReadStructure(Apache.Ignite.Core.Impl.Binary.Structure.BinaryStructure,System.Int32,System.Collections.Generic.IList{Apache.Ignite.Core.Impl.Binary.Structure.BinaryStructureUpdate})">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.BinaryFullTypeDescriptor.Type">
            <summary>
            Type.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.BinaryFullTypeDescriptor.TypeId">
            <summary>
            Type ID.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.BinaryFullTypeDescriptor.TypeName">
            <summary>
            Type name.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.BinaryFullTypeDescriptor.UserType">
            <summary>
            User type flag.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.BinaryFullTypeDescriptor.KeepDeserialized">
            <summary>
            Whether to cache deserialized value in IBinaryObject
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.BinaryFullTypeDescriptor.NameMapper">
            <summary>
            Name converter.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.BinaryFullTypeDescriptor.IdMapper">
            <summary>
            Mapper.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.BinaryFullTypeDescriptor.Serializer">
            <summary>
            Serializer.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.BinaryFullTypeDescriptor.AffinityKeyFieldName">
            <summary>
            Affinity key field name.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.BinaryFullTypeDescriptor.IsEnum">
            <inheritdoc/> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.BinaryFullTypeDescriptor.WriterTypeStructure">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.BinaryFullTypeDescriptor.ReaderTypeStructure">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.BinaryFullTypeDescriptor.Schema">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.BinaryFullTypeDescriptor.IsRegistered">
            <inheritDoc /> 
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Binary.BinaryHandleDictionary`2">
            <summary>
            Object handle dictionary.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryHandleDictionary`2.InitialSize">
            Initial array sizes. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryHandleDictionary`2._dict">
            Dictionary. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryHandleDictionary`2._key1">
            First key. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryHandleDictionary`2._val1">
            First value. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryHandleDictionary`2._key2">
            Second key. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryHandleDictionary`2._val2">
            Second value. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryHandleDictionary`2._key3">
            Third key. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryHandleDictionary`2._val3">
            Third value. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryHandleDictionary`2._comparer">
            Comparer. 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryHandleDictionary`2.#ctor(`0,`1,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Constructor with initial key-value pair.
            </summary>
            <param name="key">Key.</param>
            <param name="val">Value.</param>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryHandleDictionary`2.Add(`0,`1)">
            <summary>
            Add value to dictionary.
            </summary>
            <param name="key">Key.</param>
            <param name="val">Value.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryHandleDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Try getting value for the given key.
            </summary>
            <param name="key">Key.</param>
            <param name="val">Value.</param>
            <returns>True if key was found.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryHandleDictionary`2.Merge(Apache.Ignite.Core.Impl.Binary.BinaryHandleDictionary{`0,`1})">
            <summary>
            Merge data from another dictionary without overwrite.
            </summary>
            <param name="that">Other dictionary.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryHandleDictionary`2.AddIfAbsent(`0,`1)">
            <summary>
            Add key/value pair to the bucket if absent.
            </summary>
            <param name="key">Key.</param>
            <param name="val">Value.</param>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.BinaryHandleDictionary`2.EmptyKey">
            <summary>
            Gets the empty key.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Binary.BinarizableSerializer">
            <summary>
            Binary serializer which only supports <see cref="T:Apache.Ignite.Core.Binary.IBinarizable"/> types with a default ctor.
            Does not use reflection.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinarizableSerializer.Instance">
            <summary>
            Default instance.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinarizableSerializer.WriteBinary``1(``0,Apache.Ignite.Core.Impl.Binary.BinaryWriter)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinarizableSerializer.ReadBinary``1(Apache.Ignite.Core.Impl.Binary.BinaryReader,Apache.Ignite.Core.Impl.Binary.IBinaryTypeDescriptor,System.Int32,System.Type)">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.BinarizableSerializer.SupportsHandles">
            <inheritdoc /> 
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Binary.Marshaller">
            <summary>
            Marshaller implementation.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.Marshaller._cfg">
            Binary configuration. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.Marshaller._typeToDesc">
            Type to descriptor map. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.Marshaller._typeNameToDesc">
            Type name to descriptor map. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.Marshaller._idToDesc">
            ID to descriptor map. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.Marshaller._metas">
            Cached binary types. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.Marshaller._ignite">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.Marshaller._log">
            
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.Marshaller.#ctor(Apache.Ignite.Core.Binary.BinaryConfiguration,Apache.Ignite.Core.Log.ILogger)">
            <summary>
            Constructor.
            </summary>
            <param name="cfg">Configuration.</param>
            <param name="log"></param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.Marshaller.Marshal``1(``0)">
            <summary>
            Marshal object.
            </summary>
            <param name="val">Value.</param>
            <returns>Serialized data as byte array.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.Marshaller.Marshal``1(``0,Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream)">
            <summary>
            Marshals an object.
            </summary>
            <param name="val">Value.</param>
            <param name="stream">Output stream.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.Marshaller.StartMarshal(Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream)">
            <summary>
            Start marshal session.
            </summary>
            <param name="stream">Stream.</param>
            <returns>Writer.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.Marshaller.FinishMarshal(Apache.Ignite.Core.Impl.Binary.BinaryWriter)">
            <summary>
            Finish marshal session.
            </summary>
            <param name="writer">Writer.</param>
            <returns>Dictionary with metadata.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.Marshaller.Unmarshal``1(System.Byte[],Apache.Ignite.Core.Impl.Binary.BinaryMode)">
            <summary>
            Unmarshal object.
            </summary>
            <param name="data">Data array.</param>
            <param name="mode">The mode.</param>
            <returns>
            Object.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.Marshaller.Unmarshal``1(Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream,System.Boolean)">
            <summary>
            Unmarshal object.
            </summary>
            <param name="stream">Stream over underlying byte array with correct position.</param>
            <param name="keepBinary">Whether to keep binary objects in binary form.</param>
            <returns>
            Object.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.Marshaller.Unmarshal``1(Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream,Apache.Ignite.Core.Impl.Binary.BinaryMode)">
            <summary>
            Unmarshal object.
            </summary>
            <param name="stream">Stream over underlying byte array with correct position.</param>
            <param name="mode">The mode.</param>
            <returns>
            Object.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.Marshaller.Unmarshal``1(Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream,Apache.Ignite.Core.Impl.Binary.BinaryMode,Apache.Ignite.Core.Impl.Binary.BinaryObjectBuilder)">
            <summary>
            Unmarshal object.
            </summary>
            <param name="stream">Stream over underlying byte array with correct position.</param>
            <param name="mode">The mode.</param>
            <param name="builder">Builder.</param>
            <returns>
            Object.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.Marshaller.StartUnmarshal(Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream,System.Boolean)">
            <summary>
            Start unmarshal session.
            </summary>
            <param name="stream">Stream.</param>
            <param name="keepBinary">Whether to keep binarizable as binary.</param>
            <returns>
            Reader.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.Marshaller.StartUnmarshal(Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream,Apache.Ignite.Core.Impl.Binary.BinaryMode)">
            <summary>
            Start unmarshal session.
            </summary>
            <param name="stream">Stream.</param>
            <param name="mode">The mode.</param>
            <returns>Reader.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.Marshaller.GetBinaryType(System.Int32)">
            <summary>
            Gets metadata for the given type ID.
            </summary>
            <param name="typeId">Type ID.</param>
            <returns>Metadata or null.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.Marshaller.PutBinaryType(Apache.Ignite.Core.Impl.Binary.IBinaryTypeDescriptor)">
            <summary>
            Puts the binary type metadata to Ignite.
            </summary>
            <param name="desc">Descriptor.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.Marshaller.GetBinaryTypeHandler(Apache.Ignite.Core.Impl.Binary.IBinaryTypeDescriptor)">
            <summary>
            Gets binary type handler for the given type ID.
            </summary>
            <param name="desc">Type descriptor.</param>
            <returns>Binary type handler.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.Marshaller.OnBinaryTypesSent(System.Collections.Generic.IEnumerable{Apache.Ignite.Core.Impl.Binary.Metadata.BinaryType})">
            <summary>
            Callback invoked when metadata has been sent to the server and acknowledged by it.
            </summary>
            <param name="newMetas">Binary types.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.Marshaller.GetDescriptor(System.Type)">
            <summary>
            Gets descriptor for type.
            </summary>
            <param name="type">Type.</param>
            <returns>
            Descriptor.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.Marshaller.GetDescriptor(System.String)">
            <summary>
            Gets descriptor for type name.
            </summary>
            <param name="typeName">Type name.</param>
            <returns>Descriptor.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.Marshaller.GetDescriptor(System.Boolean,System.Int32,System.Boolean,System.String,System.Type)">
            <summary>
            Gets descriptor for a type id.
            </summary>
            <param name="userType">User type flag.</param>
            <param name="typeId">Type id.</param>
            <param name="requiresType">If set to true, resulting descriptor must have Type property populated.
            <para />
            When working in binary mode, we don't need Type. And there is no Type at all in some cases.
            So we should not attempt to call BinaryProcessor right away.
            Only when we really deserialize the value, requiresType is set to true
            and we attempt to resolve the type by all means.</param>
            <param name="typeName">Known type name.</param>
            <param name="knownType">Optional known type.</param>
            <returns>
            Descriptor.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.Marshaller.RegisterType(System.Type,Apache.Ignite.Core.Impl.Binary.BinaryFullTypeDescriptor)">
            <summary>
            Registers the type.
            </summary>
            <param name="type">The type.</param>
            <param name="desc">Existing descriptor.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.Marshaller.AddUserType(System.Type,System.Int32,System.String,System.Boolean,Apache.Ignite.Core.Impl.Binary.BinaryFullTypeDescriptor)">
            <summary>
            Add user type.
            </summary>
            <param name="type">The type.</param>
            <param name="typeId">The type id.</param>
            <param name="typeName">Name of the type.</param>
            <param name="registered">Registered flag.</param>
            <param name="desc">Existing descriptor.</param>
            <returns>Descriptor.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.Marshaller.ThrowConflictingTypeError(System.Object,System.Object,System.Int32)">
            <summary>
            Throws the conflicting type error.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.Marshaller.AddUserType(Apache.Ignite.Core.Binary.BinaryTypeConfiguration,Apache.Ignite.Core.Impl.Binary.TypeResolver)">
            <summary>
            Add user type.
            </summary>
            <param name="typeCfg">Type configuration.</param>
            <param name="typeResolver">The type resolver.</param>
            <exception cref="T:Apache.Ignite.Core.Binary.BinaryObjectException"></exception>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.Marshaller.GetSerializer(Apache.Ignite.Core.Binary.BinaryConfiguration,Apache.Ignite.Core.Binary.BinaryTypeConfiguration,System.Type,System.Int32,Apache.Ignite.Core.Binary.IBinaryNameMapper,Apache.Ignite.Core.Binary.IBinaryIdMapper,Apache.Ignite.Core.Log.ILogger)">
            <summary>
            Gets the serializer.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.Marshaller.GetAffinityKeyFieldNameFromAttribute(System.Type)">
            <summary>
            Gets the affinity key field name from attribute.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.Marshaller.AddType(System.Type,System.Int32,System.String,System.Boolean,System.Boolean,Apache.Ignite.Core.Binary.IBinaryNameMapper,Apache.Ignite.Core.Binary.IBinaryIdMapper,Apache.Ignite.Core.Impl.Binary.IBinarySerializerInternal,System.String,System.Boolean)">
            <summary>
            Add type.
            </summary>
            <param name="type">Type.</param>
            <param name="typeId">Type ID.</param>
            <param name="typeName">Type name.</param>
            <param name="userType">User type flag.</param>
            <param name="keepDeserialized">Whether to cache deserialized value in IBinaryObject</param>
            <param name="nameMapper">Name mapper.</param>
            <param name="idMapper">ID mapper.</param>
            <param name="serializer">Serializer.</param>
            <param name="affKeyFieldName">Affinity key field name.</param>
            <param name="isEnum">Enum flag.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.Marshaller.AddSystemType``1(System.Int32,System.Func{Apache.Ignite.Core.Impl.Binary.BinaryReader,``0},System.String,Apache.Ignite.Core.Impl.Binary.IBinarySerializerInternal)">
            <summary>
            Adds a predefined system type.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.Marshaller.AddSystemTypes">
            <summary>
            Adds predefined system types.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.Marshaller.LogSerializableWarning(System.Type,Apache.Ignite.Core.Log.ILogger)">
            <summary>
            Logs the warning about ISerializable pitfalls.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.Marshaller.ValidateUserType(System.Type)">
            <summary>
            Validates binary type.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.Marshaller.ResolveType(System.String)">
            <summary>
            Resolves the type (opposite of <see cref="M:Apache.Ignite.Core.Impl.Binary.Marshaller.GetTypeName(System.Type,Apache.Ignite.Core.Binary.IBinaryNameMapper)"/>).
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.Marshaller.GetTypeName(System.Type,Apache.Ignite.Core.Binary.IBinaryNameMapper)">
            <summary>
            Gets the name of the type according to current name mapper.
            See also <see cref="M:Apache.Ignite.Core.Impl.Binary.Marshaller.ResolveType(System.String)"/>.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.Marshaller.GetTypeName(System.String,Apache.Ignite.Core.Binary.IBinaryNameMapper)">
            <summary>
            Gets the name of the type.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.Marshaller.GetTypeId(System.String,Apache.Ignite.Core.Binary.IBinaryIdMapper)">
            <summary>
            Resolve type ID.
            </summary>
            <param name="typeName">Type name.</param>
            <param name="idMapper">ID mapper.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.Marshaller.GetDefaultNameMapper">
            <summary>
            Gets the default name mapper.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.Marshaller.Ignite">
            <summary>
            Gets or sets the backing grid.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.Marshaller.CompactFooter">
            <summary>
            Gets the compact footer flag.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.Marshaller.RegistrationDisabled">
            <summary>
            Gets or sets a value indicating whether type registration is disabled.
            This may be desirable for static system marshallers where everything is written in unregistered mode.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Binary.BinaryMode">
            <summary>
            Binary mode.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryMode.Deserialize">
            <summary>
            Deserialize top-level objects, but leave nested objects in binary form.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryMode.KeepBinary">
            <summary>
            Keep objects in binary form.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryMode.ForceBinary">
            <summary>
            Always return <see cref="T:Apache.Ignite.Core.Binary.IBinaryObject"/>
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Binary.BinaryObjectHeader">
            <summary>
            binary object header structure.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryObjectHeader.Size">
            Size, equals to sizeof(BinaryObjectHeader). 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryObjectHeader.Header">
            Actual header layout 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryObjectHeader.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Apache.Ignite.Core.Impl.Binary.BinaryObjectHeader.Flag)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Impl.Binary.BinaryObjectHeader"/> struct.
            </summary>
            <param name="typeId">Type ID.</param>
            <param name="hashCode">Hash code.</param>
            <param name="length">Length.</param>
            <param name="schemaId">Schema ID.</param>
            <param name="schemaOffset">Schema offset.</param>
            <param name="flags">The flags.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryObjectHeader.#ctor(Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Impl.Binary.BinaryObjectHeader"/> struct from specified stream.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryObjectHeader.Write(Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream)">
            <summary>
            Writes this instance to the specified stream.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryObjectHeader.GetRawOffset(Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream,System.Int32)">
            <summary>
            Gets the raw offset of this object in specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="position">The binary object position in the stream.</param>
            <returns>Raw offset.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryObjectHeader.Write(Apache.Ignite.Core.Impl.Binary.BinaryObjectHeader,Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream,System.Int32)">
            <summary>
            Writes specified header to a stream.
            </summary>
            <param name="header">The header.</param>
            <param name="stream">The stream.</param>
            <param name="position">The position.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryObjectHeader.Read(Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream,System.Int32)">
            <summary>
            Reads an instance from stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="position">The position.</param>
            <returns>Instance of the header.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryObjectHeader.Equals(Apache.Ignite.Core.Impl.Binary.BinaryObjectHeader)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryObjectHeader.Equals(System.Object)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryObjectHeader.GetHashCode">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryObjectHeader.op_Equality(Apache.Ignite.Core.Impl.Binary.BinaryObjectHeader,Apache.Ignite.Core.Impl.Binary.BinaryObjectHeader)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryObjectHeader.op_Inequality(Apache.Ignite.Core.Impl.Binary.BinaryObjectHeader,Apache.Ignite.Core.Impl.Binary.BinaryObjectHeader)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryObjectHeader.ToString">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.BinaryObjectHeader.IsUserType">
            <summary>
            Gets the user type flag.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.BinaryObjectHeader.HasSchema">
            <summary>
            Gets the schema flag.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.BinaryObjectHeader.HasRaw">
            <summary>
            Gets the raw flag.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.BinaryObjectHeader.IsCompactFooter">
            <summary>
            Gets the compact footer flag.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.BinaryObjectHeader.IsCustomDotNetType">
            <summary>
            Gets the custom .NET type flag.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.BinaryObjectHeader.SchemaFieldOffsetSize">
            <summary>
            Gets the size of the schema field offset (1, 2 or 4 bytes).
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.BinaryObjectHeader.SchemaFieldSize">
            <summary>
            Gets the size of the schema field.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.BinaryObjectHeader.SchemaFieldCount">
            <summary>
            Gets the schema field count.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.BinaryObjectHeader.FooterStartOffset">
            <summary>
            Gets the footer offset where raw and non-raw data ends.
            </summary>
            <value>Footer offset.</value>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Binary.BinaryObjectHeader.Flag">
            <summary>
            Flags.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryObjectHeader.Flag.None">
            No flags. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryObjectHeader.Flag.UserType">
            Flag: user type. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryObjectHeader.Flag.HasSchema">
            Flag: schema exists. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryObjectHeader.Flag.HasRaw">
            Flag indicating that object has raw data. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryObjectHeader.Flag.OffsetOneByte">
            Flag: offsets take 1 byte. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryObjectHeader.Flag.OffsetTwoBytes">
            Flag: offsets take 2 bytes. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryObjectHeader.Flag.CompactFooter">
            Flag: compact footer, no field IDs. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryObjectHeader.Flag.CustomDotNetType">
            Flag: raw data contains .NET type information. 
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Binary.BinaryObjectSchema">
            <summary>
            Holds and manages binary object schemas for a specific type.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryObjectSchema._schemaId1">
            First schema id. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryObjectSchema._schema1">
            First schema. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryObjectSchema._schemaId2">
            Second schema id. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryObjectSchema._schema2">
            Second schema. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryObjectSchema._schemas">
            Other schemas. 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryObjectSchema.Get(System.Int32)">
            <summary>
            Gets the schema by id.
            </summary>
            <param name="id">Schema id.</param>
            <returns>Schema or null.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryObjectSchema.Add(System.Int32,System.Int32[])">
            <summary>
            Adds the schema.
            </summary>
            <param name="id">Schema id.</param>
            <param name="schema">Schema.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryObjectSchema.GetAll">
            <summary>
            Gets all schemas.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Binary.BinaryObjectSchemaField">
            <summary>
            Binary schema field DTO (as it is stored in a stream).
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryObjectSchemaField.Size">
            Size, equals to sizeof(BinaryObjectSchemaField) 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryObjectSchemaField.Offset">
            Offset. 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryObjectSchemaField.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Impl.Binary.BinaryObjectSchemaField"/> struct.
            </summary>
            <param name="id">The id.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Binary.BinaryObjectSchemaHolder">
            <summary>
            Shared schema holder.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryObjectSchemaHolder.CurrentHolder">
            Current schema. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryObjectSchemaHolder._fields">
            Fields. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryObjectSchemaHolder._idx">
            Current field index. 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryObjectSchemaHolder.PushField(System.Int32,System.Int32)">
            <summary>
            Adds a field to the holder.
            </summary>
            <param name="id">The identifier.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryObjectSchemaHolder.PushSchema">
            <summary>
            Gets the start of a new schema
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryObjectSchemaHolder.PopSchema(System.Int32)">
            <summary>
            Resets schema position to specified index.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryObjectSchemaHolder.WriteSchema(Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream,System.Int32,System.Int32@,Apache.Ignite.Core.Impl.Binary.BinaryObjectHeader.Flag@)">
            <summary>
            Writes collected schema to the stream and pops it.
            </summary>
            <param name="stream">The stream.</param>
            <param name="schemaOffset">The schema offset.</param>
            <param name="schemaId">The schema identifier.</param>
            <param name="flags">Flags according to offset sizes.</param>
            <returns>
            True if current schema was non empty; false otherwise.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryObjectSchemaHolder.GetSchema(System.Int32)">
            <summary>
            Gets the schema.
            </summary>
            <param name="schemaOffset">The schema offset.</param>
            <returns>Current schema as an array of field ids.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryObjectSchemaHolder.GetFullSchema(System.Int32)">
            <summary>
            Gets the schema.
            </summary>
            <param name="schemaOffset">The schema offset.</param>
            <returns>Current schema as a dictionary.</returns>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.BinaryObjectSchemaHolder.Current">
            <summary>
            Gets the schema holder for the current thread.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Binary.BinaryReaderExtensions">
            <summary>
            Reader extensions.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryReaderExtensions.ReadCollectionAsList``1(Apache.Ignite.Core.Binary.IBinaryRawReader)">
            <summary>
            Reads untyped collection as a generic list.
            </summary>
            <typeparam name="T">Type of list element.</typeparam>
            <param name="reader">The reader.</param>
            <returns>Resulting generic list.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryReaderExtensions.ReadDictionaryAsGeneric``2(Apache.Ignite.Core.Binary.IBinaryRawReader)">
            <summary>
            Reads untyped dictionary as generic dictionary.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="reader">The reader.</param>
            <returns>Resulting dictionary.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryReaderExtensions.ReadLongAsTimespan(Apache.Ignite.Core.Binary.IBinaryRawReader)">
            <summary>
            Reads long as timespan with range checks.
            </summary>
            <param name="reader">The reader.</param>
            <returns>TimeSpan.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryReaderExtensions.ReadTimeSpanNullable(Apache.Ignite.Core.Binary.IBinaryRawReader)">
            <summary>
            Reads the nullable TimeSpan.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryReaderExtensions.ReadIntNullable(Apache.Ignite.Core.Binary.IBinaryRawReader)">
            <summary>
            Reads the nullable int.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryReaderExtensions.ReadBooleanNullable(Apache.Ignite.Core.Binary.IBinaryRawReader)">
            <summary>
            Reads the nullable bool.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryReaderExtensions.ReadObjectEx``1(Apache.Ignite.Core.Binary.IBinaryRawReader)">
            <summary>
            Reads the object either as a normal object or as a [typeName+props] wrapper.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Binary.BinaryReaderHandleDictionary">
            <summary>
            Object handle dictionary for <see cref="T:Apache.Ignite.Core.Impl.Binary.BinaryReader"/>.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryReaderHandleDictionary.#ctor(System.Int32,System.Object)">
            <summary>
            Constructor with initial key-value pair.
            </summary>
            <param name="key">Key.</param>
            <param name="val">Value.</param>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.BinaryReaderHandleDictionary.EmptyKey">
            <inheritdoc /> 
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Binary.BinaryReader">
            <summary>
            Binary reader implementation. 
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Binary.IBinaryReader">
            <summary>
            Reader for binary objects. 
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryReader.ReadByte(System.String)">
            <summary>
            Read named byte value.
            </summary>
            <param name="fieldName">Field name.</param>
            <returns>Byte value.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryReader.ReadByteArray(System.String)">
            <summary>
            Read named byte array. 
            </summary>
            <returns>Byte array.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryReader.ReadChar(System.String)">
            <summary>
            Read named char value.
            </summary>
            <param name="fieldName">Field name.</param>
            <returns>Char value.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryReader.ReadCharArray(System.String)">
            <summary>
            Read named char array. 
            </summary>
            <returns>Char array.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryReader.ReadShort(System.String)">
            <summary>
            Read named short value.
            </summary>
            <param name="fieldName">Field name.</param>
            <returns>Short value.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryReader.ReadShortArray(System.String)">
            <summary>
            Read named short array. 
            </summary>
            <returns>Short array.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryReader.ReadInt(System.String)">
            <summary>
            Read named int value.
            </summary>
            <param name="fieldName">Field name.</param>
            <returns>Int value.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryReader.ReadIntArray(System.String)">
            <summary>
            Read named int array.
            </summary>
            <param name="fieldName">Field name.</param>
            <returns>Int array.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryReader.ReadLong(System.String)">
            <summary>
            Read named long value.
            </summary>
            <param name="fieldName">Field name.</param>
            <returns>Long value.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryReader.ReadLongArray(System.String)">
            <summary>
            Read named long array.
            </summary>
            <param name="fieldName">Field name.</param>
            <returns>Long array.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryReader.ReadBoolean(System.String)">
            <summary>
            Read named boolean value.
            </summary>
            <param name="fieldName">Field name.</param>
            <returns>Boolean value.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryReader.ReadBooleanArray(System.String)">
            <summary>
            Read named boolean array.
            </summary>
            <param name="fieldName">Field name.</param>
            <returns>Boolean array.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryReader.ReadFloat(System.String)">
            <summary>
            Read named float value.
            </summary>
            <param name="fieldName">Field name.</param>
            <returns>Float value.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryReader.ReadFloatArray(System.String)">
            <summary>
            Read named float array.
            </summary>
            <param name="fieldName">Field name.</param>
            <returns>Float array.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryReader.ReadDouble(System.String)">
            <summary>
            Read named double value.
            </summary>
            <param name="fieldName">Field name.</param>
            <returns>Double value.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryReader.ReadDoubleArray(System.String)">
            <summary>
            Read named double array.
            </summary>
            <param name="fieldName">Field name.</param>
            <returns>Double array.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryReader.ReadDecimal(System.String)">
            <summary>
            Read named decimal value.
            </summary>
            <param name="fieldName">Field name.</param>
            <returns>Decimal value.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryReader.ReadDecimalArray(System.String)">
            <summary>
            Read named decimal array.
            </summary>
            <param name="fieldName">Field name.</param>
            <returns>Decimal array.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryReader.ReadTimestamp(System.String)">
            <summary>
            Read named date value in UTC form.
            </summary>
            <param name="fieldName">Field name.</param>
            <returns>Date value.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryReader.ReadTimestampArray(System.String)">
            <summary>
            Read named date array in UTC form.
            </summary>
            <param name="fieldName">Field name.</param>
            <returns>Date array.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryReader.ReadString(System.String)">
            <summary>
            Read named string value.
            </summary>
            <param name="fieldName">Field name.</param>
            <returns>String value.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryReader.ReadStringArray(System.String)">
            <summary>
            Read named string array.
            </summary>
            <param name="fieldName">Field name.</param>
            <returns>String array.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryReader.ReadGuid(System.String)">
            <summary>
            Read named GUID value.
            </summary>
            <param name="fieldName">Field name.</param>
            <returns>GUID value.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryReader.ReadGuidArray(System.String)">
            <summary>
            Read named GUID array.
            </summary>
            <param name="fieldName">Field name.</param>
            <returns>GUID array.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryReader.ReadEnum``1(System.String)">
            <summary>
            Read named enum value.
            </summary>
            <param name="fieldName">Field name.</param>
            <returns>Enum value.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryReader.ReadEnumArray``1(System.String)">
            <summary>
            Read named enum array.
            </summary>
            <param name="fieldName">Field name.</param>
            <returns>Enum array.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryReader.ReadObject``1(System.String)">
            <summary>
            Read named object.
            </summary>
            <param name="fieldName">Field name.</param>
            <returns>Object.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryReader.ReadArray``1(System.String)">
            <summary>
            Read named object array.
            </summary>
            <param name="fieldName">Field name.</param>
            <returns>Object array.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryReader.ReadCollection(System.String)">
            <summary>
            Read named collection.
            </summary>
            <param name="fieldName">Field name.</param>
            <returns>Collection.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryReader.ReadCollection(System.String,System.Func{System.Int32,System.Collections.ICollection},System.Action{System.Collections.ICollection,System.Object})">
            <summary>
            Read named collection.
            </summary>
            <param name="fieldName">Field name.</param>
            <param name="factory">Factory.</param>
            <param name="adder">Adder.</param>
            <returns>Collection.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryReader.ReadDictionary(System.String)">
            <summary>
            Read named dictionary.
            </summary>
            <param name="fieldName">Field name.</param>
            <returns>Dictionary.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryReader.ReadDictionary(System.String,System.Func{System.Int32,System.Collections.IDictionary})">
            <summary>
            Read named dictionary.
            </summary>
            <param name="fieldName">Field name.</param>
            <param name="factory">Factory.</param>
            <returns>Dictionary.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryReader.GetRawReader">
            <summary>
            Get raw reader. 
            </summary>
            <returns>Raw reader.</returns>
        </member>
        <member name="T:Apache.Ignite.Core.Binary.IBinaryRawReader">
            <summary>
            Raw reader for binary objects. 
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryRawReader.ReadByte">
            <summary>
            Read byte value. 
            </summary>
            <returns>Byte value.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryRawReader.ReadByteArray">
            <summary>
            Read byte array. 
            </summary>
            <returns>Byte array.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryRawReader.ReadChar">
            <summary>
            Read char value. 
            </summary>
            <returns>Char value.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryRawReader.ReadCharArray">
            <summary>
            Read char array. 
            </summary>
            <returns>Char array.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryRawReader.ReadShort">
            <summary>
            Read short value. 
            </summary>
            <returns>Short value.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryRawReader.ReadShortArray">
            <summary>
            Read short array. 
            </summary>
            <returns>Short array.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryRawReader.ReadInt">
            <summary>
            Read int value. 
            </summary>
            <returns>Int value.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryRawReader.ReadIntArray">
            <summary>
            Read int array. 
            </summary>
            <returns>Int array.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryRawReader.ReadLong">
            <summary>
            Read long value. 
            </summary>
            <returns>Long value.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryRawReader.ReadLongArray">
            <summary>
            Read long array. 
            </summary>
            <returns>Long array.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryRawReader.ReadBoolean">
            <summary>
            Read boolean value. 
            </summary>
            <returns>Boolean value.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryRawReader.ReadBooleanArray">
            <summary>
            Read boolean array. 
            </summary>
            <returns>Boolean array.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryRawReader.ReadFloat">
            <summary>
            Read float value. 
            </summary>
            <returns>Float value.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryRawReader.ReadFloatArray">
            <summary>
            Read float array. 
            </summary>
            <returns>Float array.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryRawReader.ReadDouble">
            <summary>
            Read double value. 
            </summary>
            <returns>Double value.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryRawReader.ReadDoubleArray">
            <summary>
            Read double array. 
            </summary>
            <returns>Double array.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryRawReader.ReadDecimal">
            <summary>
            Read decimal value. 
            </summary>
            <returns>Decimal value.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryRawReader.ReadDecimalArray">
            <summary>
            Read decimal array. 
            </summary>
            <returns>Decimal array.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryRawReader.ReadTimestamp">
            <summary>
            Read date value in UTC form. Shortcut for <c>ReadTimestamp(false)</c>.
            </summary>
            <returns>Date value.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryRawReader.ReadTimestampArray">
            <summary>
            Read date array in UTC form. Shortcut for <c>ReadTimestampArray(false)</c>.
            </summary>
            <returns>Date array.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryRawReader.ReadString">
            <summary>
            Read string value. 
            </summary>
            <returns>String value.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryRawReader.ReadStringArray">
            <summary>
            Read string array. 
            </summary>
            <returns>String array.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryRawReader.ReadGuid">
            <summary>
            Read GUID value. 
            </summary>
            <returns>GUID value.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryRawReader.ReadGuidArray">
            <summary>
            Read GUID array. 
            </summary>
            <returns>GUID array.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryRawReader.ReadEnum``1">
            <summary>
            Read enum value.
            </summary>
            <returns>Enum value.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryRawReader.ReadEnumArray``1">
            <summary>
            Read enum array.
            </summary>
            <returns>Enum array.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryRawReader.ReadObject``1">
            <summary>
            Read object. 
            </summary>
            <returns>Object.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryRawReader.ReadArray``1">
            <summary>
            Read object array. 
            </summary>
            <returns>Object array.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryRawReader.ReadCollection">
            <summary>
            Read collection.
            </summary>
            <returns>Collection.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryRawReader.ReadCollection(System.Func{System.Int32,System.Collections.ICollection},System.Action{System.Collections.ICollection,System.Object})">
            <summary>
            Read collection.
            </summary>
            <param name="factory">Factory.</param>
            <param name="adder">Adder.</param>
            <returns>Collection.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryRawReader.ReadDictionary">
            <summary>
            Read dictionary. 
            </summary>
            <returns>Dictionary.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryRawReader.ReadDictionary(System.Func{System.Int32,System.Collections.IDictionary})">
            <summary>
            Read dictionary.
            </summary>
            <param name="factory">Factory.</param>
            <returns>Dictionary.</returns>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryReader._marsh">
            Marshaller. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryReader._builder">
            Parent builder. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryReader._hnds">
            Handles. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryReader._detach">
            Detach flag. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryReader._mode">
            Binary read mode. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryReader._frame">
            Current frame. 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryReader.#ctor(Apache.Ignite.Core.Impl.Binary.Marshaller,Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream,Apache.Ignite.Core.Impl.Binary.BinaryMode,Apache.Ignite.Core.Impl.Binary.BinaryObjectBuilder)">
            <summary>
            Constructor.
            </summary>
            <param name="marsh">Marshaller.</param>
            <param name="stream">Input stream.</param>
            <param name="mode">The mode.</param>
            <param name="builder">Builder.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryReader.GetRawReader">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryReader.ReadBoolean(System.String)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryReader.ReadBoolean">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryReader.ReadBooleanArray(System.String)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryReader.ReadBooleanArray">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryReader.ReadByte(System.String)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryReader.ReadByte">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryReader.ReadByteArray(System.String)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryReader.ReadByteArray">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryReader.ReadShort(System.String)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryReader.ReadShort">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryReader.ReadShortArray(System.String)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryReader.ReadShortArray">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryReader.ReadChar(System.String)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryReader.ReadChar">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryReader.ReadCharArray(System.String)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryReader.ReadCharArray">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryReader.ReadInt(System.String)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryReader.ReadInt">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryReader.ReadIntArray(System.String)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryReader.ReadIntArray">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryReader.ReadLong(System.String)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryReader.ReadLong">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryReader.ReadLongArray(System.String)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryReader.ReadLongArray">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryReader.ReadFloat(System.String)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryReader.ReadFloat">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryReader.ReadFloatArray(System.String)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryReader.ReadFloatArray">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryReader.ReadDouble(System.String)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryReader.ReadDouble">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryReader.ReadDoubleArray(System.String)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryReader.ReadDoubleArray">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryReader.ReadDecimal(System.String)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryReader.ReadDecimal">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryReader.ReadDecimalArray(System.String)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryReader.ReadDecimalArray">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryReader.ReadTimestamp(System.String)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryReader.ReadTimestamp">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryReader.ReadTimestampArray(System.String)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryReader.ReadTimestampArray">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryReader.ReadString(System.String)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryReader.ReadString">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryReader.ReadStringArray(System.String)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryReader.ReadStringArray">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryReader.ReadGuid(System.String)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryReader.ReadGuid">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryReader.ReadGuidArray(System.String)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryReader.ReadGuidArray">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryReader.ReadEnum``1(System.String)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryReader.ReadEnum``1">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryReader.ReadEnumArray``1(System.String)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryReader.ReadEnumArray``1">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryReader.ReadObject``1(System.String)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryReader.ReadObject``1">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryReader.ReadArray``1(System.String)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryReader.ReadArray``1">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryReader.ReadCollection(System.String)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryReader.ReadCollection">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryReader.ReadCollection(System.String,System.Func{System.Int32,System.Collections.ICollection},System.Action{System.Collections.ICollection,System.Object})">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryReader.ReadCollection(System.Func{System.Int32,System.Collections.ICollection},System.Action{System.Collections.ICollection,System.Object})">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryReader.ReadDictionary(System.String)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryReader.ReadDictionary">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryReader.ReadDictionary(System.String,System.Func{System.Int32,System.Collections.IDictionary})">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryReader.ReadDictionary(System.Func{System.Int32,System.Collections.IDictionary})">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryReader.DetachNext">
            <summary>
            Enable detach mode for the next object read. 
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryReader.Deserialize``1(System.Type)">
            <summary>
            Deserialize object.
            </summary>
            <param name="typeOverride">The type override.
            There can be multiple versions of the same type when peer assembly loading is enabled.
            Only first one is registered in Marshaller.
            This parameter specifies exact type to be instantiated.</param>
            <returns>Deserialized object.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryReader.TryDeserialize``1(``0@,System.Type)">
            <summary>
            Deserialize object.
            </summary>
            <param name="res">Deserialized object.</param>
            <param name="typeOverride">The type override.
            There can be multiple versions of the same type when peer assembly loading is enabled.
            Only first one is registered in Marshaller.
            This parameter specifies exact type to be instantiated.</param>
            <returns>
            Deserialized object.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryReader.GetCustomTypeDataFlag">
            <summary>
            Gets the flag indicating that there is custom type information in raw region.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryReader.ReadBinaryObject``1(System.Boolean)">
            <summary>
            Reads the binary object.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryReader.ReadAsBinary(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Reads the binary object in binary form.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryReader.ReadFullObject``1(System.Int32,System.Type)">
            <summary>
            Reads the full object.
            </summary>
            <param name="pos">The position.</param>
            <param name="typeOverride">The type override.
            There can be multiple versions of the same type when peer assembly loading is enabled.
            Only first one is registered in Marshaller.
            This parameter specifies exact type to be instantiated.</param>
            <returns>Resulting object</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryReader.ReadUnregisteredType(System.Type)">
            <summary>
            Reads the unregistered type.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryReader.SetCurSchema(Apache.Ignite.Core.Impl.Binary.IBinaryTypeDescriptor)">
            <summary>
            Sets the current schema.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryReader.ReadHandleObject``1(System.Int32,System.Type)">
            <summary>
            Reads the handle object.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryReader.AddHandle(System.Int32,System.Object)">
            <summary>
            Adds a handle to the dictionary.
            </summary>
            <param name="pos">Position.</param>
            <param name="obj">Object.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryReader.SeekToRaw">
            <summary>
            Seeks to raw data.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryReader.MarkRaw">
            <summary>
            Mark current output as raw. 
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryReader.SeekField(System.String)">
            <summary>
            Seeks the field by name.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryReader.ReadField``1(System.String,System.Func{Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream,``0},System.Byte)">
            <summary>
            Seeks specified field and invokes provided func.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryReader.ReadField``1(System.String,System.Func{Apache.Ignite.Core.Impl.Binary.BinaryReader,``0},System.Byte)">
            <summary>
            Seeks specified field and invokes provided func.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryReader.ReadField``1(System.String,System.Func{``0},System.Byte)">
            <summary>
            Seeks specified field and invokes provided func.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryReader.Read``1(System.Func{Apache.Ignite.Core.Impl.Binary.BinaryReader,``0},System.Byte)">
            <summary>
            Reads header and invokes specified func if the header is not null.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryReader.Read``1(System.Func{Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream,``0},System.Byte)">
            <summary>
            Reads header and invokes specified func if the header is not null.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryReader.Read``1(System.Func{``0},System.Byte)">
            <summary>
            Reads header and invokes specified func if the header is not null.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryReader.ReadEnum0``1(Apache.Ignite.Core.Impl.Binary.BinaryReader,System.Boolean)">
            <summary>
            Reads the enum.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.BinaryReader.Marshaller">
            <summary>
            Gets the marshaller.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.BinaryReader.Mode">
            <summary>
            Gets the mode.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.BinaryReader.Stream">
            <summary>
            Underlying stream.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Binary.BinaryReader.Frame">
            <summary>
            Stores current reader stack frame.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryReader.Frame.Pos">
            Current position. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryReader.Frame.Raw">
            Current raw flag. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryReader.Frame.Struct">
            Current type structure tracker. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryReader.Frame.Schema">
            Current schema. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryReader.Frame.SchemaMap">
            Current schema with positions. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryReader.Frame.Hdr">
            Current header. 
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Binary.BinaryReflectiveWriteAction">
            <summary>
            Write action delegate.
            </summary>
            <param name="obj">Target object.</param>
            <param name="writer">Writer.</param>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Binary.BinaryReflectiveReadAction">
            <summary>
            Read action delegate.
            </summary>
            <param name="obj">Target object.</param>
            <param name="reader">Reader.</param>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Binary.BinaryReflectiveActions">
            <summary>
            Routines for reflective reads and writes.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryReflectiveActions.MthdReadEnum">
            Method: read enum. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryReflectiveActions.MthdReadEnumRaw">
            Method: read enum. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryReflectiveActions.MthdReadEnumArray">
            Method: read enum array. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryReflectiveActions.MthdReadEnumArrayRaw">
            Method: read enum array. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryReflectiveActions.MthdReadObjArray">
            Method: read array. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryReflectiveActions.MthdReadObjArrayRaw">
            Method: read array. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryReflectiveActions.MthdReadObj">
            Method: read object. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryReflectiveActions.MthdReadObjRaw">
            Method: read object. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryReflectiveActions.MthdWriteEnumArray">
            Method: write enum array. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryReflectiveActions.MthdWriteEnumArrayRaw">
            Method: write enum array. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryReflectiveActions.MthdWriteObjArray">
            Method: write array. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryReflectiveActions.MthdWriteObjArrayRaw">
            Method: write array. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryReflectiveActions.MthdWriteObj">
            Method: write object. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryReflectiveActions.MthdWriteObjRaw">
            Method: write object. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryReflectiveActions.MthdGetRawWriter">
            Method: raw writer 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryReflectiveActions.MthdGetRawReader">
            Method: raw writer 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryReflectiveActions.GetTypeActions(System.Reflection.FieldInfo,Apache.Ignite.Core.Impl.Binary.BinaryReflectiveWriteAction@,Apache.Ignite.Core.Impl.Binary.BinaryReflectiveReadAction@,System.Boolean,System.Boolean)">
            <summary>
            Lookup read/write actions for the given type.
            </summary>
            <param name="field">The field.</param>
            <param name="writeAction">Write action.</param>
            <param name="readAction">Read action.</param>
            <param name="raw">Raw mode.</param>
            <param name="forceTimestamp">Force timestamp serialization for DateTime fields..</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryReflectiveActions.HandlePrimitive(System.Reflection.FieldInfo,Apache.Ignite.Core.Impl.Binary.BinaryReflectiveWriteAction@,Apache.Ignite.Core.Impl.Binary.BinaryReflectiveReadAction@,System.Boolean)">
            <summary>
            Handle primitive type.
            </summary>
            <param name="field">The field.</param>
            <param name="writeAction">Write action.</param>
            <param name="readAction">Read action.</param>
            <param name="raw">Raw mode.</param>
            <exception cref="T:Apache.Ignite.Core.Common.IgniteException">Unsupported primitive type:  + type.Name</exception>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryReflectiveActions.HandleArray(System.Reflection.FieldInfo,Apache.Ignite.Core.Impl.Binary.BinaryReflectiveWriteAction@,Apache.Ignite.Core.Impl.Binary.BinaryReflectiveReadAction@,System.Boolean)">
            <summary>
            Handle array type.
            </summary>
            <param name="field">The field.</param>
            <param name="writeAction">Write action.</param>
            <param name="readAction">Read action.</param>
            <param name="raw">Raw mode.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryReflectiveActions.HandleOther(System.Reflection.FieldInfo,Apache.Ignite.Core.Impl.Binary.BinaryReflectiveWriteAction@,Apache.Ignite.Core.Impl.Binary.BinaryReflectiveReadAction@,System.Boolean,System.Boolean)">
            <summary>
            Handle other type.
            </summary>
            <param name="field">The field.</param>
            <param name="writeAction">Write action.</param>
            <param name="readAction">Read action.</param>
            <param name="raw">Raw mode.</param>
            <param name="forceTimestamp">Force timestamp serialization for DateTime fields..</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryReflectiveActions.IsTimestamp(System.Reflection.FieldInfo,System.Boolean,System.Boolean)">
            <summary>
            Determines whether specified field should be written as timestamp.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryReflectiveActions.GetWriter``1(System.Reflection.FieldInfo,System.Linq.Expressions.Expression{System.Action{System.String,Apache.Ignite.Core.Binary.IBinaryWriter,``0}},System.Boolean)">
            <summary>
            Gets the reader with a specified write action.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryReflectiveActions.GetRawWriter``1(System.Reflection.FieldInfo,System.Linq.Expressions.Expression{System.Action{Apache.Ignite.Core.Binary.IBinaryRawWriter,``0}},System.Boolean)">
            <summary>
            Gets the reader with a specified write action.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryReflectiveActions.GetWriter(System.Reflection.FieldInfo,System.Reflection.MethodInfo,System.Type[])">
            <summary>
            Gets the writer with a specified generic method.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryReflectiveActions.GetRawWriter(System.Reflection.FieldInfo,System.Reflection.MethodInfo,System.Type[])">
            <summary>
            Gets the writer with a specified generic method.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryReflectiveActions.GetWriter0(System.Reflection.FieldInfo,System.Reflection.MethodInfo,System.Boolean,System.Type[])">
            <summary>
            Gets the writer with a specified generic method.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryReflectiveActions.GetReader``1(System.Reflection.FieldInfo,System.Linq.Expressions.Expression{System.Func{System.String,Apache.Ignite.Core.Binary.IBinaryReader,``0}})">
            <summary>
            Gets the reader with a specified read action.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryReflectiveActions.GetRawReader``1(System.Reflection.FieldInfo,System.Linq.Expressions.Expression{System.Func{Apache.Ignite.Core.Binary.IBinaryRawReader,``0}})">
            <summary>
            Gets the reader with a specified read action.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryReflectiveActions.GetReader(System.Reflection.FieldInfo,System.Reflection.MethodInfo,System.Type[])">
            <summary>
            Gets the reader with a specified generic method.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryReflectiveActions.GetRawReader(System.Reflection.FieldInfo,System.Reflection.MethodInfo,System.Type[])">
            <summary>
            Gets the reader with a specified generic method.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryReflectiveActions.GetReader0(System.Reflection.FieldInfo,System.Reflection.MethodInfo,System.Boolean,System.Type[])">
            <summary>
            Gets the reader with a specified generic method.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Binary.Binary">
            <summary>
            Binary implementation.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Binary.IBinary">
            <summary>
            Defines binary objects functionality. With binary objects you are able to:
            <list type="bullet">
                <item>
                    <description>Seamlessly interoperate between Java, .NET, and C++.</description>
                </item>
                <item>
                    <description>Make any object binary with zero code change to your existing code.</description>
                </item>
                <item>
                    <description>Nest binary objects within each other.</description>
                </item>
                <item>
                    <description>Automatically handle <c>circular</c> or <c>null</c> references.</description>
                </item>
                <item>
                    <description>Automatically convert collections and maps between Java, .NET, and C++.</description>
                </item>
                <item>
                    <description>Optionally avoid deserialization of objects on the server side.</description>
                </item>
                <item>
                    <description>Avoid need to have concrete class definitions on the server side.</description>
                </item>
                <item>
                    <description>Dynamically change structure of the classes without having to restart the cluster.</description>
                </item>
                <item>
                    <description>Index into binary objects for querying purposes.</description>
                </item>
            </list>
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinary.ToBinary``1(System.Object)">
            <summary>
            Converts provided object to binary form.
            <para/>
            Note that object's type needs to be configured in <see cref="T:Apache.Ignite.Core.Binary.BinaryConfiguration"/>.
            </summary>
            <param name="obj">Object to convert.</param>
            <returns>Converted object.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinary.GetBuilder(System.Type)">
            <summary>
            Create builder for the given binary object type. Note that this
            type must be specified in <see cref="T:Apache.Ignite.Core.Binary.BinaryConfiguration"/>.
            </summary>
            <param name="type"></param>
            <returns>Builder.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinary.GetBuilder(System.String)">
            <summary>
            Create builder for the given binary object type name.
            </summary>
            <param name="typeName">Type name.</param>
            <returns>Builder.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinary.GetBuilder(Apache.Ignite.Core.Binary.IBinaryObject)">
            <summary>
            Create builder over existing binary object.
            </summary>
            <param name="obj"></param>
            <returns>Builder.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinary.GetTypeId(System.String)">
            <summary>
            Gets type id for the given type name.
            </summary>
            <param name="typeName">Type name.</param>
            <returns>Type id.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinary.GetBinaryTypes">
            <summary>
            Gets metadata for all known types.
            </summary>
            <returns>Metadata.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinary.GetBinaryType(System.Int32)">
            <summary>
            Gets metadata for specified type id.
            </summary>
            <returns>Metadata.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinary.GetBinaryType(System.String)">
            <summary>
            Gets metadata for specified type name.
            </summary>
            <returns>Metadata.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinary.GetBinaryType(System.Type)">
            <summary>
            Gets metadata for specified type.
            </summary>
            <returns>Metadata.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinary.BuildEnum(System.String,System.Int32)">
            <summary>
            Converts enum to a binary form.
            </summary>
            <param name="typeName">Enum type name.</param>
            <param name="value">Enum int value.</param>
            <returns>Binary representation of the specified enum value.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinary.BuildEnum(System.Type,System.Int32)">
            <summary>
            Converts enum to a binary form.
            </summary>
            <param name="type">Enum type.</param>
            <param name="value">Enum int value.</param>
            <returns>Binary representation of the specified enum value.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinary.BuildEnum(System.String,System.String)">
            <summary>
            Converts enum to a binary form.
            </summary>
            <param name="typeName">Enum type name.</param>
            <param name="valueName">Enum value name.</param>
            <returns>Binary representation of the specified enum value.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinary.BuildEnum(System.Type,System.String)">
            <summary>
            Converts enum to a binary form.
            </summary>
            <param name="type">Enum type.</param>
            <param name="valueName">Enum value name.</param>
            <returns>Binary representation of the specified enum value.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinary.RegisterEnum(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Int32}})">
            <summary>
            Registers enum type.
            </summary>
            <param name="typeName">Name of the type.</param>
            <param name="values">Mapping of enum value names to int values.</param>
            <returns>Binary type for registered enum.</returns>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.Binary._marsh">
            Owning grid. 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.Binary.#ctor(Apache.Ignite.Core.Impl.Binary.Marshaller)">
            <summary>
            Constructor.
            </summary>
            <param name="marsh">Marshaller.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.Binary.ToBinary``1(System.Object)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.Binary.GetBuilder(System.Type)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.Binary.GetBuilder(System.String)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.Binary.GetBuilder(Apache.Ignite.Core.Binary.IBinaryObject)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.Binary.GetTypeId(System.String)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.Binary.GetBinaryTypes">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.Binary.GetBinaryType(System.Int32)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.Binary.GetBinaryType(System.String)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.Binary.GetBinaryType(System.Type)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.Binary.BuildEnum(System.String,System.Int32)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.Binary.BuildEnum(System.Type,System.Int32)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.Binary.BuildEnum(System.String,System.String)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.Binary.BuildEnum(System.Type,System.String)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.Binary.RegisterEnum(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Int32}})">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.Binary.Builder0(Apache.Ignite.Core.Impl.Binary.BinaryObjectBuilder,Apache.Ignite.Core.Impl.Binary.BinaryObject,Apache.Ignite.Core.Impl.Binary.IBinaryTypeDescriptor)">
            <summary>
            Internal builder creation routine.
            </summary>
            <param name="parent">Parent builder.</param>
            <param name="obj">binary object.</param>
            <param name="desc">Type descriptor.</param>
            <returns>Builder.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.Binary.GetEnumValueAsInt(System.String,System.String,Apache.Ignite.Core.Impl.Binary.IBinaryTypeDescriptor)">
            <summary>
            Gets the enum value as int.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.Binary.Marshaller">
            <summary>
            Marshaller.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Binary.Structure.BinaryStructureTracker">
            <summary>
            Encapsulates logic for tracking field access and updating type descriptor structure.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.Structure.BinaryStructureTracker._desc">
            Current type structure. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.Structure.BinaryStructureTracker._portStruct">
            Struct. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.Structure.BinaryStructureTracker._curStructPath">
            Current type structure path index. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.Structure.BinaryStructureTracker._curStructAction">
            Current type structure action index. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.Structure.BinaryStructureTracker._curStructUpdates">
            Current type structure updates. 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.Structure.BinaryStructureTracker.#ctor(Apache.Ignite.Core.Impl.Binary.IBinaryTypeDescriptor,Apache.Ignite.Core.Impl.Binary.Structure.BinaryStructure)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Impl.Binary.Structure.BinaryStructureTracker"/> class.
            </summary>
            <param name="desc">The desc.</param>
            <param name="portStruct">The structure to work with.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.Structure.BinaryStructureTracker.GetFieldId(System.String,System.Byte)">
            <summary>
            Gets the field ID.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.Structure.BinaryStructureTracker.UpdateReaderStructure">
            <summary>
            Updates the type structure.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.Structure.BinaryStructureTracker.UpdateWriterStructure(Apache.Ignite.Core.Impl.Binary.BinaryWriter)">
            <summary>
            Updates the type structure and metadata for the specified writer.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.Structure.BinaryStructureTracker.GetNewFieldId(System.String,System.Byte,System.Int32)">
            <summary>
            Get ID for the new field and save structure update.
            </summary>
            <param name="fieldName">Field name.</param>
            <param name="fieldTypeId">Field type ID.</param>
            <param name="action">Action index.</param>
            <returns>
            Field ID.
            </returns>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.Structure.BinaryStructureTracker.CurStructAction">
            <summary>
            Gets the current structure action.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Binary.BinarySurrogateTypeDescriptor">
            <summary>
            Surrogate type descriptor. Used in cases when type if identified by name and 
            is not provided in configuration.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinarySurrogateTypeDescriptor._cfg">
            Binary configuration. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinarySurrogateTypeDescriptor._id">
            Type ID. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinarySurrogateTypeDescriptor._name">
            Type name. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinarySurrogateTypeDescriptor._writerTypeStruct">
            Type structure. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinarySurrogateTypeDescriptor._readerTypeStructure">
            Type structure. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinarySurrogateTypeDescriptor._schema">
            Type schema. 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinarySurrogateTypeDescriptor.#ctor(Apache.Ignite.Core.Binary.BinaryConfiguration,System.Int32,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="cfg">Configuration.</param>
            <param name="id">Type ID.</param>
            <param name="typeName">Name of the type.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinarySurrogateTypeDescriptor.UpdateWriteStructure(Apache.Ignite.Core.Impl.Binary.Structure.BinaryStructure,System.Int32,System.Collections.Generic.IList{Apache.Ignite.Core.Impl.Binary.Structure.BinaryStructureUpdate})">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinarySurrogateTypeDescriptor.UpdateReadStructure(Apache.Ignite.Core.Impl.Binary.Structure.BinaryStructure,System.Int32,System.Collections.Generic.IList{Apache.Ignite.Core.Impl.Binary.Structure.BinaryStructureUpdate})">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.BinarySurrogateTypeDescriptor.Type">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.BinarySurrogateTypeDescriptor.TypeId">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.BinarySurrogateTypeDescriptor.TypeName">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.BinarySurrogateTypeDescriptor.UserType">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.BinarySurrogateTypeDescriptor.KeepDeserialized">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.BinarySurrogateTypeDescriptor.NameMapper">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.BinarySurrogateTypeDescriptor.IdMapper">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.BinarySurrogateTypeDescriptor.Serializer">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.BinarySurrogateTypeDescriptor.AffinityKeyFieldName">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.BinarySurrogateTypeDescriptor.IsEnum">
            <inheritdoc/> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.BinarySurrogateTypeDescriptor.WriterTypeStructure">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.BinarySurrogateTypeDescriptor.Schema">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.BinarySurrogateTypeDescriptor.IsRegistered">
            <inheritDoc /> 
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Binary.BinarySystemHandlers">
            <summary>Collection of predefined handlers for various system types.</summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinarySystemHandlers.WriteHandlers">
            Write handlers. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinarySystemHandlers.ReadHandlers">
            Read handlers. 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinarySystemHandlers.#cctor">
            <summary>
            Initializes the <see cref="T:Apache.Ignite.Core.Impl.Binary.BinarySystemHandlers"/> class.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinarySystemHandlers.GetWriteHandler(System.Type)">
            <summary>
            Try getting write handler for type.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinarySystemHandlers.FindWriteHandler(System.Type)">
            <summary>
            Find write handler for type.
            </summary>
            <param name="type">Type.</param>
            <returns>
            Write handler or NULL.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinarySystemHandlers.TryReadSystemType``1(System.Byte,Apache.Ignite.Core.Impl.Binary.BinaryReader,``0@)">
            <summary>
            Reads an object of predefined type.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinarySystemHandlers.WriteDecimal(Apache.Ignite.Core.Impl.Binary.BinaryWriter,System.Decimal)">
            <summary>
            Write decimal.
            </summary>
            <param name="ctx">Context.</param>
            <param name="obj">Value.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinarySystemHandlers.WriteString(Apache.Ignite.Core.Impl.Binary.BinaryWriter,System.String)">
            <summary>
            Write string.
            </summary>
            <param name="ctx">Context.</param>
            <param name="obj">Object.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinarySystemHandlers.WriteGuid(Apache.Ignite.Core.Impl.Binary.BinaryWriter,System.Guid)">
            <summary>
            Write Guid.
            </summary>
            <param name="ctx">Context.</param>
            <param name="obj">Value.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinarySystemHandlers.WriteBoolArray(Apache.Ignite.Core.Impl.Binary.BinaryWriter,System.Boolean[])">
            <summary>
            Write boolaen array.
            </summary>
            <param name="ctx">Context.</param>
            <param name="obj">Value.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinarySystemHandlers.WriteByteArray(Apache.Ignite.Core.Impl.Binary.BinaryWriter,System.Byte[])">
            <summary>
            Write byte array.
            </summary>
            <param name="ctx">Context.</param>
            <param name="obj">Value.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinarySystemHandlers.WriteShortArray(Apache.Ignite.Core.Impl.Binary.BinaryWriter,System.Int16[])">
            <summary>
            Write short array.
            </summary>
            <param name="ctx">Context.</param>
            <param name="obj">Value.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinarySystemHandlers.WriteCharArray(Apache.Ignite.Core.Impl.Binary.BinaryWriter,System.Object)">
            <summary>
            Write char array.
            </summary>
            <param name="ctx">Context.</param>
            <param name="obj">Value.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinarySystemHandlers.WriteIntArray(Apache.Ignite.Core.Impl.Binary.BinaryWriter,System.Int32[])">
            <summary>
            Write int array.
            </summary>
            <param name="ctx">Context.</param>
            <param name="obj">Value.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinarySystemHandlers.WriteLongArray(Apache.Ignite.Core.Impl.Binary.BinaryWriter,System.Int64[])">
            <summary>
            Write long array.
            </summary>
            <param name="ctx">Context.</param>
            <param name="obj">Value.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinarySystemHandlers.WriteFloatArray(Apache.Ignite.Core.Impl.Binary.BinaryWriter,System.Single[])">
            <summary>
            Write float array.
            </summary>
            <param name="ctx">Context.</param>
            <param name="obj">Value.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinarySystemHandlers.WriteDoubleArray(Apache.Ignite.Core.Impl.Binary.BinaryWriter,System.Double[])">
            <summary>
            Write double array.
            </summary>
            <param name="ctx">Context.</param>
            <param name="obj">Value.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinarySystemHandlers.WriteDecimalArray(Apache.Ignite.Core.Impl.Binary.BinaryWriter,System.Nullable{System.Decimal}[])">
            <summary>
            Write decimal array.
            </summary>
            <param name="ctx">Context.</param>
            <param name="obj">Value.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinarySystemHandlers.WriteStringArray(Apache.Ignite.Core.Impl.Binary.BinaryWriter,System.String[])">
            <summary>
            Write string array.
            </summary>
            <param name="ctx">Context.</param>
            <param name="obj">Value.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinarySystemHandlers.WriteGuidArray(Apache.Ignite.Core.Impl.Binary.BinaryWriter,System.Nullable{System.Guid}[])">
            <summary>
            Write nullable GUID array.
            </summary>
            <param name="ctx">Context.</param>
            <param name="obj">Value.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinarySystemHandlers.WriteEnumArray(Apache.Ignite.Core.Impl.Binary.BinaryWriter,System.Object)">
            <summary>
            Writes the enum array.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinarySystemHandlers.WriteArray(Apache.Ignite.Core.Impl.Binary.BinaryWriter,System.Object)">
            <summary>
            Writes the array.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinarySystemHandlers.WriteArrayList(Apache.Ignite.Core.Impl.Binary.BinaryWriter,System.Collections.ICollection)">
            <summary>Write ArrayList.</summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinarySystemHandlers.WriteHashtable(Apache.Ignite.Core.Impl.Binary.BinaryWriter,System.Collections.IDictionary)">
            <summary>Write Hashtable.</summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinarySystemHandlers.WriteBinary(Apache.Ignite.Core.Impl.Binary.BinaryWriter,Apache.Ignite.Core.Impl.Binary.BinaryObject)">
            <summary>Write binary object.</summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinarySystemHandlers.WriteBinaryEnum(Apache.Ignite.Core.Impl.Binary.BinaryWriter,Apache.Ignite.Core.Impl.Binary.BinaryEnum)">
            <summary>
            Write enum.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinarySystemHandlers.ReadEnumArray(Apache.Ignite.Core.Impl.Binary.BinaryReader,System.Type)">
            <summary>Read enum array.</summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinarySystemHandlers.ReadArray(Apache.Ignite.Core.Impl.Binary.BinaryReader,System.Type)">
            <summary>
            Reads the array.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinarySystemHandlers.ReadCollection(Apache.Ignite.Core.Impl.Binary.BinaryReader,System.Type)">
            <summary>Read collection.</summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinarySystemHandlers.ReadDictionary(Apache.Ignite.Core.Impl.Binary.BinaryReader,System.Type)">
            <summary>Read dictionary.</summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinarySystemHandlers.WriteIgnite(Apache.Ignite.Core.Impl.Binary.BinaryWriter,System.Object)">
            <summary>
            Write Ignite.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Binary.BinarySystemHandlers.BinarySystemReadDelegate">
            <summary>Read delegate.</summary>
            <param name="ctx">Read context.</param>
            <param name="type">Type.</param>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Binary.BinarySystemHandlers.IBinarySystemReader">
            <summary>
            System type reader.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinarySystemHandlers.IBinarySystemReader.Read``1(Apache.Ignite.Core.Impl.Binary.BinaryReader)">
            <summary>
            Reads a value of specified type from reader.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Binary.BinarySystemHandlers.IBinarySystemReader`1">
            <summary>
            System type generic reader.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinarySystemHandlers.IBinarySystemReader`1.Read(Apache.Ignite.Core.Impl.Binary.BinaryReader)">
            <summary>
            Reads a value of specified type from reader.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Binary.BinarySystemHandlers.BinarySystemReader">
            <summary>
            Default reader with boxing.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinarySystemHandlers.BinarySystemReader._readDelegate">
            
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinarySystemHandlers.BinarySystemReader.#ctor(Apache.Ignite.Core.Impl.Binary.BinarySystemHandlers.BinarySystemReadDelegate)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Impl.Binary.BinarySystemHandlers.BinarySystemReader"/> class.
            </summary>
            <param name="readDelegate">The read delegate.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinarySystemHandlers.BinarySystemReader.Read``1(Apache.Ignite.Core.Impl.Binary.BinaryReader)">
            <inheritdoc /> 
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Binary.BinarySystemHandlers.BinarySystemReader`1">
            <summary>
            Reader without boxing.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinarySystemHandlers.BinarySystemReader`1._readDelegate">
            
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinarySystemHandlers.BinarySystemReader`1.#ctor(System.Func{Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream,`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Impl.Binary.BinarySystemHandlers.BinarySystemReader`1"/> class.
            </summary>
            <param name="readDelegate">The read delegate.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinarySystemHandlers.BinarySystemReader`1.Read``1(Apache.Ignite.Core.Impl.Binary.BinaryReader)">
            <inheritdoc /> 
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Binary.BinarySystemHandlers.BinarySystemTypedArrayReader`1">
            <summary>
            Reader without boxing.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Binary.BinarySystemHandlers.BinarySystemDualReader`2">
            <summary>
            Reader with selection based on requested type.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinarySystemHandlers.BinarySystemDualReader`2._readDelegate1">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinarySystemHandlers.BinarySystemDualReader`2._readDelegate2">
            
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinarySystemHandlers.BinarySystemDualReader`2.#ctor(System.Func{Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream,`0},System.Func{Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Impl.Binary.BinarySystemHandlers.BinarySystemDualReader`2"/> class.
            </summary>
            <param name="readDelegate1">The read delegate1.</param>
            <param name="readDelegate2">The read delegate2.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinarySystemHandlers.BinarySystemDualReader`2.Apache#Ignite#Core#Impl#Binary#BinarySystemHandlers#IBinarySystemReader{T2}#Read(Apache.Ignite.Core.Impl.Binary.BinaryReader)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinarySystemHandlers.BinarySystemDualReader`2.Read``1(Apache.Ignite.Core.Impl.Binary.BinaryReader)">
            <inheritdoc /> 
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Binary.IBinarySystemWriteHandler">
            <summary>
            Write delegate + handles flag.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.IBinarySystemWriteHandler.Write``1(Apache.Ignite.Core.Impl.Binary.BinaryWriter,``0)">
            <summary>
            Writes object to a specified writer.
            </summary>
            <param name="writer">The writer.</param>
            <param name="obj">The object.</param>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.IBinarySystemWriteHandler.SupportsHandles">
            <summary>
            Gets a value indicating whether this handler supports handles.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Binary.BinarySystemWriteHandler`1">
            <summary>
            Write delegate + handles flag.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinarySystemWriteHandler`1._writeAction">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinarySystemWriteHandler`1._supportsHandles">
            
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinarySystemWriteHandler`1.#ctor(System.Action{Apache.Ignite.Core.Impl.Binary.BinaryWriter,`0},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Impl.Binary.BinarySystemWriteHandler`1"/> class.
            </summary>
            <param name="writeAction">The write action.</param>
            <param name="supportsHandles">Handles flag.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinarySystemWriteHandler`1.Write``1(Apache.Ignite.Core.Impl.Binary.BinaryWriter,``0)">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.BinarySystemWriteHandler`1.SupportsHandles">
            <inheritdoc /> 
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Binary.BinarySystemTypeSerializer`1">
            <summary>
            Binary serializer for system types.
            </summary>
            <typeparam name="T">Object type.</typeparam>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinarySystemTypeSerializer`1._ctor">
            Ctor delegate. 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinarySystemTypeSerializer`1.#ctor(System.Func{Apache.Ignite.Core.Impl.Binary.BinaryReader,`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Impl.Binary.BinarySystemTypeSerializer`1"/> class.
            </summary>
            <param name="ctor">Constructor delegate.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinarySystemTypeSerializer`1.WriteBinary``1(``0,Apache.Ignite.Core.Impl.Binary.BinaryWriter)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinarySystemTypeSerializer`1.ReadBinary``1(Apache.Ignite.Core.Impl.Binary.BinaryReader,Apache.Ignite.Core.Impl.Binary.IBinaryTypeDescriptor,System.Int32,System.Type)">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.BinarySystemTypeSerializer`1.SupportsHandles">
            <inheritdoc /> 
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Binary.BinaryObject">
            <summary>
            Binary object.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryObject.EmptyFields">
            Cache empty dictionary. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryObject._marsh">
            Marshaller. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryObject._data">
            Raw data of this binary object. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryObject._offset">
            Offset in data array. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryObject._header">
            Header. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryObject._fields">
            Fields. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryObject._deserialized">
            Deserialized value. 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryObject.#ctor(Apache.Ignite.Core.Impl.Binary.Marshaller,System.Byte[],System.Int32,Apache.Ignite.Core.Impl.Binary.BinaryObjectHeader)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Impl.Binary.BinaryObject"/> class.
            </summary>
            <param name="marsh">Marshaller.</param>
            <param name="data">Raw data of this binary object.</param>
            <param name="offset">Offset in data array.</param>
            <param name="header">The header.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryObject.GetField``1(System.String)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryObject.HasField(System.String)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryObject.GetField``1(System.Int32,Apache.Ignite.Core.Impl.Binary.BinaryObjectBuilder)">
            <summary>
            Gets field value on the given object.
            </summary>
            <param name="pos">Position.</param>
            <param name="builder">Builder.</param>
            <returns>Field value.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryObject.Deserialize``1">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryObject.ToBuilder">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryObject.Deserialize``1(Apache.Ignite.Core.Impl.Binary.BinaryMode)">
            <summary>
            Internal deserialization routine.
            </summary>
            <param name="mode">The mode.</param>
            <returns>
            Deserialized object.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryObject.GetBinaryType">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryObject.InitializeFields(Apache.Ignite.Core.Impl.Binary.IBinaryTypeDescriptor)">
            <summary>
            Lazy fields initialization routine.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryObject.GetHashCode">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryObject.Equals(System.Object)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryObject.ToString">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryObject.ToString(System.Collections.Generic.IDictionary{System.Int32,System.Int32})">
            <summary>
            ToString implementation.
            </summary>
            <param name="handled">Already handled objects.</param>
            <returns>Object string.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryObject.ToString0(System.Text.StringBuilder,System.Object,System.Collections.Generic.IDictionary{System.Int32,System.Int32})">
            <summary>
            Internal ToString routine with correct collections printout.
            </summary>
            <param name="sb">String builder.</param>
            <param name="obj">Object to print.</param>
            <param name="handled">Already handled objects.</param>
            <returns>The same string builder.</returns>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.BinaryObject.TypeId">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.BinaryObject.EnumValue">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.BinaryObject.EnumName">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.BinaryObject.Data">
            <summary>
            Raw data of this binary object.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.BinaryObject.Offset">
            <summary>
            Offset in data array.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.BinaryObject.Header">
            <summary>
            Gets the header.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Binary.BinaryUtils">
            <summary>
            Utilities for binary serialization.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryUtils.HdrNull">
            Header of NULL object. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryUtils.HdrHnd">
            Header of object handle. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryUtils.HdrFull">
            Header of object in fully serialized form. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryUtils.ProtoVer">
            Protocol versnion. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryUtils.CollectionCustom">
            Collection: custom. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryUtils.CollectionArrayList">
            Collection: array list. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryUtils.CollectionLinkedList">
            Collection: linked list. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryUtils.MapCustom">
            Map: custom. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryUtils.MapHashMap">
            Map: hash map. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryUtils.ByteZero">
            Byte "0". 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryUtils.ObjTypeId">
            Indicates object array. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryUtils.BindFlagsStatic">
            Bindig flags for static search. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryUtils.IgniteBinaryMarshallerUseStringSerializationVer2">
            String mode environment variable. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryUtils.JavaDateTicks">
            Ticks for Java epoch. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryUtils.Marsh">
            System marshaller. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryUtils.MtdhReadArray">
            Method: ReadArray. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryUtils.Utf8">
            Cached UTF8 encoding. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryUtils.ArrayReaders">
            Cached generic array read funcs. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryUtils.IsGuidSequential">
            Flag indicating whether Guid struct is sequential in current runtime. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryUtils.WriteGuid">
            Guid writer. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryUtils.ReadGuid">
            Guid reader. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryUtils.UseStringSerializationVer2">
            String mode. 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryUtils.WriteBooleanArray(System.Boolean[],Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream)">
            <summary>Write boolean array.</summary>
            <param name="vals">Value.</param>
            <param name="stream">Output stream.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryUtils.ReadBooleanArray(Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream)">
            <summary>Read boolean array.</summary>
            <param name="stream">Output stream.</param>
            <returns>Value.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryUtils.WriteByteArray(System.Byte[],Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream)">
            <summary>Write byte array.</summary>
            <param name="vals">Value.</param>
            <param name="stream">Output stream.</param>
            <returns>Length of written data.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryUtils.ReadByteArray(Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream)">
            <summary>Read byte array.</summary>
            <param name="stream">Output stream.</param>
            <returns>Value.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryUtils.ReadSbyteArray(Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream)">
            <summary>Read byte array.</summary>
            <param name="stream">Output stream.</param>
            <returns>Value.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryUtils.WriteShortArray(System.Int16[],Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream)">
            <summary>Write short array.</summary>
            <param name="vals">Value.</param>
            <param name="stream">Output stream.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryUtils.ReadUshortArray(Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream)">
            <summary>Read short array.</summary>
            <param name="stream">Stream.</param>
            <returns>Value.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryUtils.ReadShortArray(Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream)">
            <summary>Read short array.</summary>
            <param name="stream">Stream.</param>
            <returns>Value.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryUtils.WriteIntArray(System.Int32[],Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream)">
            <summary>Write int array.</summary>
            <param name="vals">Value.</param>
            <param name="stream">Output stream.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryUtils.ReadIntArray(Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream)">
            <summary>Read int array.</summary>
            <param name="stream">Stream.</param>
            <returns>Value.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryUtils.ReadUintArray(Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream)">
            <summary>Read int array.</summary>
            <param name="stream">Stream.</param>
            <returns>Value.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryUtils.WriteLongArray(System.Int64[],Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream)">
            <summary>Write long array.</summary>
            <param name="vals">Value.</param>
            <param name="stream">Output stream.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryUtils.ReadLongArray(Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream)">
            <summary>Read long array.</summary>
            <param name="stream">Stream.</param>
            <returns>Value.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryUtils.ReadUlongArray(Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream)">
            <summary>Read ulong array.</summary>
            <param name="stream">Stream.</param>
            <returns>Value.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryUtils.WriteCharArray(System.Char[],Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream)">
            <summary>Write char array.</summary>
            <param name="vals">Value.</param>
            <param name="stream">Output stream.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryUtils.ReadCharArray(Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream)">
            <summary>Read char array.</summary>
            <param name="stream">Stream.</param>
            <returns>Value.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryUtils.WriteFloatArray(System.Single[],Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream)">
            <summary>Write float array.</summary>
            <param name="vals">Value.</param>
            <param name="stream">Output stream.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryUtils.ReadFloatArray(Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream)">
            <summary>Read float array.</summary>
            <param name="stream">Stream.</param>
            <returns>Value.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryUtils.WriteDoubleArray(System.Double[],Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream)">
            <summary>Write double array.</summary>
            <param name="vals">Value.</param>
            <param name="stream">Output stream.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryUtils.ReadDoubleArray(Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream)">
            <summary>Read double array.</summary>
            <param name="stream">Stream.</param>
            <returns>Value.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryUtils.WriteTimestamp(System.DateTime,Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream)">
            <summary>Write date.</summary>
            <param name="val">Date.</param>
            <param name="stream">Stream.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryUtils.ReadTimestamp(Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream)">
            <summary>Read date.</summary>
            <param name="stream">Stream.</param>
            <returns>Date</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryUtils.WriteTimestampArray(System.Nullable{System.DateTime}[],Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream)">
            <summary>
            Write nullable date array.
            </summary>
            <param name="vals">Values.</param>
            <param name="stream">Stream.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryUtils.WriteString(System.String,Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream)">
            <summary>Write string in UTF8 encoding.</summary>
            <param name="val">String.</param>
            <param name="stream">Stream.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryUtils.StringToUtf8Bytes(System.Char*,System.Int32,System.Int32,System.Text.Encoding,System.Byte*)">
            <summary>
            Converts string to UTF8 bytes.
            </summary>
            <param name="chars">Chars.</param>
            <param name="charCnt">Chars count.</param>
            <param name="byteCnt">Bytes count.</param>
            <param name="enc">Encoding.</param>
            <param name="data">Data.</param>
            <returns>Amount of bytes written.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryUtils.GetUtf8ByteCount(System.Char*,System.Int32)">
            <summary>
            Gets the UTF8 byte count.
            </summary>
            <param name="chars">The chars.</param>
            <param name="strLen">Length of the string.</param>
            <returns>UTF byte count.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryUtils.Utf8BytesToString(System.Byte[])">
            <summary>
            Converts UTF8 bytes to string.
            </summary>
            <param name="arr">The bytes.</param>
            <returns>Resulting string.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryUtils.ReadString(Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream)">
            <summary>Read string in UTF8 encoding.</summary>
            <param name="stream">Stream.</param>
            <returns>String.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryUtils.WriteStringArray(System.String[],Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream)">
            <summary>Write string array in UTF8 encoding.</summary>
            <param name="vals">String array.</param>
            <param name="stream">Stream.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryUtils.WriteDecimal(System.Decimal,Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream)">
            <summary>Write decimal value.</summary>
            <param name="val">Decimal value.</param>
            <param name="stream">Stream.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryUtils.ReadDecimal(Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream)">
            <summary>Read decimal value.</summary>
            <param name="stream">Stream.</param>
            <returns>Decimal value.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryUtils.WriteDecimalArray(System.Nullable{System.Decimal}[],Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream)">
            <summary>Write decimal array.</summary>
            <param name="vals">Decimal array.</param>
            <param name="stream">Stream.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryUtils.ReadDecimalArray(Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream)">
            <summary>Read decimal array.</summary>
            <param name="stream">Stream.</param>
            <returns>Decimal array.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryUtils.GetIsGuidSequential">
            <summary>
            Gets a value indicating whether <see cref="T:System.Guid"/> fields are stored sequentially in memory.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryUtils.WriteGuidFast(System.Guid,Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream)">
            <summary>
            Writes a guid with bitwise conversion, assuming that <see cref="T:System.Guid"/> 
            is laid out in memory sequentially and without gaps between fields.
            </summary>
            <param name="val">The value.</param>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryUtils.WriteGuidSlow(System.Guid,Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream)">
            <summary>
            Writes a guid byte by byte.
            </summary>
            <param name="val">The value.</param>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryUtils.ReadGuidFast(Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream)">
            <summary>
            Reads a guid with bitwise conversion, assuming that <see cref="T:System.Guid"/> 
            is laid out in memory sequentially and without gaps between fields.
            </summary>
            <param name="stream">The stream.</param>
            <returns>Guid.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryUtils.ReadGuidSlow(Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream)">
            <summary>
            Reads a guid byte by byte.
            </summary>
            <param name="stream">The stream.</param>
            <returns>Guid.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryUtils.WriteGuidArray(System.Nullable{System.Guid}[],Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream)">
            <summary>
            Write GUID array.
            </summary>
            <param name="vals">Values.</param>
            <param name="stream">Stream.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryUtils.WriteArray(System.Array,Apache.Ignite.Core.Impl.Binary.BinaryWriter,System.Nullable{System.Int32})">
            <summary>
            Write array.
            </summary>
            <param name="val">Array.</param>
            <param name="ctx">Write context.</param>
            <param name="elemTypeId">The element type id.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryUtils.ReadTypedArray(Apache.Ignite.Core.Impl.Binary.BinaryReader,System.Boolean,System.Type)">
            <summary>
            Read array.
            </summary>
            <param name="ctx">Read context.</param>
            <param name="typed">Typed flag.</param>
            <param name="elementType">Type of the element.</param>
            <returns>Array.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryUtils.ReadArray``1(Apache.Ignite.Core.Impl.Binary.BinaryReader,System.Boolean)">
            <summary>
            Read array.
            </summary>
            <param name="ctx">Read context.</param>
            <param name="typed">Typed flag.</param>
            <returns>Array.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryUtils.ReadTimestampArray(Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream)">
            <summary>
            Read timestamp array.
            </summary>
            <param name="stream">Stream.</param>
            <returns>Timestamp array.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryUtils.WriteCollection(System.Collections.ICollection,Apache.Ignite.Core.Impl.Binary.BinaryWriter)">
            <summary>Write collection.</summary>
            <param name="val">Value.</param>
            <param name="ctx">Write context.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryUtils.WriteCollection(System.Collections.ICollection,Apache.Ignite.Core.Impl.Binary.BinaryWriter,System.Byte)">
            <summary>Write non-null collection with known type.</summary>
            <param name="val">Value.</param>
            <param name="ctx">Write context.</param>
            <param name="colType">Collection type.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryUtils.ReadCollection(Apache.Ignite.Core.Impl.Binary.BinaryReader,System.Func{System.Int32,System.Collections.ICollection},System.Action{System.Collections.ICollection,System.Object})">
            <summary>Read collection.</summary>
            <param name="ctx">Context.</param>
            <param name="factory">Factory delegate.</param>
            <param name="adder">Adder delegate.</param>
            <returns>Collection.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryUtils.WriteDictionary(System.Collections.IDictionary,Apache.Ignite.Core.Impl.Binary.BinaryWriter)">
            <summary>Write dictionary.</summary>
            <param name="val">Value.</param>
            <param name="ctx">Write context.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryUtils.WriteDictionary(System.Collections.IDictionary,Apache.Ignite.Core.Impl.Binary.BinaryWriter,System.Byte)">
            <summary>Write non-null dictionary with known type.</summary>
            <param name="val">Value.</param>
            <param name="ctx">Write context.</param>
            <param name="dictType">Dictionary type.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryUtils.ReadDictionary(Apache.Ignite.Core.Impl.Binary.BinaryReader,System.Func{System.Int32,System.Collections.IDictionary})">
            <summary>Read dictionary.</summary>
            <param name="ctx">Context.</param>
            <param name="factory">Factory delegate.</param>
            <returns>Dictionary.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryUtils.WriteBinary(Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream,Apache.Ignite.Core.Impl.Binary.BinaryObject)">
            <summary>Write binary object.</summary>
            <param name="stream">Stream.</param>
            <param name="val">Value.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryUtils.GetEnumValue``1(System.Int32,System.Int32,Apache.Ignite.Core.Impl.Binary.Marshaller)">
            <summary>
            Gets the enum value by type id and int representation.
            </summary>
            <typeparam name="T">Result type.</typeparam>
            <param name="value">The value.</param>
            <param name="typeId">The type identifier.</param>
            <param name="marsh">The marshaller.</param>
            <returns>value in form of enum, if typeId is known; value in for of int, if typeId is -1.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryUtils.TypeKey(System.Boolean,System.Int32)">
            <summary>Gets type key.</summary>
            <param name="userType">User type flag.</param>
            <param name="typeId">Type ID.</param>
            <returns>Type key.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryUtils.GetStringHashCode(System.String)">
            <summary>
            Gets the string hash code using Java algorithm.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryUtils.GetCacheId(System.String)">
            <summary>
            Gets the cache identifier.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryUtils.CleanFieldName(System.String)">
            <summary>
            Cleans the name of the field.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryUtils.ConvertFieldName(System.String,Apache.Ignite.Core.Binary.IBinaryNameMapper)">
            <summary>
            Convert field name.
            </summary>
            <param name="fieldName">Field name.</param>
            <param name="converter">Converter.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryUtils.GetSqlTypeName(System.Type)">
            <summary>
            Gets the SQL name of the type.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryUtils.FieldId(System.Int32,System.String,Apache.Ignite.Core.Binary.IBinaryNameMapper,Apache.Ignite.Core.Binary.IBinaryIdMapper)">
            <summary>Resolve field ID.</summary>
            <param name="typeId">Type ID.</param>
            <param name="fieldName">Field name.</param>
            <param name="nameMapper">Name mapper.</param>
            <param name="idMapper">ID mapper.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryUtils.WriteInvocationResult(Apache.Ignite.Core.Impl.Binary.BinaryWriter,System.Boolean,System.Object)">
            <summary>
            Writes invocation result.
            </summary>
            <param name="writer">Writer.</param>
            <param name="success">Success flag.</param>
            <param name="res">Result.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryUtils.ReadInvocationResult(Apache.Ignite.Core.Impl.Binary.BinaryReader,System.Object@)">
            <summary>
            Reads invocation result.
            </summary>
            <param name="reader">Reader.</param>
            <param name="err">Error.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryUtils.ValidateProtocolVersion(System.Byte)">
            <summary>
            Validate protocol version.
            </summary>
            <param name="version">The version.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryUtils.ToJavaDate(System.DateTime,System.Int64@,System.Int32@)">
            <summary>Convert date to Java ticks.</summary>
            <param name="date">Date</param>
            <param name="high">High part (milliseconds).</param>
            <param name="low">Low part (nanoseconds)</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryUtils.ReadConfiguration(Apache.Ignite.Core.Impl.Binary.BinaryReader,System.Collections.Generic.ICollection{System.String}@,Apache.Ignite.Core.Binary.BinaryConfiguration@)">
            <summary>
            Read additional configuration from the stream.
            </summary>
            <param name="reader">Reader.</param>
            <param name="assemblies">Assemblies.</param>
            <param name="cfg">Configuration.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryUtils.GetUnsupportedTypeException(System.Type,System.Object)">
            <summary>
            Gets the unsupported type exception.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryUtils.IntToFloatBits(System.Int32)">
            <summary>
            Reinterprets int bits as a float.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryUtils.LongToDoubleBits(System.Int64)">
            <summary>
            Reinterprets long bits as a double.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryUtils.IsIgniteEnum(System.Type)">
            <summary>
            Determines whether specified type is Ignite-compatible enum (value fits into 4 bytes).
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryUtils.LongToTimeSpan(System.Int64)">
            <summary>
            Converts long to timespan.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryUtils.CreateInstance``1(Apache.Ignite.Core.Impl.Binary.BinaryReader)">
            <summary>
            Creates and instance from the type name in reader.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryUtils.ReverseByteOrder(System.UInt64)">
            <summary>
            Reverses the byte order of an unsigned long.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.BinaryUtils.Marshaller">
            <summary>
            Default marshaller.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Binary.BinaryUtils.GuidAccessor">
            <summary>
            Struct with .Net-style Guid memory layout.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryUtils.GuidAccessor.#ctor(Apache.Ignite.Core.Impl.Binary.BinaryUtils.JavaGuid)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Impl.Binary.BinaryUtils.GuidAccessor"/> struct.
            </summary>
            <param name="val">The value.</param>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Binary.BinaryUtils.JavaGuid">
            <summary>
            Struct with Java-style Guid memory layout.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryUtils.JavaGuid.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Impl.Binary.BinaryUtils.JavaGuid"/> struct.
            </summary>
            <param name="val">The value.</param>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Binary.BinaryWriter">
            <summary>
            Binary writer implementation.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Binary.IBinaryWriter">
            <summary>
            Writer for binary objects. 
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryWriter.WriteByte(System.String,System.Byte)">
            <summary>
            Write named byte value.
            </summary>
            <param name="fieldName">Field name.</param>
            <param name="val">Byte value.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryWriter.WriteByteArray(System.String,System.Byte[])">
            <summary>
            Write named byte array.
            </summary>
            <param name="fieldName">Field name.</param>
            <param name="val">Byte array.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryWriter.WriteChar(System.String,System.Char)">
            <summary>
            Write named char value.
            </summary>
            <param name="fieldName">Field name.</param>
            <param name="val">Char value.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryWriter.WriteCharArray(System.String,System.Char[])">
            <summary>
            Write named char array.
            </summary>
            <param name="fieldName">Field name.</param>
            <param name="val">Char array.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryWriter.WriteShort(System.String,System.Int16)">
            <summary>
            Write named short value.
            </summary>
            <param name="fieldName">Field name.</param>
            <param name="val">Short value.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryWriter.WriteShortArray(System.String,System.Int16[])">
            <summary>
            Write named short array.
            </summary>
            <param name="fieldName">Field name.</param>
            <param name="val">Short array.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryWriter.WriteInt(System.String,System.Int32)">
            <summary>
            Write named int value.
            </summary>
            <param name="fieldName">Field name.</param>
            <param name="val">Int value.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryWriter.WriteIntArray(System.String,System.Int32[])">
            <summary>
            Write named int array.
            </summary>
            <param name="fieldName">Field name.</param>
            <param name="val">Int array.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryWriter.WriteLong(System.String,System.Int64)">
            <summary>
            Write named long value.
            </summary>
            <param name="fieldName">Field name.</param>
            <param name="val">Long value.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryWriter.WriteLongArray(System.String,System.Int64[])">
            <summary>
            Write named long array.
            </summary>
            <param name="fieldName">Field name.</param>
            <param name="val">Long array.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryWriter.WriteBoolean(System.String,System.Boolean)">
            <summary>
            Write named boolean value.
            </summary>
            <param name="fieldName">Field name.</param>
            <param name="val">Boolean value.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryWriter.WriteBooleanArray(System.String,System.Boolean[])">
            <summary>
            Write named boolean array.
            </summary>
            <param name="fieldName">Field name.</param>
            <param name="val">Boolean array.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryWriter.WriteFloat(System.String,System.Single)">
            <summary>
            Write named float value.
            </summary>
            <param name="fieldName">Field name.</param>
            <param name="val">Float value.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryWriter.WriteFloatArray(System.String,System.Single[])">
            <summary>
            Write named float array.
            </summary>
            <param name="fieldName">Field name.</param>
            <param name="val">Float array.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryWriter.WriteDouble(System.String,System.Double)">
            <summary>
            Write named double value.
            </summary>
            <param name="fieldName">Field name.</param>
            <param name="val">Double value.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryWriter.WriteDoubleArray(System.String,System.Double[])">
            <summary>
            Write named double array.
            </summary>
            <param name="fieldName">Field name.</param>
            <param name="val">Double array.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryWriter.WriteDecimal(System.String,System.Nullable{System.Decimal})">
            <summary>
            Write named decimal value.
            </summary>
            <param name="fieldName">Field name.</param>
            <param name="val">Decimal value.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryWriter.WriteDecimalArray(System.String,System.Nullable{System.Decimal}[])">
            <summary>
            Write named decimal array.
            </summary>
            <param name="fieldName">Field name.</param>
            <param name="val">Decimal array.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryWriter.WriteTimestamp(System.String,System.Nullable{System.DateTime})">
            <summary>
            Write named date value.
            </summary>
            <param name="fieldName">Field name.</param>
            <param name="val">Date value.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryWriter.WriteTimestampArray(System.String,System.Nullable{System.DateTime}[])">
            <summary>
            Write named date array.
            </summary>
            <param name="fieldName">Field name.</param>
            <param name="val">Date array.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryWriter.WriteString(System.String,System.String)">
            <summary>
            Write named string value.
            </summary>
            <param name="fieldName">Field name.</param>
            <param name="val">String value.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryWriter.WriteStringArray(System.String,System.String[])">
            <summary>
            Write named string array.
            </summary>
            <param name="fieldName">Field name.</param>
            <param name="val">String array.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryWriter.WriteGuid(System.String,System.Nullable{System.Guid})">
            <summary>
            Write named GUID value.
            </summary>
            <param name="fieldName">Field name.</param>
            <param name="val">GUID value.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryWriter.WriteGuidArray(System.String,System.Nullable{System.Guid}[])">
            <summary>
            Write named GUID array.
            </summary>
            <param name="fieldName">Field name.</param>
            <param name="val">GUID array.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryWriter.WriteEnum``1(System.String,``0)">
            <summary>
            Write named enum value.
            </summary>
            <param name="fieldName">Field name.</param>
            <param name="val">Enum value.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryWriter.WriteEnumArray``1(System.String,``0[])">
            <summary>
            Write named enum array.
            </summary>
            <param name="fieldName">Field name.</param>
            <param name="val">Enum array.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryWriter.WriteObject``1(System.String,``0)">
            <summary>
            Write named object value.
            </summary>
            <param name="fieldName">Field name.</param>
            <param name="val">Object value.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryWriter.WriteArray``1(System.String,``0[])">
            <summary>
            Write named object array.
            </summary>
            <param name="fieldName">Field name.</param>
            <param name="val">Object array.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryWriter.WriteCollection(System.String,System.Collections.ICollection)">
            <summary>
            Writes a named collection in interoperable form.
            
            Use this method to communicate with other platforms 
            or with nodes that need to read collection elements in binary form.
            
            When there is no need for binarization or interoperability, please use <see cref="M:Apache.Ignite.Core.Binary.IBinaryWriter.WriteObject``1(System.String,``0)"/>,
            which will properly preserve generic collection type.
            </summary>
            <param name="fieldName">Field name.</param>
            <param name="val">Collection.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryWriter.WriteDictionary(System.String,System.Collections.IDictionary)">
            <summary>
            Writes a named dictionary in interoperable form.
            
            Use this method to communicate with other platforms 
            or with nodes that need to read dictionary elements in binary form.
            
            When there is no need for binarization or interoperability, please use <see cref="M:Apache.Ignite.Core.Binary.IBinaryWriter.WriteObject``1(System.String,``0)"/>,
            which will properly preserve generic dictionary type.
            </summary>
            <param name="fieldName">Field name.</param>
            <param name="val">Dictionary.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryWriter.GetRawWriter">
            <summary>
            Get raw writer. 
            </summary>
            <returns>Raw writer.</returns>
        </member>
        <member name="T:Apache.Ignite.Core.Binary.IBinaryRawWriter">
            <summary>
            Raw writer for binary objects. 
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryRawWriter.WriteByte(System.Byte)">
            <summary>
            Write byte value.
            </summary>
            <param name="val">Byte value.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryRawWriter.WriteByteArray(System.Byte[])">
            <summary>
            Write byte array.
            </summary>
            <param name="val">Byte array.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryRawWriter.WriteChar(System.Char)">
            <summary>
            Write char value.
            </summary>
            <param name="val">Char value.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryRawWriter.WriteCharArray(System.Char[])">
            <summary>
            Write char array.
            </summary>
            <param name="val">Char array.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryRawWriter.WriteShort(System.Int16)">
            <summary>
            Write short value.
            </summary>
            <param name="val">Short value.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryRawWriter.WriteShortArray(System.Int16[])">
            <summary>
            Write short array.
            </summary>
            <param name="val">Short array.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryRawWriter.WriteInt(System.Int32)">
            <summary>
            Write int value.
            </summary>
            <param name="val">Int value.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryRawWriter.WriteIntArray(System.Int32[])">
            <summary>
            Write int array.
            </summary>
            <param name="val">Int array.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryRawWriter.WriteLong(System.Int64)">
            <summary>
            Write long value.
            </summary>
            <param name="val">Long value.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryRawWriter.WriteLongArray(System.Int64[])">
            <summary>
            Write long array.
            </summary>
            <param name="val">Long array.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryRawWriter.WriteBoolean(System.Boolean)">
            <summary>
            Write boolean value.
            </summary>
            <param name="val">Boolean value.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryRawWriter.WriteBooleanArray(System.Boolean[])">
            <summary>
            Write boolean array.
            </summary>
            <param name="val">Boolean array.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryRawWriter.WriteFloat(System.Single)">
            <summary>
            Write float value.
            </summary>
            <param name="val">Float value.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryRawWriter.WriteFloatArray(System.Single[])">
            <summary>
            Write float array.
            </summary>
            <param name="val">Float array.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryRawWriter.WriteDouble(System.Double)">
            <summary>
            Write double value.
            </summary>
            <param name="val">Double value.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryRawWriter.WriteDoubleArray(System.Double[])">
            <summary>
            Write double array.
            </summary>
            <param name="val">Double array.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryRawWriter.WriteDecimal(System.Nullable{System.Decimal})">
            <summary>
            Write decimal value.
            </summary>
            <param name="val">Decimal value.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryRawWriter.WriteDecimalArray(System.Nullable{System.Decimal}[])">
            <summary>
            Write decimal array.
            </summary>
            <param name="val">Decimal array.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryRawWriter.WriteTimestamp(System.Nullable{System.DateTime})">
            <summary>
            Write date value.
            </summary>
            <param name="val">Date value.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryRawWriter.WriteTimestampArray(System.Nullable{System.DateTime}[])">
            <summary>
            Write date array.
            </summary>
            <param name="val">Date array.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryRawWriter.WriteString(System.String)">
            <summary>
            Write string value.
            </summary>
            <param name="val">String value.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryRawWriter.WriteStringArray(System.String[])">
            <summary>
            Write string array.
            </summary>
            <param name="val">String array.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryRawWriter.WriteGuid(System.Nullable{System.Guid})">
            <summary>
            Write GUID value.
            </summary>
            <param name="val">GUID value.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryRawWriter.WriteGuidArray(System.Nullable{System.Guid}[])">
            <summary>
            Write GUID array.
            </summary>
            <param name="val">GUID array.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryRawWriter.WriteEnum``1(``0)">
            <summary>
            Write enum value.
            </summary>
            <param name="val">Enum value.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryRawWriter.WriteEnumArray``1(``0[])">
            <summary>
            Write enum array.
            </summary>
            <param name="val">Enum array.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryRawWriter.WriteObject``1(``0)">
            <summary>
            Write object value.
            </summary>
            <param name="val">Object value.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryRawWriter.WriteArray``1(``0[])">
            <summary>
            Write object array.
            </summary>
            <param name="val">Object array.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryRawWriter.WriteCollection(System.Collections.ICollection)">
            <summary>
            Writes a collection in interoperable form.
            
            Use this method to communicate with other platforms 
            or with nodes that need to read collection elements in binary form.
            
            When there is no need for binarization or interoperability, please use <see cref="M:Apache.Ignite.Core.Binary.IBinaryRawWriter.WriteObject``1(``0)"/>,
            which will properly preserve generic collection type.
            </summary>
            <param name="val">Collection.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryRawWriter.WriteDictionary(System.Collections.IDictionary)">
            <summary>
            Writes a dictionary in interoperable form.
            
            Use this method to communicate with other platforms 
            or with nodes that need to read dictionary elements in binary form.
            
            When there is no need for binarization or interoperability, please use <see cref="M:Apache.Ignite.Core.Binary.IBinaryRawWriter.WriteObject``1(``0)"/>,
            which will properly preserve generic dictionary type.
            </summary>
            <param name="val">Dictionary.</param>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryWriter._marsh">
            Marshaller. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryWriter._stream">
            Stream. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryWriter._builder">
            Builder (used only during build). 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryWriter._hnds">
            Handles. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryWriter._metas">
            Metadatas collected during this write session. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryWriter._frame">
            Current stack frame. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryWriter._detaching">
            Whether we are currently detaching an object. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryWriter._isInWrapper">
            Whether we are directly within peer loading object holder. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryWriter._schema">
            Schema holder. 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryWriter.WriteBoolean(System.String,System.Boolean)">
            <summary>
            Write named boolean value.
            </summary>
            <param name="fieldName">Field name.</param>
            <param name="val">Boolean value.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryWriter.WriteBooleanField(System.Boolean)">
            <summary>
            Writes the boolean field.
            </summary>
            <param name="val">if set to <c>true</c> [value].</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryWriter.WriteBoolean(System.Boolean)">
            <summary>
            Write boolean value.
            </summary>
            <param name="val">Boolean value.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryWriter.WriteBooleanArray(System.String,System.Boolean[])">
            <summary>
            Write named boolean array.
            </summary>
            <param name="fieldName">Field name.</param>
            <param name="val">Boolean array.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryWriter.WriteBooleanArray(System.Boolean[])">
            <summary>
            Write boolean array.
            </summary>
            <param name="val">Boolean array.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryWriter.WriteByte(System.String,System.Byte)">
            <summary>
            Write named byte value.
            </summary>
            <param name="fieldName">Field name.</param>
            <param name="val">Byte value.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryWriter.WriteByteField(System.Byte)">
            <summary>
            Write byte field value.
            </summary>
            <param name="val">Byte value.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryWriter.WriteByte(System.Byte)">
            <summary>
            Write byte value.
            </summary>
            <param name="val">Byte value.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryWriter.WriteByteArray(System.String,System.Byte[])">
            <summary>
            Write named byte array.
            </summary>
            <param name="fieldName">Field name.</param>
            <param name="val">Byte array.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryWriter.WriteByteArray(System.Byte[])">
            <summary>
            Write byte array.
            </summary>
            <param name="val">Byte array.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryWriter.WriteShort(System.String,System.Int16)">
            <summary>
            Write named short value.
            </summary>
            <param name="fieldName">Field name.</param>
            <param name="val">Short value.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryWriter.WriteShortField(System.Int16)">
            <summary>
            Write short field value.
            </summary>
            <param name="val">Short value.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryWriter.WriteShort(System.Int16)">
            <summary>
            Write short value.
            </summary>
            <param name="val">Short value.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryWriter.WriteShortArray(System.String,System.Int16[])">
            <summary>
            Write named short array.
            </summary>
            <param name="fieldName">Field name.</param>
            <param name="val">Short array.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryWriter.WriteShortArray(System.Int16[])">
            <summary>
            Write short array.
            </summary>
            <param name="val">Short array.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryWriter.WriteChar(System.String,System.Char)">
            <summary>
            Write named char value.
            </summary>
            <param name="fieldName">Field name.</param>
            <param name="val">Char value.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryWriter.WriteCharField(System.Char)">
            <summary>
            Write char field value.
            </summary>
            <param name="val">Char value.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryWriter.WriteChar(System.Char)">
            <summary>
            Write char value.
            </summary>
            <param name="val">Char value.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryWriter.WriteCharArray(System.String,System.Char[])">
            <summary>
            Write named char array.
            </summary>
            <param name="fieldName">Field name.</param>
            <param name="val">Char array.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryWriter.WriteCharArray(System.Char[])">
            <summary>
            Write char array.
            </summary>
            <param name="val">Char array.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryWriter.WriteInt(System.String,System.Int32)">
            <summary>
            Write named int value.
            </summary>
            <param name="fieldName">Field name.</param>
            <param name="val">Int value.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryWriter.WriteIntField(System.Int32)">
            <summary>
            Writes the int field.
            </summary>
            <param name="val">The value.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryWriter.WriteInt(System.Int32)">
            <summary>
            Write int value.
            </summary>
            <param name="val">Int value.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryWriter.WriteIntArray(System.String,System.Int32[])">
            <summary>
            Write named int array.
            </summary>
            <param name="fieldName">Field name.</param>
            <param name="val">Int array.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryWriter.WriteIntArray(System.Int32[])">
            <summary>
            Write int array.
            </summary>
            <param name="val">Int array.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryWriter.WriteLong(System.String,System.Int64)">
            <summary>
            Write named long value.
            </summary>
            <param name="fieldName">Field name.</param>
            <param name="val">Long value.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryWriter.WriteLongField(System.Int64)">
            <summary>
            Writes the long field.
            </summary>
            <param name="val">The value.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryWriter.WriteLong(System.Int64)">
            <summary>
            Write long value.
            </summary>
            <param name="val">Long value.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryWriter.WriteLongArray(System.String,System.Int64[])">
            <summary>
            Write named long array.
            </summary>
            <param name="fieldName">Field name.</param>
            <param name="val">Long array.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryWriter.WriteLongArray(System.Int64[])">
            <summary>
            Write long array.
            </summary>
            <param name="val">Long array.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryWriter.WriteFloat(System.String,System.Single)">
            <summary>
            Write named float value.
            </summary>
            <param name="fieldName">Field name.</param>
            <param name="val">Float value.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryWriter.WriteFloatField(System.Single)">
            <summary>
            Writes the float field.
            </summary>
            <param name="val">The value.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryWriter.WriteFloat(System.Single)">
            <summary>
            Write float value.
            </summary>
            <param name="val">Float value.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryWriter.WriteFloatArray(System.String,System.Single[])">
            <summary>
            Write named float array.
            </summary>
            <param name="fieldName">Field name.</param>
            <param name="val">Float array.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryWriter.WriteFloatArray(System.Single[])">
            <summary>
            Write float array.
            </summary>
            <param name="val">Float array.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryWriter.WriteDouble(System.String,System.Double)">
            <summary>
            Write named double value.
            </summary>
            <param name="fieldName">Field name.</param>
            <param name="val">Double value.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryWriter.WriteDoubleField(System.Double)">
            <summary>
            Writes the double field.
            </summary>
            <param name="val">The value.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryWriter.WriteDouble(System.Double)">
            <summary>
            Write double value.
            </summary>
            <param name="val">Double value.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryWriter.WriteDoubleArray(System.String,System.Double[])">
            <summary>
            Write named double array.
            </summary>
            <param name="fieldName">Field name.</param>
            <param name="val">Double array.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryWriter.WriteDoubleArray(System.Double[])">
            <summary>
            Write double array.
            </summary>
            <param name="val">Double array.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryWriter.WriteDecimal(System.String,System.Nullable{System.Decimal})">
            <summary>
            Write named decimal value.
            </summary>
            <param name="fieldName">Field name.</param>
            <param name="val">Decimal value.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryWriter.WriteDecimal(System.Nullable{System.Decimal})">
            <summary>
            Write decimal value.
            </summary>
            <param name="val">Decimal value.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryWriter.WriteDecimalArray(System.String,System.Nullable{System.Decimal}[])">
            <summary>
            Write named decimal array.
            </summary>
            <param name="fieldName">Field name.</param>
            <param name="val">Decimal array.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryWriter.WriteDecimalArray(System.Nullable{System.Decimal}[])">
            <summary>
            Write decimal array.
            </summary>
            <param name="val">Decimal array.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryWriter.WriteTimestamp(System.String,System.Nullable{System.DateTime})">
            <summary>
            Write named date value.
            </summary>
            <param name="fieldName">Field name.</param>
            <param name="val">Date value.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryWriter.WriteTimestamp(System.Nullable{System.DateTime})">
            <summary>
            Write date value.
            </summary>
            <param name="val">Date value.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryWriter.WriteTimestampArray(System.String,System.Nullable{System.DateTime}[])">
            <summary>
            Write named date array.
            </summary>
            <param name="fieldName">Field name.</param>
            <param name="val">Date array.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryWriter.WriteTimestampArray(System.Nullable{System.DateTime}[])">
            <summary>
            Write date array.
            </summary>
            <param name="val">Date array.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryWriter.WriteString(System.String,System.String)">
            <summary>
            Write named string value.
            </summary>
            <param name="fieldName">Field name.</param>
            <param name="val">String value.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryWriter.WriteString(System.String)">
            <summary>
            Write string value.
            </summary>
            <param name="val">String value.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryWriter.WriteStringArray(System.String,System.String[])">
            <summary>
            Write named string array.
            </summary>
            <param name="fieldName">Field name.</param>
            <param name="val">String array.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryWriter.WriteStringArray(System.String[])">
            <summary>
            Write string array.
            </summary>
            <param name="val">String array.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryWriter.WriteGuid(System.String,System.Nullable{System.Guid})">
            <summary>
            Write named GUID value.
            </summary>
            <param name="fieldName">Field name.</param>
            <param name="val">GUID value.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryWriter.WriteGuid(System.Nullable{System.Guid})">
            <summary>
            Write GUID value.
            </summary>
            <param name="val">GUID value.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryWriter.WriteGuidArray(System.String,System.Nullable{System.Guid}[])">
            <summary>
            Write named GUID array.
            </summary>
            <param name="fieldName">Field name.</param>
            <param name="val">GUID array.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryWriter.WriteGuidArray(System.Nullable{System.Guid}[])">
            <summary>
            Write GUID array.
            </summary>
            <param name="val">GUID array.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryWriter.WriteEnum``1(System.String,``0)">
            <summary>
            Write named enum value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fieldName">Field name.</param>
            <param name="val">Enum value.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryWriter.WriteEnum``1(``0)">
            <summary>
            Write enum value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="val">Enum value.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryWriter.WriteEnum(System.Int32,System.Type)">
            <summary>
            Write enum value.
            </summary>
            <param name="val">Enum value.</param>
            <param name="type">Enum type.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryWriter.WriteEnumArray``1(System.String,``0[])">
            <summary>
            Write named enum array.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fieldName">Field name.</param>
            <param name="val">Enum array.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryWriter.WriteEnumArray``1(``0[])">
            <summary>
            Write enum array.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="val">Enum array.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryWriter.WriteEnumArrayInternal(System.Array,System.Nullable{System.Int32})">
            <summary>
            Writes the enum array.
            </summary>
            <param name="val">The value.</param>
            <param name="elementTypeId">The element type id.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryWriter.WriteObject``1(System.String,``0)">
            <summary>
            Write named object value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fieldName">Field name.</param>
            <param name="val">Object value.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryWriter.WriteObject``1(``0)">
            <summary>
            Write object value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="val">Object value.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryWriter.WriteArray``1(System.String,``0[])">
            <summary>
            Write named object array.
            </summary>
            <typeparam name="T">Element type.</typeparam>
            <param name="fieldName">Field name.</param>
            <param name="val">Object array.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryWriter.WriteArray``1(``0[])">
            <summary>
            Write object array.
            </summary>
            <typeparam name="T">Element type.</typeparam>
            <param name="val">Object array.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryWriter.WriteArrayInternal(System.Array)">
            <summary>
            Write object array.
            </summary>
            <param name="val">Object array.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryWriter.WriteCollection(System.String,System.Collections.ICollection)">
            <summary>
            Write named collection.
            </summary>
            <param name="fieldName">Field name.</param>
            <param name="val">Collection.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryWriter.WriteCollection(System.Collections.ICollection)">
            <summary>
            Write collection.
            </summary>
            <param name="val">Collection.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryWriter.WriteDictionary(System.String,System.Collections.IDictionary)">
            <summary>
            Write named dictionary.
            </summary>
            <param name="fieldName">Field name.</param>
            <param name="val">Dictionary.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryWriter.WriteDictionary(System.Collections.IDictionary)">
            <summary>
            Write dictionary.
            </summary>
            <param name="val">Dictionary.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryWriter.WriteNullField">
            <summary>
            Write NULL field.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryWriter.WriteNullRawField">
            <summary>
            Write NULL raw field.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryWriter.GetRawWriter">
            <summary>
            Get raw writer.
            </summary>
            <returns>
            Raw writer.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryWriter.SetBuilder(Apache.Ignite.Core.Impl.Binary.BinaryObjectBuilder)">
            <summary>
            Set new builder.
            </summary>
            <param name="builder">Builder.</param>
            <returns>Previous builder.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryWriter.#ctor(Apache.Ignite.Core.Impl.Binary.Marshaller,Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream)">
            <summary>
            Constructor.
            </summary>
            <param name="marsh">Marshaller.</param>
            <param name="stream">Stream.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryWriter.Write``1(``0)">
            <summary>
            Write object.
            </summary>
            <param name="obj">Object.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryWriter.SetCustomTypeDataFlag(System.Boolean)">
            <summary>
            Marks current object with a custom type data flag.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryWriter.WritePrimitive``1(``0,System.Type)">
            <summary>
            Write primitive type.
            </summary>
            <param name="val">Object.</param>
            <param name="type">Type.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryWriter.WriteBuilderSpecials``1(``0)">
            <summary>
            Try writing object as special builder type.
            </summary>
            <param name="obj">Object.</param>
            <returns>True if object was written, false otherwise.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryWriter.WriteHandle(System.Int64,System.Object)">
            <summary>
            Add handle to handles map.
            </summary>
            <param name="pos">Position in stream.</param>
            <param name="obj">Object.</param>
            <returns><c>true</c> if object was written as handle.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryWriter.WriteObjectDetached``1(``0)">
            <summary>
            Perform action with detached semantics.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryWriter.GetBinaryTypes">
            <summary>
            Gets collected metadatas.
            </summary>
            <returns>Collected metadatas (if any).</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryWriter.WriteFieldId(System.String,System.Byte)">
            <summary>
            Write field ID.
            </summary>
            <param name="fieldName">Field name.</param>
            <param name="fieldTypeId">Field type ID.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.BinaryWriter.SaveMetadata(Apache.Ignite.Core.Impl.Binary.IBinaryTypeDescriptor,System.Collections.Generic.IDictionary{System.String,Apache.Ignite.Core.Impl.Binary.Metadata.BinaryField})">
            <summary>
            Saves metadata for this session.
            </summary>
            <param name="desc">The descriptor.</param>
            <param name="fields">Fields metadata.</param>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.BinaryWriter.Marshaller">
            <summary>
            Gets the marshaller.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.BinaryWriter.WrapperFunc">
            <summary>
            Gets or sets a function to wrap all serializer objects.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.BinaryWriter.Stream">
            <summary>
            Stream.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Binary.BinaryWriter.Frame">
            <summary>
            Stores current writer stack frame.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryWriter.Frame.Pos">
            Current object start position. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryWriter.Frame.RawPos">
            Current raw position. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryWriter.Frame.Struct">
            Current type structure tracker. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.BinaryWriter.Frame.HasCustomTypeData">
            Custom type data. 
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Binary.Structure.BinaryStructure">
            <summary>
            Binary type structure. Cache field IDs and metadata to improve marshalling performance.
            Every object write contains a set of field writes. Every unique ordered set of written fields
            produce write "path". We cache these paths allowing for very fast traverse over object structure
            without expensive map lookups and field ID calculations. 
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.Structure.BinaryStructure.CreateEmpty">
            <summary>
            Create empty type structure.
            </summary>
            <returns>Empty type structure.</returns>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.Structure.BinaryStructure._paths">
            Entries. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.Structure.BinaryStructure._jumps">
            Jumps. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.Structure.BinaryStructure._fieldTypes">
            Field types. 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.Structure.BinaryStructure.#ctor(Apache.Ignite.Core.Impl.Binary.Structure.BinaryStructureEntry[][],Apache.Ignite.Core.Impl.Binary.Structure.BinaryStructureJumpTable[],System.Collections.Generic.IDictionary{System.String,System.Byte})">
            <summary>
            Constructor.
            </summary>
            <param name="paths">Paths.</param>
            <param name="jumps">Jumps.</param>
            <param name="fieldTypes">Field types.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.Structure.BinaryStructure.GetFieldId(System.String,System.Byte,System.Int32@,System.Int32)">
            <summary>
            Gets field ID if possible.
            </summary>
            <param name="fieldName">Field name.</param>
            <param name="fieldType">Field type.</param>
            <param name="pathIdx">Path index, changes during jumps.</param>
            <param name="actionIdx">Action index.</param>
            <returns>Field ID or zero in case there are no matching path.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.Structure.BinaryStructure.Merge(Apache.Ignite.Core.Impl.Binary.Structure.BinaryStructure,System.Int32,System.Collections.Generic.IList{Apache.Ignite.Core.Impl.Binary.Structure.BinaryStructureUpdate})">
            <summary>
            Merge updates into a new type structure.
            </summary>
            <param name="exp">Expected type structure to apply updates to </param>
            <param name="pathIdx">Path index.</param>
            <param name="updates">Updates.</param>
            <returns>New type structure with updates.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.Structure.BinaryStructure.CopyPaths(System.Int32,System.Int32)">
            <summary>
            Copy and possibly expand paths.
            </summary>
            <param name="minLen">Minimum length.</param>
            <param name="additionalPaths">Amount of additional paths required.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.Structure.BinaryStructure.CopyJumps(System.Int32)">
            <summary>
            Copy and possibly expand jump tables.
            </summary>
            <param name="additionalJumps">Amount of additional jumps required.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.Structure.BinaryStructure.ApplyUpdatesToPath(System.Collections.Generic.IList{Apache.Ignite.Core.Impl.Binary.Structure.BinaryStructureEntry},System.Collections.Generic.IEnumerable{Apache.Ignite.Core.Impl.Binary.Structure.BinaryStructureUpdate})">
            <summary>
            Apply updates to path.
            </summary>
            <param name="path">Path.</param>
            <param name="updates">Updates.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.Structure.BinaryStructure.MergeFieldTypes(System.Collections.Generic.IList{Apache.Ignite.Core.Impl.Binary.Structure.BinaryStructureUpdate})">
            <summary>
            Merge field types.
            </summary>
            <param name="updates">Updates.</param>
            <returns>Type structure with applied updates.</returns>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.Structure.BinaryStructure.FieldTypes">
            <summary>
            Recorded field types.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Binary.Structure.BinaryStructureEntry">
            <summary>
            Binary type structure entry. Might be either a normal field, a reference to jump table, or an empty entry.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.Structure.BinaryStructureEntry._name">
            Field name. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.Structure.BinaryStructureEntry._id">
            Field ID. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.Structure.BinaryStructureEntry._type">
            Field type. 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.Structure.BinaryStructureEntry.#ctor(System.Int32)">
            <summary>
            Constructor for jump table entry.
            </summary>
            <param name="jumpTblIdx">Jump table index.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.Structure.BinaryStructureEntry.#ctor(System.String,System.Int32,System.Byte)">
            <summary>
            Constructor for field entry.
            </summary>
            <param name="name">Field name.</param>
            <param name="id">Field ID.</param>
            <param name="type">Field type.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.Structure.BinaryStructureEntry.IsExpected(System.String,System.Byte)">
            <summary>
            Check whether current field entry matches passed arguments.
            </summary>
            <param name="name">Field name.</param>
            <param name="type">Field type.</param>
            <returns>True if expected.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.Structure.BinaryStructureEntry.ValidateType(System.Byte)">
            <summary>
            Validate field type.
            </summary>
            <param name="type">Expected type.</param>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.Structure.BinaryStructureEntry.IsEmpty">
            <summary>
            Whether this is an empty entry.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.Structure.BinaryStructureEntry.IsJumpTable">
            <summary>
            Whether this is a jump table.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.Structure.BinaryStructureEntry.Name">
            <summary>
            Field name.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.Structure.BinaryStructureEntry.Id">
            <summary>
            Field ID.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Binary.Structure.BinaryStructureJumpTable">
            <summary>
            Jump table.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.Structure.BinaryStructureJumpTable._names">
            Names. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.Structure.BinaryStructureJumpTable._pathIdxs">
            Path indexes. 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.Structure.BinaryStructureJumpTable.#ctor(System.String,System.Int32,System.String,System.Int32)">
            <summary>
            Create minimal jump table with two entries.
            </summary>
            <param name="firstName">First name.</param>
            <param name="firstPathIdx">First path index.</param>
            <param name="secondName">Second name.</param>
            <param name="secondPathIdx">Second path index.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.Structure.BinaryStructureJumpTable.#ctor(System.String[],System.Int32[])">
            <summary>
            Constructor.
            </summary>
            <param name="names">Field names.</param>
            <param name="pathIdxs">Path indexes.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.Structure.BinaryStructureJumpTable.GetPathIndex(System.String)">
            <summary>
            Get path index for the given field.
            </summary>
            <param name="fieldName">Field name.</param>
            <returns>Path index.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.Structure.BinaryStructureJumpTable.Copy">
            <summary>
            Copy jump table.
            </summary>
            <returns>New jump table.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.Structure.BinaryStructureJumpTable.CopyAndAdd(System.String,System.Int32)">
            <summary>
            Copy jump table with additional jump.
            </summary>
            <param name="name">Field name.</param>
            <param name="pathIdx">Path index.</param>
            <returns>New jump table.</returns>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Binary.Structure.BinaryStructureUpdate">
            <summary>
            Binary type structure update descriptor.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.Structure.BinaryStructureUpdate._fieldName">
            Field name. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.Structure.BinaryStructureUpdate._fieldId">
            Field ID. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.Structure.BinaryStructureUpdate._fieldType">
            Field type. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.Structure.BinaryStructureUpdate._idx">
            Field index. 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.Structure.BinaryStructureUpdate.#ctor(System.String,System.Int32,System.Byte,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="fieldName">Field name.</param>
            <param name="fieldId">Field ID.</param>
            <param name="fieldType">Field type.</param>
            <param name="idx">Index.</param>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.Structure.BinaryStructureUpdate.FieldName">
            <summary>
            Field name.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.Structure.BinaryStructureUpdate.FieldId">
            <summary>
            Field ID.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.Structure.BinaryStructureUpdate.FieldType">
            <summary>
            Field type.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Binary.Structure.BinaryStructureUpdate.Index">
            <summary>
            Index.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Binary.TypeResolver">
            <summary>
            Resolves types by name.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Binary.TypeResolver._reflectionOnlyAssemblies">
            Assemblies loaded in ReflectionOnly mode. 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.TypeResolver.ResolveType(System.String,System.String,Apache.Ignite.Core.Binary.IBinaryNameMapper)">
            <summary>
            Resolve type by name.
            </summary>
            <param name="typeName">Name of the type.</param>
            <param name="assemblyName">Optional, name of the assembly.</param>
            <param name="nameMapper">The name mapper.</param>
            <returns>
            Resolved type.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.TypeResolver.ResolveType(System.String,Apache.Ignite.Core.Impl.Binary.TypeNameParser,System.Collections.Generic.ICollection{System.Reflection.Assembly},Apache.Ignite.Core.Binary.IBinaryNameMapper)">
            <summary>
            Resolve type by name in specified assembly set.
            </summary>
            <param name="assemblyName">Name of the assembly.</param>
            <param name="typeName">Name of the type.</param>
            <param name="assemblies">Assemblies to look in.</param>
            <param name="nameMapper">The name mapper.</param>
            <returns>
            Resolved type. 
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.TypeResolver.MakeArrayType(System.Type,System.String)">
            <summary>
            Makes the array type according to spec, e.g. "[,][]".
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.TypeResolver.ResolveNonGenericType(System.String,System.String,System.Collections.Generic.ICollection{System.Reflection.Assembly},Apache.Ignite.Core.Binary.IBinaryNameMapper)">
            <summary>
            Resolves non-generic type by searching provided assemblies.
            </summary>
            <param name="assemblyName">Name of the assembly.</param>
            <param name="typeName">Name of the type.</param>
            <param name="assemblies">The assemblies.</param>
            <param name="nameMapper">The name mapper.</param>
            <returns>Resolved type, or null.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.TypeResolver.ResolveTypeInReferencedAssemblies(System.String,Apache.Ignite.Core.Impl.Binary.TypeNameParser,Apache.Ignite.Core.Binary.IBinaryNameMapper)">
            <summary>
            Resolve type by name in non-loaded referenced assemblies.
            </summary>
            <param name="assemblyName">Name of the assembly.</param>
            <param name="typeName">Name of the type.</param>
            <param name="nameMapper">The name mapper.</param>
            <returns>
            Resolved type.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.TypeResolver.GetReflectionOnlyAssembly(System.String)">
            <summary>
            Gets the reflection only assembly.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.TypeResolver.GetNotLoadedReferencedAssemblies">
            <summary>
            Recursively gets all referenced assemblies for current app domain, excluding those that are loaded.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.TypeResolver.FindType(System.Reflection.Assembly,System.String,Apache.Ignite.Core.Binary.IBinaryNameMapper)">
            <summary>
            Finds the type within assembly.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Binary.TypeResolver.GetAssemblyTypesSafe(System.Reflection.Assembly)">
            <summary>
            Safely gets all assembly types.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Plugin.IPluginProviderProxy">
            <summary>
            Non-generic proxy interface.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Plugin.IPluginProviderProxy.GetPlugin``1">
            <summary>
            Gets the plugin instance.
            </summary>
            <typeparam name="T">Plugin instance type.</typeparam>
            <returns>Plugin instance.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Plugin.IPluginProviderProxy.Start(Apache.Ignite.Core.Impl.Plugin.PluginProcessor)">
            <summary>
            Starts the plugin provider.
            <para/>
            <see cref="P:Apache.Ignite.Core.Plugin.IPluginContext`1.Ignite"/> can be null until <see cref="M:Apache.Ignite.Core.Impl.Plugin.IPluginProviderProxy.OnIgniteStart"/> is called.
            </summary>
            <param name="processor">Plugin processor.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Plugin.IPluginProviderProxy.Stop(System.Boolean)">
            <summary>
            Stops the plugin provider.
            </summary>
            <param name="cancel">if set to <c>true</c>, all ongoing operations should be canceled.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Plugin.IPluginProviderProxy.OnIgniteStart">
            <summary>
            Called when Ignite has been started and is fully functional.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Plugin.IPluginProviderProxy.OnIgniteStop(System.Boolean)">
            <summary>
            Callback to notify that Ignite is about to stop.
            </summary>
            <param name="cancel">if set to <c>true</c>, all ongoing operations should be canceled.</param>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Plugin.IPluginProviderProxy.Name">
            <summary>
            Gets the plugin name. Plugins can be retrieved by name via <see cref="M:Apache.Ignite.Core.IIgnite.GetPlugin``1(System.String)"/>.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Plugin.IPluginProviderProxy.Copyright">
            <summary>
            Gets the copyright information.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Plugin.IPluginProviderProxy.Provider">
            <summary>
            Gets the underlying provider.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Plugin.PluginContext`1">
            <summary>
            Plugin context.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Plugin.IPluginContext`1">
            <summary>
            Plugin execution context.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Plugin.IPluginContext`1.GetExtension(System.Int32)">
            <summary>
            Gets a reference to plugin extension on Java side.
            <para />
            Extensions on Java side are configured via PluginProvider.initExtensions().
            Extension should implement PlatformExtension interface to be accessible from this method.
            </summary>
            <param name="id">Extension id. Equal to PlatformExtension.id().</param>
            <returns>Reference to a plugin extension on Java side.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Plugin.IPluginContext`1.RegisterExceptionMapping(System.String,Apache.Ignite.Core.Common.ExceptionFactory)">
            <summary>
            Registers custom exception mapping: when Java exception of specified class occurs, it will be mapped
            using provided factory delegate.
            </summary>
            <param name="className">Name of the Java exception class to be mapped.</param>
            <param name="factory">Exception factory delegate.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Plugin.IPluginContext`1.RegisterCallback(System.Int64,Apache.Ignite.Core.Plugin.PluginCallback)">
            <summary>
            Registers Java->.NET callback.
            </summary>
            <param name="callbackId">Callback id.</param>
            <param name="callback">Callback delegate.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Plugin.IPluginContext`1.InjectResources(System.Object)">
            <summary>
            Injects resources into specified target:
            populates members marked with <see cref="T:Apache.Ignite.Core.Resource.InstanceResourceAttribute"/>.
            </summary>
            <param name="target">Target object.</param>
        </member>
        <member name="P:Apache.Ignite.Core.Plugin.IPluginContext`1.Ignite">
            <summary>
            Gets the Ignite.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Plugin.IPluginContext`1.IgniteConfiguration">
            <summary>
            Gets the Ignite configuration.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Plugin.IPluginContext`1.PluginConfiguration">
            <summary>
            Gets the plugin configuration.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Plugin.PluginContext`1._pluginConfiguration">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Plugin.PluginContext`1._pluginProcessor">
            
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Plugin.PluginContext`1.#ctor(Apache.Ignite.Core.Impl.Plugin.PluginProcessor,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Impl.Plugin.PluginContext`1"/> class.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Plugin.PluginContext`1.GetExtension(System.Int32)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Plugin.PluginContext`1.RegisterExceptionMapping(System.String,Apache.Ignite.Core.Common.ExceptionFactory)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Plugin.PluginContext`1.RegisterCallback(System.Int64,Apache.Ignite.Core.Plugin.PluginCallback)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Plugin.PluginContext`1.InjectResources(System.Object)">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Plugin.PluginContext`1.Ignite">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Plugin.PluginContext`1.IgniteConfiguration">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Plugin.PluginContext`1.PluginConfiguration">
            <inheritdoc /> 
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Plugin.PluginProcessor">
            <summary>
            Plugin processor.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Plugin.PluginProcessor._pluginProviders">
            Ordered list of plugin providers. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Plugin.PluginProcessor._pluginProvidersByName">
            Plugin providers by name. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Plugin.PluginProcessor._exceptionMappings">
            Plugin exception mappings. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Plugin.PluginProcessor._callbacks">
            Plugin callbacks. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Plugin.PluginProcessor._ignite">
            
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Plugin.PluginProcessor.#ctor(Apache.Ignite.Core.Impl.Ignite)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Impl.Plugin.PluginProcessor"/> class.
            </summary>
            <param name="ignite">The ignite.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Plugin.PluginProcessor.OnIgniteStart">
            <summary>
            Called when Ignite has started.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Plugin.PluginProcessor.Stop(System.Boolean)">
            <summary>
            Stops the plugin processor.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Plugin.PluginProcessor.OnIgniteStop(System.Boolean)">
            <summary>
            Called when Ignite is about to stop.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Plugin.PluginProcessor.GetProvider(System.String)">
            <summary>
            Gets the provider.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Plugin.PluginProcessor.GetExceptionMapping(System.String)">
            <summary>
            Gets the exception factory.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Plugin.PluginProcessor.RegisterExceptionMapping(System.String,Apache.Ignite.Core.Common.ExceptionFactory)">
            <summary>
            Registers the exception mapping.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Plugin.PluginProcessor.RegisterCallback(System.Int64,Apache.Ignite.Core.Plugin.PluginCallback)">
            <summary>
            Registers the callback.
            </summary>
            <param name="callbackId">Calback id.</param>
            <param name="callback">Callback delegate</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Plugin.PluginProcessor.InvokeCallback(System.Int64,System.Int64,System.Int64)">
            <summary>
            Invokes the callback.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Plugin.PluginProcessor.GetStream(System.Int64)">
            <summary>
            Gets the stream.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Plugin.PluginProcessor.GetReader(Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream)">
            <summary>
            Gets the reader.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Plugin.PluginProcessor.GetWriter(Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream)">
            <summary>
            Gets the writer.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Plugin.PluginProcessor.LoadPlugins">
            <summary>
            Loads the plugins.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Plugin.PluginProcessor.LogProviderInfo(Apache.Ignite.Core.Log.ILogger,Apache.Ignite.Core.Impl.Plugin.IPluginProviderProxy)">
            <summary>
            Logs the provider information.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Plugin.PluginProcessor.ValidateProvider(Apache.Ignite.Core.Impl.Plugin.IPluginProviderProxy,System.Collections.Generic.Dictionary{System.String,Apache.Ignite.Core.Impl.Plugin.IPluginProviderProxy})">
            <summary>
            Validates the provider.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Plugin.PluginProcessor.CreateProviderProxy(Apache.Ignite.Core.Plugin.IPluginConfiguration)">
            <summary>
            Creates the provider proxy.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Plugin.PluginProcessor.Ignite">
            <summary>
            Gets the Ignite.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Plugin.PluginProcessor.IgniteConfiguration">
            <summary>
            Gets the Ignite configuration.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Plugin.PluginProviderProxy`1">
            <summary>
            Wraps user-defined generic <see cref="T:Apache.Ignite.Core.Plugin.IPluginProvider`1"/>.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Plugin.PluginProviderProxy`1._pluginConfiguration">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Plugin.PluginProviderProxy`1._pluginProvider">
            
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Plugin.PluginProviderProxy`1.#ctor(`0,Apache.Ignite.Core.Plugin.IPluginProvider{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Impl.Plugin.PluginProviderProxy`1"/> class.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Plugin.PluginProviderProxy`1.Start(Apache.Ignite.Core.Impl.Plugin.PluginProcessor)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Plugin.PluginProviderProxy`1.GetPlugin``1">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Plugin.PluginProviderProxy`1.Stop(System.Boolean)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Plugin.PluginProviderProxy`1.OnIgniteStart">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Plugin.PluginProviderProxy`1.OnIgniteStop(System.Boolean)">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Plugin.PluginProviderProxy`1.Name">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Plugin.PluginProviderProxy`1.Copyright">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Plugin.PluginProviderProxy`1.Provider">
            <inheritdoc /> 
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Resource.IResourceInjector">
            <summary>
            Resource injector interface.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Resource.ResourceFieldInjector">
            <summary>
            Field resource injector.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Resource.ResourceFieldInjector._inject">
            
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Resource.ResourceFieldInjector.#ctor(System.Reflection.FieldInfo)">
            <summary>
            Constructor.
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Resource.ResourceFieldInjector.Inject(System.Object,System.Object)">
            <inheritDoc /> 
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Resource.ResourceMethodInjector">
            <summary>
            Method resource injector.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Resource.ResourceMethodInjector._inject">
            
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Resource.ResourceMethodInjector.#ctor(System.Reflection.MethodInfo)">
            <summary>
            Constructor.
            </summary>
            <param name="mthd">Method.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Resource.ResourceMethodInjector.Inject(System.Object,System.Object)">
            <inheritDoc /> 
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Resource.ResourceProcessor">
            <summary>
            Resource processor.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Resource.ResourceProcessor.Mux">
            Mutex. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Resource.ResourceProcessor._descs">
            Cached descriptors. 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Resource.ResourceProcessor.Descriptor(System.Type)">
            <summary>
            Get descriptor for the given type.
            </summary>
            <param name="type">Type.</param>
            <returns></returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Resource.ResourceProcessor.Inject(System.Object,Apache.Ignite.Core.Impl.IIgniteInternal)">
            <summary>
            Inject resources to the given target.
            </summary>
            <param name="target">Target object.</param>
            <param name="grid">Grid.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Resource.ResourceProcessor.InjectStoreSession(Apache.Ignite.Core.Cache.Store.ICacheStore,Apache.Ignite.Core.Cache.Store.ICacheStoreSession)">
            <summary>
            Inject cache store session.
            </summary>
            <param name="store">Store.</param>
            <param name="ses">Store session.</param>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Resource.ResourcePropertyInjector">
            <summary>
            Property resource injector.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Resource.ResourcePropertyInjector._inject">
            
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Resource.ResourcePropertyInjector.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            Constructor.
            </summary>
            <param name="prop">Property.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Resource.ResourcePropertyInjector.Inject(System.Object,System.Object)">
            <inheritDoc /> 
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Resource.ResourceTypeDescriptor">
            <summary>
            Resource type descriptor.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Resource.ResourceTypeDescriptor.Flags">
            Cached binding flags. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Resource.ResourceTypeDescriptor.TypAttrIgnite">
            Attribute type: InstanceResourceAttribute. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Resource.ResourceTypeDescriptor.TypAttrStoreSes">
            Attribute type: StoreSessionResourceAttribute. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Resource.ResourceTypeDescriptor.TypIgnite">
            Type: IGrid. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Resource.ResourceTypeDescriptor.TypStoreSes">
            Type: ICacheStoreSession. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Resource.ResourceTypeDescriptor.TypComputeTaskNoResCache">
            Type: ComputeTaskNoResultCacheAttribute. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Resource.ResourceTypeDescriptor._igniteInjectors">
            Ignite injectors. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Resource.ResourceTypeDescriptor._storeSesInjectors">
            Session injectors. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Resource.ResourceTypeDescriptor._taskNoResCache">
            Task "no result cache" flag. 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Resource.ResourceTypeDescriptor.#ctor(System.Type)">
            <summary>
            Constructor.
            </summary>
            <param name="type">Type.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Resource.ResourceTypeDescriptor.InjectIgnite(System.Object,Apache.Ignite.Core.Impl.IIgniteInternal)">
            <summary>
            Inject resources to the given object.
            </summary>
            <param name="target">Target.</param>
            <param name="ignite">Grid.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Resource.ResourceTypeDescriptor.InjectStoreSession(System.Object,Apache.Ignite.Core.Cache.Store.ICacheStoreSession)">
            <summary>
            Inject store session.
            </summary>
            <param name="target">Target.</param>
            <param name="ses">Store session.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Resource.ResourceTypeDescriptor.Inject0(System.Object,System.Object,System.Collections.Generic.ICollection{Apache.Ignite.Core.Impl.Resource.IResourceInjector})">
            <summary>
            Perform injection.
            </summary>
            <param name="target">Target.</param>
            <param name="injectee">Injectee.</param>
            <param name="injectors">Injectors.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Resource.ResourceTypeDescriptor.CreateInjectors(System.Type,Apache.Ignite.Core.Impl.Resource.ResourceTypeDescriptor.Collector[])">
            <summary>
            Create gridInjectors for the given type.
            </summary>
            <param name="type">Type.</param>
            <param name="collectors">Collectors.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Resource.ResourceTypeDescriptor.ContainsAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)">
            <summary>
            Check whether the given member contains the given attribute.
            </summary>
            <param name="member">Mmeber.</param>
            <param name="attrType">Attribute type.</param>
            <param name="inherit">Inherit flag.</param>
            <returns>True if contains</returns>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Resource.ResourceTypeDescriptor.TaskNoResultCache">
            <summary>
            Task "no result cache" flag.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Resource.ResourceTypeDescriptor.Collector">
            <summary>
            Collector.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Resource.ResourceTypeDescriptor.Collector._attrType">
            Attribute type. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Resource.ResourceTypeDescriptor.Collector._resType">
            Resource type. 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Resource.ResourceTypeDescriptor.Collector.#ctor(System.Type,System.Type)">
            <summary>
            Constructor.
            </summary>
            <param name="attrType">Atrribute type.</param>
            <param name="resType">Resource type.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Resource.ResourceTypeDescriptor.Collector.Add(Apache.Ignite.Core.Impl.Resource.IResourceInjector)">
            <summary>
            Add injector.
            </summary>
            <param name="injector">Injector.</param>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Resource.ResourceTypeDescriptor.Collector.AttributeType">
            <summary>
            Attribute type.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Resource.ResourceTypeDescriptor.Collector.ResourceType">
            <summary>
            Resource type.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Resource.ResourceTypeDescriptor.Collector.Injectors">
            <summary>
            Injectors.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Services.ServiceContext">
            <summary>
            Service context.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Services.IServiceContext">
            <summary>
            Represents service execution context.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Services.IServiceContext.Name">
            <summary>
            Gets service name.
            </summary>
            <returns>
            Service name.
            </returns>
        </member>
        <member name="P:Apache.Ignite.Core.Services.IServiceContext.ExecutionId">
            <summary>
            Gets service execution ID. Execution ID is guaranteed to be unique across all service deployments.
            </summary>
            <returns>
            Service execution ID.
            </returns>
        </member>
        <member name="P:Apache.Ignite.Core.Services.IServiceContext.IsCancelled">
            <summary>
            Get flag indicating whether service has been cancelled or not.
            </summary>
            <returns>
            Flag indicating whether service has been cancelled or not.
            </returns>
        </member>
        <member name="P:Apache.Ignite.Core.Services.IServiceContext.CacheName">
            <summary>
            Gets cache name used for key-to-node affinity calculation. 
            This parameter is optional and is set only when key-affinity service was deployed.
            </summary>
            <returns>
            Cache name, possibly null.
            </returns>
        </member>
        <member name="P:Apache.Ignite.Core.Services.IServiceContext.AffinityKey">
            <summary>
            Gets affinity key used for key-to-node affinity calculation. 
            This parameter is optional and is set only when key-affinity service was deployed.
            </summary>
            <value>
            Affinity key, possibly null.
            </value>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Services.ServiceContext.#ctor(Apache.Ignite.Core.Binary.IBinaryRawReader)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Impl.Services.ServiceContext"/> class.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Services.ServiceContext.Name">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Services.ServiceContext.ExecutionId">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Services.ServiceContext.IsCancelled">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Services.ServiceContext.CacheName">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Services.ServiceContext.AffinityKey">
            <inheritdoc /> 
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Services.ServiceDescriptor">
            <summary>
            Service descriptor.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Services.IServiceDescriptor">
            <summary>
            Service deployment descriptor.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Services.IServiceDescriptor.Name">
            <summary>
            Gets service name.
            </summary>
            <returns>
            Service name.
            </returns>
        </member>
        <member name="P:Apache.Ignite.Core.Services.IServiceDescriptor.Type">
            <summary>
            Gets the service type.
            </summary>
            <value>
            Service type.
            </value>
        </member>
        <member name="P:Apache.Ignite.Core.Services.IServiceDescriptor.TotalCount">
            <summary>
            Gets maximum allowed total number of deployed services in the grid, 0 for unlimited.
            </summary>
            <returns>
            Maximum allowed total number of deployed services in the grid, 0 for unlimited.
            </returns>
        </member>
        <member name="P:Apache.Ignite.Core.Services.IServiceDescriptor.MaxPerNodeCount">
            <summary>
            Gets maximum allowed number of deployed services on each node, 0 for unlimited.
            </summary>
            <returns>
            Maximum allowed total number of deployed services on each node, 0 for unlimited.
            </returns>
        </member>
        <member name="P:Apache.Ignite.Core.Services.IServiceDescriptor.CacheName">
            <summary>
            Gets cache name used for key-to-node affinity calculation. 
            This parameter is optional and is set only when key-affinity service was deployed.
            </summary>
            <returns>
            Cache name, possibly null.
            </returns>
        </member>
        <member name="P:Apache.Ignite.Core.Services.IServiceDescriptor.AffinityKey">
            <summary>
            Gets affinity key used for key-to-node affinity calculation. 
            This parameter is optional and is set only when key-affinity service was deployed.
            </summary>
            <value>
            Affinity key, possibly null.
            </value>
        </member>
        <member name="P:Apache.Ignite.Core.Services.IServiceDescriptor.OriginNodeId">
            <summary>
            Gets affinity key used for key-to-node affinity calculation. 
            This parameter is optional and is set only when key-affinity service was deployed.
            </summary>
            <returns>
            Affinity key, possibly null.
            </returns>
        </member>
        <member name="P:Apache.Ignite.Core.Services.IServiceDescriptor.TopologySnapshot">
            <summary>
            Gets service deployment topology snapshot. Service topology snapshot is represented
            by number of service instances deployed on a node mapped to node ID.
            </summary>
            <value>
            Map of number of service instances per node ID.
            </value>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Services.ServiceDescriptor._services">
            Services. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Services.ServiceDescriptor._type">
            Service type. 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Services.ServiceDescriptor.#ctor(System.String,Apache.Ignite.Core.Impl.Binary.BinaryReader,Apache.Ignite.Core.Services.IServices)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Impl.Services.ServiceDescriptor"/> class.
            </summary>
            <param name="name">Name.</param>
            <param name="reader">Reader.</param>
            <param name="services">Services.</param>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Services.ServiceDescriptor.Name">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Services.ServiceDescriptor.Type">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Services.ServiceDescriptor.Platform">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Services.ServiceDescriptor.TotalCount">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Services.ServiceDescriptor.MaxPerNodeCount">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Services.ServiceDescriptor.CacheName">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Services.ServiceDescriptor.AffinityKey">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Services.ServiceDescriptor.OriginNodeId">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Services.ServiceDescriptor.TopologySnapshot">
            <inheritdoc /> 
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Services.ServiceProxy`1">
            <summary>
            Service proxy: user works with a remote service as if it is a local object.
            </summary>
            <typeparam name="T">User type to be proxied.</typeparam>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Services.ServiceProxy`1._invokeAction">
            Services. 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Services.ServiceProxy`1.#ctor(System.Func{System.Reflection.MethodBase,System.Object[],System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Impl.Services.ServiceProxy`1"/> class.
            </summary>
            <param name="invokeAction">Method invoke action.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Services.ServiceProxy`1.Invoke(System.Runtime.Remoting.Messaging.IMessage)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Services.ServiceProxy`1.GetTransparentProxy">
            <inheritdoc /> 
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Services.ServiceProxyInvoker">
            <summary>
            Invokes service proxy methods.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Services.ServiceProxyInvoker.Methods">
            Cached method info. 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Services.ServiceProxyInvoker.InvokeServiceMethod(System.Object,System.String,System.Object[])">
            <summary>
            Invokes the service method according to data from a stream,
            and writes invocation result to the output stream.
            </summary>
            <param name="svc">Service instance.</param>
            <param name="methodName">Name of the method.</param>
            <param name="arguments">Arguments.</param>
            <returns>Pair of method return value and invocation exception.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Services.ServiceProxyInvoker.GetMethodOrThrow(System.Type,System.String,System.Object[])">
            <summary>
            Finds suitable method in the specified type, or throws an exception.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Services.ServiceProxyInvoker.CleanupMethodName(System.Reflection.MethodBase)">
            <summary>
            Cleans up a method name by removing interface part, 
            which occurs when explicit interface implementation is used.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Services.ServiceProxyInvoker.AreMethodArgsCompatible(System.Object[],System.Reflection.ParameterInfo[])">
            <summary>
            Determines whether specified method arguments are comatible with given method parameter definitions.
            </summary>
            <param name="methodArgs">Method argument types.</param>
            <param name="targetParameters">Target method parameter definitions.</param>
            <returns>True if a target method can be called with specified set of arguments; otherwise, false.</returns>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Services.ServiceProxySerializer">
            <summary>
            Static proxy methods.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Services.ServiceProxySerializer.WriteProxyMethod(Apache.Ignite.Core.Impl.Binary.BinaryWriter,System.Reflection.MethodBase,System.Object[],Apache.Ignite.Core.Impl.Common.Platform)">
            <summary>
            Writes proxy method invocation data to the specified writer.
            </summary>
            <param name="writer">Writer.</param>
            <param name="method">Method.</param>
            <param name="arguments">Arguments.</param>
            <param name="platform">The platform.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Services.ServiceProxySerializer.ReadProxyMethod(Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream,Apache.Ignite.Core.Impl.Binary.Marshaller,System.String@,System.Object[]@)">
            <summary>
            Reads proxy method invocation data from the specified reader.
            </summary>
            <param name="stream">Stream.</param>
            <param name="marsh">Marshaller.</param>
            <param name="mthdName">Method name.</param>
            <param name="mthdArgs">Method arguments.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Services.ServiceProxySerializer.WriteInvocationResult(Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream,Apache.Ignite.Core.Impl.Binary.Marshaller,System.Object,System.Exception)">
            <summary>
            Writes method invocation result.
            </summary>
            <param name="stream">Stream.</param>
            <param name="marsh">Marshaller.</param>
            <param name="methodResult">Method result.</param>
            <param name="invocationError">Method invocation error.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Services.ServiceProxySerializer.ReadInvocationResult(Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream,Apache.Ignite.Core.Impl.Binary.Marshaller,System.Boolean)">
            <summary>
            Reads method invocation result.
            </summary>
            <param name="stream">Stream.</param>
            <param name="marsh">Marshaller.</param>
            <param name="keepBinary">Binary flag.</param>
            <returns>
            Method invocation result, or exception in case of error.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Services.ServiceProxySerializer.ReadDeploymentResult(Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream,Apache.Ignite.Core.Impl.Binary.Marshaller,System.Boolean)">
            <summary>
            Reads service deployment result.
            </summary>
            <param name="stream">Stream.</param>
            <param name="marsh">Marshaller.</param>
            <param name="keepBinary">Binary flag.</param>
            <returns>
            Method invocation result, or exception in case of error.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Services.ServiceProxySerializer.WriteArgForPlatforms(Apache.Ignite.Core.Impl.Binary.BinaryWriter,System.Reflection.ParameterInfo,System.Object)">
            <summary>
            Writes the argument in platform-compatible format.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Services.ServiceProxySerializer.GetPlatformArgWriter(System.Reflection.ParameterInfo,System.Object)">
            <summary>
            Gets arg writer for platform-compatible service calls.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Services.Services">
            <summary>
            Services implementation.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Services.IServices">
            <summary>
            Defines functionality to deploy distributed services in the Ignite.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Services.IServices.DeployClusterSingleton(System.String,Apache.Ignite.Core.Services.IService)">
            <summary>
            Deploys a cluster-wide singleton service. Ignite guarantees that there is always
            one instance of the service in the cluster. In case if Ignite node on which the service
            was deployed crashes or stops, Ignite will automatically redeploy it on another node.
            However, if the node on which the service is deployed remains in topology, then the
            service will always be deployed on that node only, regardless of topology changes.
            <para />
            Note that in case of topology changes, due to network delays, there may be a temporary situation
            when a singleton service instance will be active on more than one node (e.g. crash detection delay).
            </summary>
            <param name="name">Service name.</param>
            <param name="service">Service instance.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Services.IServices.DeployClusterSingletonAsync(System.String,Apache.Ignite.Core.Services.IService)">
            <summary>
            Deploys a cluster-wide singleton service. Ignite guarantees that there is always
            one instance of the service in the cluster. In case if Ignite node on which the service
            was deployed crashes or stops, Ignite will automatically redeploy it on another node.
            However, if the node on which the service is deployed remains in topology, then the
            service will always be deployed on that node only, regardless of topology changes.
            <para />
            Note that in case of topology changes, due to network delays, there may be a temporary situation
            when a singleton service instance will be active on more than one node (e.g. crash detection delay).
            </summary>
            <param name="name">Service name.</param>
            <param name="service">Service instance.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Services.IServices.DeployNodeSingleton(System.String,Apache.Ignite.Core.Services.IService)">
            <summary>
            Deploys a per-node singleton service. Ignite guarantees that there is always
            one instance of the service running on each node. Whenever new nodes are started
            within the underlying cluster group, Ignite will automatically deploy one instance of
            the service on every new node.
            </summary>
            <param name="name">Service name.</param>
            <param name="service">Service instance.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Services.IServices.DeployNodeSingletonAsync(System.String,Apache.Ignite.Core.Services.IService)">
            <summary>
            Deploys a per-node singleton service. Ignite guarantees that there is always
            one instance of the service running on each node. Whenever new nodes are started
            within the underlying cluster group, Ignite will automatically deploy one instance of
            the service on every new node.
            </summary>
            <param name="name">Service name.</param>
            <param name="service">Service instance.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Services.IServices.DeployKeyAffinitySingleton``1(System.String,Apache.Ignite.Core.Services.IService,System.String,``0)">
            <summary>
            Deploys one instance of this service on the primary node for a given affinity key.
            Whenever topology changes and primary node assignment changes, Ignite will always
            make sure that the service is undeployed on the previous primary node and deployed
            on the new primary node.
            <para />
            Note that in case of topology changes, due to network delays, there may be a temporary situation
            when a service instance will be active on more than one node (e.g. crash detection delay).
            </summary>
            <param name="name">Service name.</param>
            <param name="service">Service instance.</param>
            <param name="cacheName">Name of the cache on which affinity for key should be calculated, null for
            default cache.</param>
            <param name="affinityKey">Affinity cache key.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Services.IServices.DeployKeyAffinitySingletonAsync``1(System.String,Apache.Ignite.Core.Services.IService,System.String,``0)">
            <summary>
            Deploys one instance of this service on the primary node for a given affinity key.
            Whenever topology changes and primary node assignment changes, Ignite will always
            make sure that the service is undeployed on the previous primary node and deployed
            on the new primary node.
            <para />
            Note that in case of topology changes, due to network delays, there may be a temporary situation
            when a service instance will be active on more than one node (e.g. crash detection delay).
            </summary>
            <param name="name">Service name.</param>
            <param name="service">Service instance.</param>
            <param name="cacheName">Name of the cache on which affinity for key should be calculated, null for
            default cache.</param>
            <param name="affinityKey">Affinity cache key.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Services.IServices.DeployMultiple(System.String,Apache.Ignite.Core.Services.IService,System.Int32,System.Int32)">
            <summary>
            Deploys multiple instances of the service on the grid. Ignite will deploy a
            maximum amount of services equal to <paramref name="totalCount" /> parameter making sure that
            there are no more than <paramref name="maxPerNodeCount" /> service instances running
            on each node. Whenever topology changes, Ignite will automatically rebalance
            the deployed services within cluster to make sure that each node will end up with
            about equal number of deployed instances whenever possible.
            </summary>
            <param name="name">Service name.</param>
            <param name="service">Service instance.</param>
            <param name="totalCount">Maximum number of deployed services in the grid, 0 for unlimited.</param>
            <param name="maxPerNodeCount">Maximum number of deployed services on each node, 0 for unlimited.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Services.IServices.DeployMultipleAsync(System.String,Apache.Ignite.Core.Services.IService,System.Int32,System.Int32)">
            <summary>
            Deploys multiple instances of the service on the grid. Ignite will deploy a
            maximum amount of services equal to <paramref name="totalCount" /> parameter making sure that
            there are no more than <paramref name="maxPerNodeCount" /> service instances running
            on each node. Whenever topology changes, Ignite will automatically rebalance
            the deployed services within cluster to make sure that each node will end up with
            about equal number of deployed instances whenever possible.
            </summary>
            <param name="name">Service name.</param>
            <param name="service">Service instance.</param>
            <param name="totalCount">Maximum number of deployed services in the grid, 0 for unlimited.</param>
            <param name="maxPerNodeCount">Maximum number of deployed services on each node, 0 for unlimited.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Services.IServices.Deploy(Apache.Ignite.Core.Services.ServiceConfiguration)">
            <summary>
            Deploys instances of the service in the Ignite according to provided configuration.
            </summary>
            <param name="configuration">Service configuration.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Services.IServices.DeployAsync(Apache.Ignite.Core.Services.ServiceConfiguration)">
            <summary>
            Deploys instances of the service in the Ignite according to provided configuration.
            </summary>
            <param name="configuration">Service configuration.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Services.IServices.Cancel(System.String)">
            <summary>
            Cancels service deployment. If a service with specified name was deployed on the grid,
            then <see cref="M:Apache.Ignite.Core.Services.IService.Cancel(Apache.Ignite.Core.Services.IServiceContext)"/> method will be called on it.
            <para/>
            Note that Ignite cannot guarantee that the service exits from <see cref="M:Apache.Ignite.Core.Services.IService.Execute(Apache.Ignite.Core.Services.IServiceContext)"/>
            method whenever <see cref="M:Apache.Ignite.Core.Services.IService.Cancel(Apache.Ignite.Core.Services.IServiceContext)"/> is called. It is up to the user to
            make sure that the service code properly reacts to cancellations.
            </summary>
            <param name="name">Name of the service to cancel.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Services.IServices.CancelAsync(System.String)">
            <summary>
            Cancels service deployment. If a service with specified name was deployed on the grid,
            then <see cref="M:Apache.Ignite.Core.Services.IService.Cancel(Apache.Ignite.Core.Services.IServiceContext)"/> method will be called on it.
            <para/>
            Note that Ignite cannot guarantee that the service exits from <see cref="M:Apache.Ignite.Core.Services.IService.Execute(Apache.Ignite.Core.Services.IServiceContext)"/>
            method whenever <see cref="M:Apache.Ignite.Core.Services.IService.Cancel(Apache.Ignite.Core.Services.IServiceContext)"/> is called. It is up to the user to
            make sure that the service code properly reacts to cancellations.
            </summary>
            <param name="name">Name of the service to cancel.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Services.IServices.CancelAll">
            <summary>
            Cancels all deployed services.
            <para/>
            Note that depending on user logic, it may still take extra time for a service to
            finish execution, even after it was cancelled.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Services.IServices.CancelAllAsync">
            <summary>
            Cancels all deployed services.
            <para/>
            Note that depending on user logic, it may still take extra time for a service to
            finish execution, even after it was cancelled.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Services.IServices.GetServiceDescriptors">
            <summary>
            Gets metadata about all deployed services.
            </summary>
            <returns>Metadata about all deployed services.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Services.IServices.GetService``1(System.String)">
            <summary>
            Gets deployed service with specified name.
            </summary>
            <typeparam name="T">Service type.</typeparam>
            <param name="name">Service name.</param>
            <returns>Deployed service with specified name.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Services.IServices.GetServices``1(System.String)">
            <summary>
            Gets all deployed services with specified name.
            </summary>
            <typeparam name="T">Service type.</typeparam>
            <param name="name">Service name.</param>
            <returns>All deployed services with specified name.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Services.IServices.GetServiceProxy``1(System.String)">
            <summary>
            Gets a remote handle on the service. If service is available locally,
            then local instance is returned, otherwise, a remote proxy is dynamically
            created and provided for the specified service.
            </summary>
            <typeparam name="T">Service type.</typeparam>
            <param name="name">Service name.</param>
            <returns>Either proxy over remote service or local service if it is deployed locally.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Services.IServices.GetServiceProxy``1(System.String,System.Boolean)">
            <summary>
            Gets a remote handle on the service. If service is available locally,
            then local instance is returned, otherwise, a remote proxy is dynamically
            created and provided for the specified service.
            </summary>
            <typeparam name="T">Service type.</typeparam>
            <param name="name">Service name.</param>
            <param name="sticky">Whether or not Ignite should always contact the same remote
            service or try to load-balance between services.</param>
            <returns>Either proxy over remote service or local service if it is deployed locally.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Services.IServices.WithKeepBinary">
            <summary>
            Returns an instance with binary mode enabled.
            Service method results will be kept in binary form.
            </summary>
            <returns>Instance with binary mode enabled.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Services.IServices.WithServerKeepBinary">
            <summary>
            Returns an instance with server-side binary mode enabled.
            Service method arguments will be kept in binary form.
            </summary>
            <returns>Instance with server-side binary mode enabled.</returns>
        </member>
        <member name="P:Apache.Ignite.Core.Services.IServices.ClusterGroup">
            <summary>
            Gets the cluster group to which this instance belongs.
            </summary>
            <value>
            The cluster group to which this instance belongs.
            </value>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Services.Services.OpDeploy">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Services.Services.OpDeployMultiple">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Services.Services.OpDotnetServices">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Services.Services.OpInvokeMethod">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Services.Services.OpDescriptors">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Services.Services.OpWithServerKeepBinary">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Services.Services.OpServiceProxy">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Services.Services.OpCancel">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Services.Services.OpCancelAll">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Services.Services.OpDeployAsync">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Services.Services.OpDeployMultipleAsync">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Services.Services.OpCancelAsync">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Services.Services.OpCancelAllAsync">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Services.Services._clusterGroup">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Services.Services._keepBinary">
            Invoker binary flag. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Services.Services._srvKeepBinary">
            Server binary flag. 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Services.Services.#ctor(Apache.Ignite.Core.Impl.IPlatformTargetInternal,Apache.Ignite.Core.Cluster.IClusterGroup,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Impl.Services.Services"/> class.
            </summary>
            <param name="target">Target.</param>
            <param name="clusterGroup">Cluster group.</param>
            <param name="keepBinary">Invoker binary flag.</param>
            <param name="srvKeepBinary">Server binary flag.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Services.Services.WithKeepBinary">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Services.Services.WithServerKeepBinary">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Services.Services.DeployClusterSingleton(System.String,Apache.Ignite.Core.Services.IService)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Services.Services.DeployClusterSingletonAsync(System.String,Apache.Ignite.Core.Services.IService)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Services.Services.DeployNodeSingleton(System.String,Apache.Ignite.Core.Services.IService)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Services.Services.DeployNodeSingletonAsync(System.String,Apache.Ignite.Core.Services.IService)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Services.Services.DeployKeyAffinitySingleton``1(System.String,Apache.Ignite.Core.Services.IService,System.String,``0)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Services.Services.DeployKeyAffinitySingletonAsync``1(System.String,Apache.Ignite.Core.Services.IService,System.String,``0)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Services.Services.DeployMultiple(System.String,Apache.Ignite.Core.Services.IService,System.Int32,System.Int32)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Services.Services.DeployMultipleAsync(System.String,Apache.Ignite.Core.Services.IService,System.Int32,System.Int32)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Services.Services.Deploy(Apache.Ignite.Core.Services.ServiceConfiguration)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Services.Services.DeployAsync(Apache.Ignite.Core.Services.ServiceConfiguration)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Services.Services.Cancel(System.String)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Services.Services.CancelAsync(System.String)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Services.Services.CancelAll">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Services.Services.CancelAllAsync">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Services.Services.GetServiceDescriptors">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Services.Services.GetService``1(System.String)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Services.Services.GetServices``1(System.String)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Services.Services.GetServiceProxy``1(System.String)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Services.Services.GetServiceProxy``1(System.String,System.Boolean)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Services.Services.InvokeProxyMethod(Apache.Ignite.Core.Impl.IPlatformTargetInternal,System.Reflection.MethodBase,System.Object[],Apache.Ignite.Core.Impl.Common.Platform)">
            <summary>
            Invokes the service proxy method.
            </summary>
            <param name="proxy">Unmanaged proxy.</param>
            <param name="method">Method to invoke.</param>
            <param name="args">Arguments.</param>
            <param name="platform">The platform.</param>
            <returns>
            Invocation result.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Services.Services.WriteServiceConfiguration(Apache.Ignite.Core.Services.ServiceConfiguration,Apache.Ignite.Core.Binary.IBinaryRawWriter)">
            <summary>
            Writes the service configuration.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Services.Services.ReadDeploymentResult(Apache.Ignite.Core.Impl.Binary.BinaryReader)">
            <summary>
            Reads the deployment result.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Services.Services.ReadDeploymentResult(Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream)">
            <summary>
            Reads the deployment result.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Services.Services.ClusterGroup">
            <inheritDoc /> 
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Transactions.Transaction">
            <summary>
            Ignite transaction facade.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Transactions.ITransaction">
            <summary>
            Grid cache transaction. 
            <para/>
            Cache transactions support the following isolation levels:
            <list type="bullet">
                <item>
                    <description><see cref="F:Apache.Ignite.Core.Transactions.TransactionIsolation.ReadCommitted"/> isolation level 
                    means that always a committed value will be provided for read operations. With this isolation 
                    level values are always read from cache global memory or persistent store every time a value 
                    is accessed. In other words, if the same key is accessed more than once within the same transaction, 
                    it may have different value every time since global cache memory may be updated concurrently by 
                    other threads.</description>
                </item>
                <item>
                    <description><see cref="F:Apache.Ignite.Core.Transactions.TransactionIsolation.RepeatableRead"/> isolation level 
                    means that if a value was read once within transaction, then all consecutive reads will provide 
                    the same in-transaction value. With this isolation level accessed values are stored within 
                    in-transaction memory, so consecutive access to the same key within the same transaction will always 
                    return the value that was previously read or updated within this transaction. If concurrency is 
                    <see cref="F:Apache.Ignite.Core.Transactions.TransactionConcurrency.Pessimistic"/>, then a lock on the key will be 
                    acquired prior to accessing the value.</description>
                </item>
                <item>
                    <description><see cref="F:Apache.Ignite.Core.Transactions.TransactionIsolation.Serializable"/> isolation level means 
                    that all transactions occur in a completely isolated fashion, as if all transactions in the system 
                    had executed serially, one after the other. Read access with this level happens the same way as with 
                    <see cref="F:Apache.Ignite.Core.Transactions.TransactionIsolation.RepeatableRead"/> level. However, in 
                    <see cref="F:Apache.Ignite.Core.Transactions.TransactionConcurrency.Optimistic"/> mode, if some transactions cannot be 
                    serially isolated from each other, then one winner will be picked and the other transactions in 
                    conflict will result in <c>TransactionOptimisticException</c> being thrown on Java side.</description>
                </item>
            </list>
            Cache transactions support the following concurrency models:
            <list type="bullet">
                <item>
                    <description><see cref="F:Apache.Ignite.Core.Transactions.TransactionConcurrency.Optimistic"/> - in this mode all cache 
                    operations 
                    are not distributed to other nodes until <see cref="M:Apache.Ignite.Core.Transactions.ITransaction.Commit"/>.
                    In this mode one <c>PREPARE</c> message will 
                    be sent to participating cache nodes to start acquiring per-transaction locks, and once all nodes 
                    reply <c>OK</c> (i.e. <c>Phase 1</c> completes successfully), a one-way <c>COMMIT</c> message is sent
                    without waiting for reply. If it is necessary to know whenever remote nodes have committed as well, 
                    synchronous commit or synchronous rollback should be enabled via 
                    <c>CacheConfiguration.setWriteSynchronizationMode</c>.
                    <para/>
                    Note that in this mode, optimistic failures are only possible in conjunction with
                    <see cref="F:Apache.Ignite.Core.Transactions.TransactionIsolation.Serializable"/> isolation level. In all other cases, 
                    optimistic transactions will never fail optimistically and will always be identically ordered on all 
                    participating Ignite nodes.</description>
                </item>
                <item>
                    <description><see cref="F:Apache.Ignite.Core.Transactions.TransactionConcurrency.Pessimistic"/> - in this mode a lock is 
                    acquired on all cache operations with exception of read operations in 
                    <see cref="F:Apache.Ignite.Core.Transactions.TransactionIsolation.ReadCommitted"/> mode. All optional filters passed 
                    into cache operations will be evaluated after successful lock acquisition. Whenever 
                    <see cref="M:Apache.Ignite.Core.Transactions.ITransaction.Commit"/> is called, a single one-way <c>COMMIT</c> 
                    message is sent to participating cache nodes without waiting for reply. Note that there is no reason 
                    for distributed <c>PREPARE</c> step, as all locks have been already acquired. Just like with 
                    optimistic mode, it is possible to configure synchronous commit or rollback and wait till 
                    transaction commits on all participating remote nodes.</description>
                </item>
            </list>
            <para/>
            In addition to standard <c>CacheAtomicityMode.TRANSACTIONAL</c> behavior, Ignite also supports
            a lighter <c>CacheAtomicityMode.ATOMIC</c> mode as well. In this mode distributed transactions
            and distributed locking are not supported. Disabling transactions and locking allows to achieve much higher
            performance and throughput ratios. It is recommended that <c>CacheAtomicityMode.TRANSACTIONAL</c> mode
            is used whenever full <c>ACID</c>-compliant transactions are not needed.
            <example>
                You can use cache transactions as follows:
                <code>
                ICacheTx tx = cache.TxStart();    
            
                try 
                {
                    int v1 = cache&lt;string, int&gt;.Get("k1");
                    
                    // Check if v1 satisfies some condition before doing a put.
                    if (v1 &gt; 0)
                        cache.Put&lt;string, int&gt;("k1", 2);
                        
                    cache.Removex("k2);
                    
                    // Commit the transaction.
                    tx.Commit();
                }
                finally 
                {
                    tx.Dispose();
                }
                
                </code>
            </example>
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Transactions.ITransaction.SetRollbackonly">
            <summary>
            Modify the transaction associated with the current thread such that the 
            only possible outcome of the transaction is to roll back the transaction.
            </summary>
            <returns>
            True if rollback-only flag was set as a result of this operation, 
            false if it was already set prior to this call or could not be set
            because transaction is already finishing up committing or rolling back.
            </returns>
        </member>
        <member name="M:Apache.Ignite.Core.Transactions.ITransaction.Commit">
            <summary>
            Commits this transaction.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Transactions.ITransaction.CommitAsync">
            <summary>
            Commits this transaction.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Transactions.ITransaction.Rollback">
            <summary>
            Rolls back this transaction.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Transactions.ITransaction.RollbackAsync">
            <summary>
            Rolls back this transaction.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Transactions.ITransaction.AddMeta``1(System.String,``0)">
            <summary>
            Adds a new metadata.
            </summary>
            <param name="name">Metadata name.</param>
            <param name="val">Metadata value.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Transactions.ITransaction.Meta``1(System.String)">
            <summary>
            Gets metadata by name.
            </summary>
            <param name="name">Metadata name.</param>
            <returns>Metadata value.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">If metadata key was not found.</exception>
        </member>
        <member name="M:Apache.Ignite.Core.Transactions.ITransaction.RemoveMeta``1(System.String)">
            <summary>
            Removes metadata by name.
            </summary>
            <param name="name">Metadata name.</param>
            <returns>Value of removed metadata or default value for <c>V</c> type.</returns>
        </member>
        <member name="P:Apache.Ignite.Core.Transactions.ITransaction.NodeId">
            <summary>
            ID of the node on which this transaction started.
            </summary>
            <value>
            Originating node ID.
            </value>
        </member>
        <member name="P:Apache.Ignite.Core.Transactions.ITransaction.ThreadId">
            <summary>
            ID of the thread in which this transaction started.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Transactions.ITransaction.StartTime">
            <summary>
            Start time of this transaction on this node.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Transactions.ITransaction.Isolation">
            <summary>
            Transaction isolation level.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Transactions.ITransaction.Concurrency">
            <summary>
            Transaction concurrency mode.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Transactions.ITransaction.State">
            <summary>
            Current transaction state.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Transactions.ITransaction.Timeout">
            <summary>
            Timeout for this transaction. If transaction times
            out prior to it's completion, an exception will be thrown.
            <see cref="F:System.TimeSpan.Zero"/> for infinite timeout.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Transactions.ITransaction.IsRollbackOnly">
            <summary>
            Gets a value indicating whether this transaction was marked as rollback-only.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Transactions.Transaction._tx">
            
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Transactions.Transaction.#ctor(Apache.Ignite.Core.Impl.Transactions.TransactionImpl)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Impl.Transactions.Transaction"/> class.
            </summary>
            <param name="tx">The tx to wrap.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Transactions.Transaction.Dispose">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Transactions.Transaction.SetRollbackonly">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Transactions.Transaction.Commit">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Transactions.Transaction.CommitAsync">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Transactions.Transaction.Rollback">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Transactions.Transaction.RollbackAsync">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Transactions.Transaction.AddMeta``1(System.String,``0)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Transactions.Transaction.Meta``1(System.String)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Transactions.Transaction.RemoveMeta``1(System.String)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Transactions.Transaction.Prepare">
            <summary>
            Executes prepare step of the two phase commit.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Transactions.Transaction.NodeId">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Transactions.Transaction.ThreadId">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Transactions.Transaction.StartTime">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Transactions.Transaction.Isolation">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Transactions.Transaction.Concurrency">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Transactions.Transaction.State">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Transactions.Transaction.Timeout">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Transactions.Transaction.IsRollbackOnly">
            <inheritDoc /> 
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Transactions.TransactionImpl">
            <summary>
            Grid cache transaction implementation.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Transactions.TransactionImpl._metas">
            Metadatas. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Transactions.TransactionImpl._id">
            Unique  transaction ID.
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Transactions.TransactionImpl._txs">
            Cache. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Transactions.TransactionImpl._concurrency">
            TX concurrency. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Transactions.TransactionImpl._isolation">
            TX isolation. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Transactions.TransactionImpl._timeout">
            Timeout. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Transactions.TransactionImpl._startTime">
            Start time. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Transactions.TransactionImpl._threadId">
            Owning thread ID. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Transactions.TransactionImpl._nodeId">
            Originating node ID. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Transactions.TransactionImpl._state">
            State holder. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Transactions.TransactionImpl.THREAD_TX">
            Transaction for this thread. 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Transactions.TransactionImpl.#ctor(System.Int64,Apache.Ignite.Core.Impl.Transactions.TransactionsImpl,Apache.Ignite.Core.Transactions.TransactionConcurrency,Apache.Ignite.Core.Transactions.TransactionIsolation,System.TimeSpan,System.Guid)">
            <summary>
            Constructor.
            </summary>
            <param name="id">ID.</param>
            <param name="txs">Transactions.</param>
            <param name="concurrency">TX concurrency.</param>
            <param name="isolation">TX isolation.</param>
            <param name="timeout">Timeout.</param>
            <param name="nodeId">The originating node identifier.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Transactions.TransactionImpl.Prepare">
            <summary>
            Executes prepare step of the two phase commit.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Transactions.TransactionImpl.Commit">
            <summary>
            Commits this tx and closes it.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Transactions.TransactionImpl.Rollback">
            <summary>
            Rolls this tx back and closes it.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Transactions.TransactionImpl.SetRollbackOnly">
            <summary>
            Sets the rollback only flag.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Transactions.TransactionImpl.AddMeta``1(System.String,``0)">
            <summary>
            Adds a new metadata.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Transactions.TransactionImpl.Meta``1(System.String)">
            <summary>
            Gets metadata by name.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Transactions.TransactionImpl.RemoveMeta``1(System.String)">
            <summary>
            Removes metadata by name.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Transactions.TransactionImpl.CommitAsync">
            <summary>
            Commits tx in async mode.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Transactions.TransactionImpl.RollbackAsync">
            <summary>
            Rolls tx back in async mode.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Transactions.TransactionImpl.Dispose">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Transactions.TransactionImpl.GetClosedException">
            <summary>
            Gets the closed exception.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Transactions.TransactionImpl.GetTask(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Creates a task via provided factory if IsClosed is false; otherwise, return a task with an error.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Transactions.TransactionImpl.GetExceptionTask">
            <summary>
            Gets the task that throws an exception.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Transactions.TransactionImpl.Close">
            <summary>
            Closes the transaction and releases unmanaged resources.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Transactions.TransactionImpl.ThrowIfClosed">
            <summary>
            Throws and exception if transaction is closed.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Transactions.TransactionImpl.CloseWhenComplete(System.Threading.Tasks.Task)">
            <summary>
            Closes this transaction upon task completion.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Transactions.TransactionImpl.Finalize">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Transactions.TransactionImpl.Current">
            <summary>
            Transaction assigned to this thread.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Transactions.TransactionImpl.IsRollbackOnly">
            <summary>
            Gets a value indicating whether this instance is rollback only.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Transactions.TransactionImpl.State">
            <summary>
            Gets the state.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Transactions.TransactionImpl.Isolation">
            <summary>
            Gets the isolation.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Transactions.TransactionImpl.Concurrency">
            <summary>
            Gets the concurrency.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Transactions.TransactionImpl.Timeout">
            <summary>
            Gets the timeout.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Transactions.TransactionImpl.StartTime">
            <summary>
            Gets the start time.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Transactions.TransactionImpl.NodeId">
            <summary>
            Gets the node identifier.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Transactions.TransactionImpl.ThreadId">
            <summary>
            Gets the thread identifier.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Transactions.TransactionImpl.Id">
            <summary>
            Transaction ID.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Transactions.TransactionImpl.IsClosed">
            <summary>
            Gets a value indicating whether this transaction is closed.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Transactions.TransactionImpl.StateHolder">
            <summary>
            State holder.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Transactions.TransactionImpl.StateHolder._state">
            Current state. 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Transactions.TransactionImpl.StateHolder.#ctor(Apache.Ignite.Core.Transactions.TransactionState)">
            <summary>
            Constructor.
            </summary>
            <param name="state">State.</param>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Transactions.TransactionImpl.StateHolder.State">
            <summary>
            Current state.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Transactions.TransactionMetricsImpl">
            <summary>
            Transaction metrics.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Transactions.ITransactionMetrics">
            <summary>
            Transaction metrics, shared across all caches.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Transactions.ITransactionMetrics.CommitTime">
            <summary>
            Gets the last time transaction was committed.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Transactions.ITransactionMetrics.RollbackTime">
            <summary>
            Gets the last time transaction was rolled back.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Transactions.ITransactionMetrics.TxCommits">
            <summary>
            Gets the total number of transaction commits.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Transactions.ITransactionMetrics.TxRollbacks">
            <summary>
            Gets the total number of transaction rollbacks.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Transactions.TransactionMetricsImpl.#ctor(Apache.Ignite.Core.Binary.IBinaryRawReader)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Impl.Transactions.TransactionMetricsImpl"/> class.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Transactions.TransactionMetricsImpl.CommitTime">
            <summary>
            Gets the last time transaction was committed.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Transactions.TransactionMetricsImpl.RollbackTime">
            <summary>
            Gets the last time transaction was rolled back.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Transactions.TransactionMetricsImpl.TxCommits">
            <summary>
            Gets the total number of transaction commits.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Transactions.TransactionMetricsImpl.TxRollbacks">
            <summary>
            Gets the total number of transaction rollbacks.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Transactions.TransactionsImpl">
            <summary>
            Transactions facade.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Transactions.ITransactions">
            <summary>
            Transactions facade.
            <para/>
            All members are thread-safe and may be used concurrently from multiple threads.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Transactions.ITransactions.TxStart">
            <summary>
            Starts a transaction with default isolation (<see cref="P:Apache.Ignite.Core.Transactions.ITransactions.DefaultTransactionIsolation"/>, 
            concurrency (<see cref="P:Apache.Ignite.Core.Transactions.ITransactions.DefaultTransactionConcurrency"/>), timeout (<see cref="P:Apache.Ignite.Core.Transactions.ITransactions.DefaultTimeout"/>), 
            and invalidation policy.
            All defaults are set in CacheConfiguration at startup.
            </summary>
            <returns>New transaction.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Transactions.ITransactions.TxStart(Apache.Ignite.Core.Transactions.TransactionConcurrency,Apache.Ignite.Core.Transactions.TransactionIsolation)">
            <summary>
            Starts new transaction with the specified concurrency and isolation.
            </summary>
            <param name="concurrency">Concurrency.</param>
            <param name="isolation">Isolation.</param>
            <returns>New transaction.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Transactions.ITransactions.TxStart(Apache.Ignite.Core.Transactions.TransactionConcurrency,Apache.Ignite.Core.Transactions.TransactionIsolation,System.TimeSpan,System.Int32)">
            <summary>
            Starts new transaction with the specified concurrency and isolation.
            </summary>
            <param name="concurrency">Concurrency.</param>
            <param name="isolation">Isolation.</param>
            <param name="timeout">Timeout. TimeSpan.Zero for indefinite timeout.</param>
            <param name="txSize">Number of entries participating in transaction (may be approximate).</param>
            <returns>New transaction.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Transactions.ITransactions.GetMetrics">
            <summary>
            Gets the metrics.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Transactions.ITransactions.ResetMetrics">
            <summary>
            Resets the metrics.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Transactions.ITransactions.Tx">
            <summary>
            Gets transaction started by this thread or null if this thread does not have a transaction.
            </summary>
            <value>
            Transaction started by this thread or null if this thread does not have a transaction.
            </value>
        </member>
        <member name="P:Apache.Ignite.Core.Transactions.ITransactions.DefaultTransactionConcurrency">
            <summary>
            Gets the default transaction concurrency.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Transactions.ITransactions.DefaultTransactionIsolation">
            <summary>
            Gets the default transaction isolation.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Transactions.ITransactions.DefaultTimeout">
            <summary>
            Gets the default transaction timeout.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Transactions.TransactionsImpl.OpCacheConfigParameters">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Transactions.TransactionsImpl.OpMetrics">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Transactions.TransactionsImpl.OpStart">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Transactions.TransactionsImpl.OpCommit">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Transactions.TransactionsImpl.OpRollback">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Transactions.TransactionsImpl.OpClose">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Transactions.TransactionsImpl.OpState">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Transactions.TransactionsImpl.OpSetRollbackOnly">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Transactions.TransactionsImpl.OpCommitAsync">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Transactions.TransactionsImpl.OpRollbackAsync">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Transactions.TransactionsImpl.OpResetMetrics">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Transactions.TransactionsImpl.OpPrepare">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Transactions.TransactionsImpl._dfltConcurrency">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Transactions.TransactionsImpl._dfltIsolation">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Transactions.TransactionsImpl._dfltTimeout">
            
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Transactions.TransactionsImpl._localNodeId">
            
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Transactions.TransactionsImpl.#ctor(Apache.Ignite.Core.Impl.IPlatformTargetInternal,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Impl.Transactions.TransactionsImpl"/> class.
            </summary>
            <param name="target">Target.</param>
            <param name="localNodeId">Local node id.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Transactions.TransactionsImpl.TxStart">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Transactions.TransactionsImpl.TxStart(Apache.Ignite.Core.Transactions.TransactionConcurrency,Apache.Ignite.Core.Transactions.TransactionIsolation)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Transactions.TransactionsImpl.TxStart(Apache.Ignite.Core.Transactions.TransactionConcurrency,Apache.Ignite.Core.Transactions.TransactionIsolation,System.TimeSpan,System.Int32)">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Transactions.TransactionsImpl.GetMetrics">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Transactions.TransactionsImpl.ResetMetrics">
            <inheritDoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Transactions.TransactionsImpl.TxPrepare(Apache.Ignite.Core.Impl.Transactions.TransactionImpl)">
            <summary>
            Executes prepare step of the two phase commit.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Transactions.TransactionsImpl.TxCommit(Apache.Ignite.Core.Impl.Transactions.TransactionImpl)">
            <summary>
            Commit transaction.
            </summary>
            <param name="tx">Transaction.</param>
            <returns>Final transaction state.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Transactions.TransactionsImpl.TxRollback(Apache.Ignite.Core.Impl.Transactions.TransactionImpl)">
            <summary>
            Rollback transaction.
            </summary>
            <param name="tx">Transaction.</param>
            <returns>Final transaction state.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Transactions.TransactionsImpl.TxClose(Apache.Ignite.Core.Impl.Transactions.TransactionImpl)">
            <summary>
            Close transaction.
            </summary>
            <param name="tx">Transaction.</param>
            <returns>Final transaction state.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Transactions.TransactionsImpl.TxState(Apache.Ignite.Core.Impl.Transactions.TransactionImpl)">
            <summary>
            Get transaction current state.
            </summary>
            <param name="tx">Transaction.</param>
            <returns>Transaction current state.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Transactions.TransactionsImpl.TxSetRollbackOnly(Apache.Ignite.Core.Impl.Transactions.TransactionImpl)">
            <summary>
            Set transaction rollback-only flag.
            </summary>
            <param name="tx">Transaction.</param>
            <returns><c>true</c> if the flag was set.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Transactions.TransactionsImpl.CommitAsync(Apache.Ignite.Core.Impl.Transactions.TransactionImpl)">
            <summary>
            Commits tx in async mode.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Transactions.TransactionsImpl.RollbackAsync(Apache.Ignite.Core.Impl.Transactions.TransactionImpl)">
            <summary>
            Rolls tx back in async mode.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Transactions.TransactionsImpl.Tx">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Transactions.TransactionsImpl.DefaultTransactionConcurrency">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Transactions.TransactionsImpl.DefaultTransactionIsolation">
            <inheritDoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Transactions.TransactionsImpl.DefaultTimeout">
            <inheritDoc /> 
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Unmanaged.IgniteJniNativeMethods">
            <summary>
            Ignite JNI native methods.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Unmanaged.IUnmanagedTarget">
            <summary>
            Unmanaged target.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Unmanaged.IUnmanagedTarget.ChangeTarget(System.Void*)">
            <summary>
            Creates new instance with same context and different target.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Unmanaged.IUnmanagedTarget.Context">
            <summary>
            Context.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Unmanaged.IUnmanagedTarget.Target">
            <summary>
            Target.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Unmanaged.UnmanagedCallbackHandlers">
            <summary>
            Unmanaged callback handler function pointers.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Unmanaged.UnmanagedCallbackOp">
            <summary>
            Callback op codes.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Unmanaged.UnmanagedCallbacks">
            <summary>
            Unmanaged callbacks.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Unmanaged.UnmanagedCallbacks.ErrGeneric">
            Error type: generic. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Unmanaged.UnmanagedCallbacks.ErrJvmInit">
            Error type: initialize. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Unmanaged.UnmanagedCallbacks.ErrJvmAttach">
            Error type: attach. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Unmanaged.UnmanagedCallbacks.OpPrepareDotNet">
            Operation: prepare .Net. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Unmanaged.UnmanagedCallbacks.ConsoleWriteDel">
            Console write delegate. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Unmanaged.UnmanagedCallbacks.ConsoleWritePtr">
            Console write pointer. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Unmanaged.UnmanagedCallbacks._ctx">
            Unmanaged context. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Unmanaged.UnmanagedCallbacks._handleRegistry">
            Handle registry. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Unmanaged.UnmanagedCallbacks._ignite">
            Grid. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Unmanaged.UnmanagedCallbacks._delegates">
            Keep references to created delegates. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Unmanaged.UnmanagedCallbacks.MaxOpCode">
            Max op code. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Unmanaged.UnmanagedCallbacks._inLongOutLongHandlers">
            Handlers array. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Unmanaged.UnmanagedCallbacks._inLongLongLongObjectOutLongHandlers">
            Handlers array. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Unmanaged.UnmanagedCallbacks._initEvent">
            Initialized flag. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Unmanaged.UnmanagedCallbacks._initActions">
            Actions to be called upon Ignite initialization. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Unmanaged.UnmanagedCallbacks._thisHnd">
            GC handle to UnmanagedCallbacks instance to prevent it from being GCed. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Unmanaged.UnmanagedCallbacks._cbsPtr">
            Callbacks pointer. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Unmanaged.UnmanagedCallbacks._log">
            Log. 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Unmanaged.UnmanagedCallbacks.#ctor(Apache.Ignite.Core.Log.ILogger)">
            <summary>
            Constructor.
            </summary>
            <param name="log">Logger.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Unmanaged.UnmanagedCallbacks.InitHandlers">
            <summary>
            Initializes the handlers.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Unmanaged.UnmanagedCallbacks.AddHandler(Apache.Ignite.Core.Impl.Unmanaged.UnmanagedCallbackOp,Apache.Ignite.Core.Impl.Unmanaged.UnmanagedCallbacks.InLongOutLongFunc,System.Boolean)">
            <summary>
            Adds the handler.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Unmanaged.UnmanagedCallbacks.AddHandler(Apache.Ignite.Core.Impl.Unmanaged.UnmanagedCallbackOp,Apache.Ignite.Core.Impl.Unmanaged.UnmanagedCallbacks.InLongLongLongObjectOutLongFunc,System.Boolean)">
            <summary>
            Adds the handler.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Unmanaged.UnmanagedCallbacks.GetInvalidOpError(System.String,System.Int32)">
            <summary>
            Throws the invalid op error.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Unmanaged.UnmanagedCallbacks.ReadAndRunCacheEntryProcessor(Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream,Apache.Ignite.Core.Impl.Ignite)">
            <summary>
            Reads cache entry processor and related data from stream, executes it and returns the result.
            </summary>
            <param name="inOutStream">Stream.</param>
            <param name="grid">Grid.</param>
            <returns>CacheEntryProcessor result.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Unmanaged.UnmanagedCallbacks.Task(System.Int64)">
            <summary>
            Get compute task using it's GC handle pointer.
            </summary>
            <param name="taskPtr">Task pointer.</param>
            <returns>Compute task.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Unmanaged.UnmanagedCallbacks.Job(System.Int64)">
            <summary>
            Get compute job using it's GC handle pointer.
            </summary>
            <param name="jobPtr">Job pointer.</param>
            <returns>Compute job.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Unmanaged.UnmanagedCallbacks.ProcessFuture(System.Int64,System.Action{Apache.Ignite.Core.Impl.Common.IFutureInternal})">
            <summary>
            Process future.
            </summary>
            <param name="futPtr">Future pointer.</param>
            <param name="action">Action.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Unmanaged.UnmanagedCallbacks.ProcessFuture``1(System.Int64,System.Action{Apache.Ignite.Core.Impl.Common.Future{``0}})">
            <summary>
            Process future.
            </summary>
            <param name="futPtr">Future pointer.</param>
            <param name="action">Action.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Unmanaged.UnmanagedCallbacks.CreateFunctionPointer(System.Delegate)">
            <summary>
            Create function pointer for the given function.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Unmanaged.UnmanagedCallbacks.SetContext(System.Void*)">
            <param name="context">Context.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Unmanaged.UnmanagedCallbacks.Initialize(Apache.Ignite.Core.Impl.Ignite)">
            <summary>
            Initializes this instance with grid.
            </summary>
            <param name="grid">Grid.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Unmanaged.UnmanagedCallbacks.Cleanup">
            <summary>
            Cleanups this instance.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Unmanaged.UnmanagedCallbacks.HandleRegistry">
            <summary>
            Gets the handle registry.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Unmanaged.UnmanagedCallbacks.CallbacksPointer">
            <summary>
            Callbacks pointer.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Unmanaged.UnmanagedCallbacks.Context">
            <summary>
            Gets the context.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Unmanaged.UnmanagedCallbacks.Log">
            <summary>
            Gets the log.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Unmanaged.UnmanagedCallbacks.ConsoleWriteHandler">
            <summary>
            Gets the console write handler.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Unmanaged.UnmanagedCallbacks.InLongOutLongHandler">
            <summary>
            InLongOutLong handler struct.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Unmanaged.UnmanagedCallbacks.InLongOutLongHandler.Handler">
            <summary> The handler func. </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Unmanaged.UnmanagedCallbacks.InLongOutLongHandler.AllowUninitialized">
            <summary> Allow uninitialized flag. </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Unmanaged.UnmanagedCallbacks.InLongOutLongHandler.#ctor(Apache.Ignite.Core.Impl.Unmanaged.UnmanagedCallbacks.InLongOutLongFunc,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Impl.Unmanaged.UnmanagedCallbacks.InLongOutLongHandler"/> struct.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Unmanaged.UnmanagedCallbacks.InLongLongLongObjectOutLongHandler">
            <summary>
            InLongLongLongObjectOutLong handler struct.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Unmanaged.UnmanagedCallbacks.InLongLongLongObjectOutLongHandler.Handler">
            <summary> The handler func. </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Unmanaged.UnmanagedCallbacks.InLongLongLongObjectOutLongHandler.AllowUninitialized">
            <summary> Allow uninitialized flag. </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Unmanaged.UnmanagedCallbacks.InLongLongLongObjectOutLongHandler.#ctor(Apache.Ignite.Core.Impl.Unmanaged.UnmanagedCallbacks.InLongLongLongObjectOutLongFunc,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Impl.Unmanaged.UnmanagedCallbacks.InLongLongLongObjectOutLongHandler"/> struct.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Unmanaged.UnmanagedContext">
            <summary>
            Unmanaged context.
            Wrapper around native ctx pointer to track finalization.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Unmanaged.UnmanagedContext._nativeCtx">
            Context 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Unmanaged.UnmanagedContext.#ctor(System.Void*)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Unmanaged.UnmanagedContext.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Unmanaged.UnmanagedContext.NativeContext">
            <summary>
            Gets the native context pointer.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Unmanaged.UnmanagedNonReleaseableTarget">
            <summary>
            Unmanaged target which does not require explicit release.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Unmanaged.UnmanagedNonReleaseableTarget._ctx">
            Context. 
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Unmanaged.UnmanagedNonReleaseableTarget._target">
            Target. 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Unmanaged.UnmanagedNonReleaseableTarget.#ctor(Apache.Ignite.Core.Impl.Unmanaged.UnmanagedContext,System.Void*)">
            <summary>
            Constructor.
            </summary>
            <param name="ctx">Context.</param>
            <param name="target">Target.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Unmanaged.UnmanagedNonReleaseableTarget.ChangeTarget(System.Void*)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Unmanaged.UnmanagedNonReleaseableTarget.Dispose">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Unmanaged.UnmanagedNonReleaseableTarget.Context">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Unmanaged.UnmanagedNonReleaseableTarget.Target">
            <inheritdoc /> 
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Unmanaged.UnmanagedTarget">
            <summary>
            Base unmanaged target implementation.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Unmanaged.UnmanagedTarget._ctx">
            Context. 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Unmanaged.UnmanagedTarget.#ctor(Apache.Ignite.Core.Impl.Unmanaged.UnmanagedContext,System.Void*)">
            <summary>
            Constructor.
            </summary>
            <param name="ctx">Context.</param>
            <param name="target">Target.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Unmanaged.UnmanagedTarget.ChangeTarget(System.Void*)">
            <inheritdoc /> 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Unmanaged.UnmanagedTarget.ReleaseHandle">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Unmanaged.UnmanagedTarget.Context">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Unmanaged.UnmanagedTarget.Target">
            <inheritdoc /> 
        </member>
        <member name="P:Apache.Ignite.Core.Impl.Unmanaged.UnmanagedTarget.IsInvalid">
            <inheritdoc /> 
        </member>
        <member name="T:Apache.Ignite.Core.Impl.Unmanaged.UnmanagedUtils">
            <summary>
            Unmanaged utility classes.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Impl.Unmanaged.UnmanagedUtils.InteropFactoryId">
            Interop factory ID for .Net. 
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Unmanaged.UnmanagedUtils.#cctor">
            <summary>
            Initializer.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Unmanaged.UnmanagedUtils.CurrentDomain_DomainUnload(System.Object,System.EventArgs)">
            <summary>
            Handles the DomainUnload event of the current AppDomain.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Impl.Unmanaged.UnmanagedUtils.Initialize">
            <summary>
            No-op initializer used to force type loading and static constructor call.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Interop.JavaObject">
            <summary>
            Represents a Java object wrapper.
            <para/>
            <see cref="T:Apache.Ignite.Core.Interop.JavaObject"/> can be converted to Ignite filters and predicates 
            which can be used on non-.NET Ignite nodes.
            <para/>
            Workflow is as follows:
            Instantiate specified Java class;
            Set property values;
            If the resulting object implements PlatformJavaObjectFactory, call create() method and use the result,
            otherwise use the original object.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Interop.JavaObject._className">
            Java class name. 
        </member>
        <member name="F:Apache.Ignite.Core.Interop.JavaObject._properties">
            Properties. 
        </member>
        <member name="M:Apache.Ignite.Core.Interop.JavaObject.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Interop.JavaObject"/> class.
            </summary>
            <param name="className">Name of the Java class.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Interop.JavaObject.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Interop.JavaObject"/> class.
            </summary>
            <param name="className">Name of the Java class.</param>
            <param name="properties">The properties to set on the Java object.</param>
        </member>
        <member name="P:Apache.Ignite.Core.Interop.JavaObject.ClassName">
            <summary>
            Gets the Java class name.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Interop.JavaObject.Properties">
            <summary>
            Gets the properties to be set on the Java object.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Lifecycle.ClientReconnectEventArgs">
            <summary>
            Contains client reconnect event data.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Lifecycle.ClientReconnectEventArgs._hasClusterRestarted">
            
        </member>
        <member name="M:Apache.Ignite.Core.Lifecycle.ClientReconnectEventArgs.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Lifecycle.ClientReconnectEventArgs"/> class.
            </summary>
            <param name="hasClusterRestarted">Cluster restarted flag.</param>
        </member>
        <member name="P:Apache.Ignite.Core.Lifecycle.ClientReconnectEventArgs.HasClusterRestarted">
            <summary>
            Gets a value indicating whether this cluster has been restarted during reconnect.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Log.CategoryLogger">
            <summary>
            Wrapping logger with a predefined category.
            <para/>
            When <see cref="M:Apache.Ignite.Core.Log.CategoryLogger.Log(Apache.Ignite.Core.Log.LogLevel,System.String,System.Object[],System.IFormatProvider,System.String,System.String,System.Exception)"/> method is called, and <c>category</c> parameter is null, predefined category 
            will be used.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Log.CategoryLogger._logger">
            Wrapped logger. 
        </member>
        <member name="F:Apache.Ignite.Core.Log.CategoryLogger._category">
            Category to use. 
        </member>
        <member name="M:Apache.Ignite.Core.Log.CategoryLogger.#ctor(Apache.Ignite.Core.Log.ILogger,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Log.CategoryLogger"/> class.
            </summary>
            <param name="logger">The logger to wrap.</param>
            <param name="category">The category.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Log.CategoryLogger.Log(Apache.Ignite.Core.Log.LogLevel,System.String,System.Object[],System.IFormatProvider,System.String,System.String,System.Exception)">
            <summary>
            Logs the specified message.
            </summary>
            <param name="level">The level.</param>
            <param name="message">The message.</param>
            <param name="args">The arguments to format <paramref name="message" />.
            Can be null (formatting will not occur).</param>
            <param name="formatProvider">The format provider. Can be null if <paramref name="args" /> is null.</param>
            <param name="category">The logging category name.</param>
            <param name="nativeErrorInfo">The native error information.</param>
            <param name="ex">The exception. Can be null.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Log.CategoryLogger.IsEnabled(Apache.Ignite.Core.Log.LogLevel)">
            <summary>
            Determines whether the specified log level is enabled.
            </summary>
            <param name="level">The level.</param>
            <returns>
            Value indicating whether the specified log level is enabled
            </returns>
        </member>
        <member name="T:Apache.Ignite.Core.Log.LoggerExtensions">
            <summary>
            Extension methods for <see cref="T:Apache.Ignite.Core.Log.ILogger"/>
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Log.LoggerExtensions.Trace(Apache.Ignite.Core.Log.ILogger,System.String)">
            <summary>
            Logs the message with <see cref="F:Apache.Ignite.Core.Log.LogLevel.Trace"/> level.
            </summary>
            <param name="logger">The logger.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Log.LoggerExtensions.Trace(Apache.Ignite.Core.Log.ILogger,System.String,System.Object[])">
            <summary>
            Logs the message with <see cref="F:Apache.Ignite.Core.Log.LogLevel.Trace"/> level.
            </summary>
            <param name="logger">The logger.</param>
            <param name="message">The message.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Log.LoggerExtensions.Trace(Apache.Ignite.Core.Log.ILogger,System.Exception,System.String)">
            <summary>
            Logs the message with <see cref="F:Apache.Ignite.Core.Log.LogLevel.Trace"/> level.
            </summary>
            <param name="logger">The logger.</param>
            <param name="ex">The exception.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Log.LoggerExtensions.Trace(Apache.Ignite.Core.Log.ILogger,System.Exception,System.String,System.Object[])">
            <summary>
            Logs the message with <see cref="F:Apache.Ignite.Core.Log.LogLevel.Trace"/> level.
            </summary>
            <param name="logger">The logger.</param>
            <param name="ex">The exception.</param>
            <param name="message">The message.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Log.LoggerExtensions.Debug(Apache.Ignite.Core.Log.ILogger,System.String)">
            <summary>
            Logs the message with <see cref="F:Apache.Ignite.Core.Log.LogLevel.Debug"/> level.
            </summary>
            <param name="logger">The logger.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Log.LoggerExtensions.Debug(Apache.Ignite.Core.Log.ILogger,System.String,System.Object[])">
            <summary>
            Logs the message with <see cref="F:Apache.Ignite.Core.Log.LogLevel.Debug"/> level.
            </summary>
            <param name="logger">The logger.</param>
            <param name="message">The message.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Log.LoggerExtensions.Debug(Apache.Ignite.Core.Log.ILogger,System.Exception,System.String)">
            <summary>
            Logs the message with <see cref="F:Apache.Ignite.Core.Log.LogLevel.Debug"/> level.
            </summary>
            <param name="logger">The logger.</param>
            <param name="ex">The exception.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Log.LoggerExtensions.Debug(Apache.Ignite.Core.Log.ILogger,System.Exception,System.String,System.Object[])">
            <summary>
            Logs the message with <see cref="F:Apache.Ignite.Core.Log.LogLevel.Debug"/> level.
            </summary>
            <param name="logger">The logger.</param>
            <param name="ex">The exception.</param>
            <param name="message">The message.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Log.LoggerExtensions.Info(Apache.Ignite.Core.Log.ILogger,System.String)">
            <summary>
            Logs the message with <see cref="F:Apache.Ignite.Core.Log.LogLevel.Info"/> level.
            </summary>
            <param name="logger">The logger.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Log.LoggerExtensions.Info(Apache.Ignite.Core.Log.ILogger,System.String,System.Object[])">
            <summary>
            Logs the message with <see cref="F:Apache.Ignite.Core.Log.LogLevel.Info"/> level.
            </summary>
            <param name="logger">The logger.</param>
            <param name="message">The message.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Log.LoggerExtensions.Info(Apache.Ignite.Core.Log.ILogger,System.Exception,System.String)">
            <summary>
            Logs the message with <see cref="F:Apache.Ignite.Core.Log.LogLevel.Info"/> level.
            </summary>
            <param name="logger">The logger.</param>
            <param name="ex">The exception.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Log.LoggerExtensions.Info(Apache.Ignite.Core.Log.ILogger,System.Exception,System.String,System.Object[])">
            <summary>
            Logs the message with <see cref="F:Apache.Ignite.Core.Log.LogLevel.Info"/> level.
            </summary>
            <param name="logger">The logger.</param>
            <param name="ex">The exception.</param>
            <param name="message">The message.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Log.LoggerExtensions.Warn(Apache.Ignite.Core.Log.ILogger,System.String)">
            <summary>
            Logs the message with <see cref="F:Apache.Ignite.Core.Log.LogLevel.Warn"/> level.
            </summary>
            <param name="logger">The logger.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Log.LoggerExtensions.Warn(Apache.Ignite.Core.Log.ILogger,System.String,System.Object[])">
            <summary>
            Logs the message with <see cref="F:Apache.Ignite.Core.Log.LogLevel.Warn"/> level.
            </summary>
            <param name="logger">The logger.</param>
            <param name="message">The message.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Log.LoggerExtensions.Warn(Apache.Ignite.Core.Log.ILogger,System.Exception,System.String)">
            <summary>
            Logs the message with <see cref="F:Apache.Ignite.Core.Log.LogLevel.Warn"/> level.
            </summary>
            <param name="logger">The logger.</param>
            <param name="ex">The exception.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Log.LoggerExtensions.Warn(Apache.Ignite.Core.Log.ILogger,System.Exception,System.String,System.Object[])">
            <summary>
            Logs the message with <see cref="F:Apache.Ignite.Core.Log.LogLevel.Warn"/> level.
            </summary>
            <param name="logger">The logger.</param>
            <param name="ex">The exception.</param>
            <param name="message">The message.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Log.LoggerExtensions.Error(Apache.Ignite.Core.Log.ILogger,System.String)">
            <summary>
            Logs the message with <see cref="F:Apache.Ignite.Core.Log.LogLevel.Error"/> level.
            </summary>
            <param name="logger">The logger.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Log.LoggerExtensions.Error(Apache.Ignite.Core.Log.ILogger,System.String,System.Object[])">
            <summary>
            Logs the message with <see cref="F:Apache.Ignite.Core.Log.LogLevel.Error"/> level.
            </summary>
            <param name="logger">The logger.</param>
            <param name="message">The message.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Log.LoggerExtensions.Error(Apache.Ignite.Core.Log.ILogger,System.Exception,System.String)">
            <summary>
            Logs the message with <see cref="F:Apache.Ignite.Core.Log.LogLevel.Error"/> level.
            </summary>
            <param name="logger">The logger.</param>
            <param name="ex">The exception.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Log.LoggerExtensions.Error(Apache.Ignite.Core.Log.ILogger,System.Exception,System.String,System.Object[])">
            <summary>
            Logs the message with <see cref="F:Apache.Ignite.Core.Log.LogLevel.Error"/> level.
            </summary>
            <param name="logger">The logger.</param>
            <param name="ex">The exception.</param>
            <param name="message">The message.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Log.LoggerExtensions.Log(Apache.Ignite.Core.Log.ILogger,Apache.Ignite.Core.Log.LogLevel,System.String)">
            <summary>
            Logs the message.
            </summary>
            <param name="logger">The logger.</param>
            <param name="level">The level.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Log.LoggerExtensions.Log(Apache.Ignite.Core.Log.ILogger,Apache.Ignite.Core.Log.LogLevel,System.String,System.Object[])">
            <summary>
            Logs the message.
            </summary>
            <param name="logger">The logger.</param>
            <param name="level">The level.</param>
            <param name="message">The message.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Log.LoggerExtensions.Log(Apache.Ignite.Core.Log.ILogger,Apache.Ignite.Core.Log.LogLevel,System.Exception,System.String)">
            <summary>
            Logs the message.
            </summary>
            <param name="logger">The logger.</param>
            <param name="level">The level.</param>
            <param name="ex">The exception.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Log.LoggerExtensions.Log(Apache.Ignite.Core.Log.ILogger,Apache.Ignite.Core.Log.LogLevel,System.Exception,System.String,System.Object[])">
            <summary>
            Logs the message.
            </summary>
            <param name="logger">The logger.</param>
            <param name="level">The level.</param>
            <param name="ex">The exception.</param>
            <param name="message">The message.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Log.LoggerExtensions.GetLogger(Apache.Ignite.Core.Log.ILogger,System.String)">
            <summary>
            Gets the <see cref="T:Apache.Ignite.Core.Log.CategoryLogger"/> with a specified category that wraps provided logger.
            </summary>
            <param name="logger">The logger.</param>
            <param name="category">The category.</param>
            <returns>Logger that always uses specified category.</returns>
        </member>
        <member name="T:Apache.Ignite.Core.Log.LogLevel">
            <summary>
            Defines log levels.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Log.LogLevel.Trace">
            <summary>
            Trace log level.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Log.LogLevel.Debug">
            <summary>
            Debug log level.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Log.LogLevel.Info">
            <summary>
            Info log level.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Log.LogLevel.Warn">
            <summary>
            Warning log level.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Log.LogLevel.Error">
            <summary>
            Error log level.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Cache.Configuration.MemoryConfiguration">
            <summary>
            A page memory configuration for an Apache Ignite node. The page memory is a manageable off-heap based
            memory architecture that divides all continuously allocated memory regions into pages of fixed size.
            An individual page can store one or many cache key-value entries that allows reusing the memory
            in the most efficient way and avoid memory fragmentation issues. 
            <para/>
            By default, the page memory allocates a single continuous memory region. All the caches that
            will be configured in an application will be mapped to this memory region by default,
            thus, all the cache data will reside in that memory region.
            <para/>
            If initial size of the default memory region doesn't satisfy requirements or it's
            required to have multiple memory regions with different properties
            then <see cref="T:Apache.Ignite.Core.Cache.Configuration.MemoryPolicyConfiguration"/> can be used for both scenarios.
            For instance, using memory policies you can define memory regions of different maximum size,
            eviction policies, swapping options, etc. Once you define a new memory region you can bind
            particular Ignite caches to it. <para/>
            To learn more about memory policies refer to <see cref="T:Apache.Ignite.Core.Cache.Configuration.MemoryPolicyConfiguration"/> documentation.
            <para/>
            Obsolete, use <see cref="T:Apache.Ignite.Core.Configuration.DataStorageConfiguration"/>.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Cache.Configuration.MemoryConfiguration.DefaultSystemCacheInitialSize">
            <summary>
            Default size of a memory chunk reserved for system cache initially.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Cache.Configuration.MemoryConfiguration.DefaultSystemCacheMaxSize">
            <summary>
            Default max size of a memory chunk for the system cache.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Cache.Configuration.MemoryConfiguration.DefaultPageSize">
            <summary>
            The default page size.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Cache.Configuration.MemoryConfiguration.DefaultDefaultMemoryPolicyName">
            <summary>
            The default value for <see cref="P:Apache.Ignite.Core.Cache.Configuration.MemoryConfiguration.DefaultMemoryPolicyName"/>.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Configuration.MemoryConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Cache.Configuration.MemoryConfiguration"/> class.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Configuration.MemoryConfiguration.#ctor(Apache.Ignite.Core.Binary.IBinaryRawReader)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Cache.Configuration.MemoryConfiguration"/> class.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Cache.Configuration.MemoryConfiguration.Write(Apache.Ignite.Core.Binary.IBinaryRawWriter)">
            <summary>
            Writes this instance to a writer.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Configuration.MemoryConfiguration.SystemCacheInitialSize">
            <summary>
            Gets or sets the size of a memory chunk reserved for system cache needs.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Configuration.MemoryConfiguration.SystemCacheMaxSize">
            <summary>
            Gets or sets the maximum memory region size reserved for system cache.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Configuration.MemoryConfiguration.PageSize">
            <summary>
            Gets or sets the size of the memory page.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Configuration.MemoryConfiguration.ConcurrencyLevel">
            <summary>
            Gets or sets the number of concurrent segments in Ignite internal page mapping tables.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Configuration.MemoryConfiguration.DefaultMemoryPolicyName">
            <summary>
            Gets or sets the name of the default memory policy in <see cref="P:Apache.Ignite.Core.Cache.Configuration.MemoryConfiguration.MemoryPolicies"/>.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Cache.Configuration.MemoryConfiguration.MemoryPolicies">
            <summary>
            Gets or sets the memory policies.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Lifecycle.LifecycleEventType">
            <summary>
            Ignite lifecycle event types. These events are used to notify lifecycle beans
            about changes in Ignite lifecycle state.
            <para/>
            For more information and detailed examples refer to <see cref="T:Apache.Ignite.Core.Lifecycle.ILifecycleHandler"/>
            documentation.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Lifecycle.LifecycleEventType.BeforeNodeStart">
            <summary>
            Invoked before node startup routine. Node is not initialized and cannot be used.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Lifecycle.LifecycleEventType.AfterNodeStart">
            <summary>
            Invoked after node startup is complete. Node is fully initialized and fully functional.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Lifecycle.LifecycleEventType.BeforeNodeStop">
            <summary>
            Invoked before node stopping routine. Node is fully functional at this point.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Lifecycle.LifecycleEventType.AfterNodeStop">
            <summary>
            Invoked after node had stopped. Node is stopped and cannot be used. 
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Messaging.IMessageListener`1">
            <summary>
            Represents messaging filter predicate.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Messaging.IMessageListener`1.Invoke(System.Guid,`0)">
            <summary>
            Invokes the message listener when a message arrives.
            </summary>
            <param name="nodeId">Message source node identifier.</param>
            <param name="message">Message.</param>
            <returns>
            Value indicating whether this instance should remain subscribed. 
            Returning <c>false</c> will unsubscribe this message listener from further notifications.
            </returns>
        </member>
        <member name="T:Apache.Ignite.Core.Binary.IBinaryIdMapper">
            <summary>
            Maps class name and class field names to integer identifiers.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryIdMapper.GetTypeId(System.String)">
            <summary>
            Gets type ID for the given type.
            </summary>
            <param name="typeName">Full type name.</param>
            <returns>ID of the class or 0 in case hash code is to be used.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinaryIdMapper.GetFieldId(System.Int32,System.String)">
            <summary>
            Gets field ID for the given field of the given class.
            </summary>
            <param name="typeId">Type ID.</param>
            <param name="fieldName">Field name.</param>
            <returns>ID of the field or null in case hash code is to be used.</returns>
        </member>
        <member name="T:Apache.Ignite.Core.Binary.IBinarizable">
            <summary>
            Interface to implement custom serialization logic.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinarizable.WriteBinary(Apache.Ignite.Core.Binary.IBinaryWriter)">
            <summary>
            Writes this object to the given writer.
            </summary> 
            <param name="writer">Writer.</param>
            <exception cref="T:System.IO.IOException">If write failed.</exception>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.IBinarizable.ReadBinary(Apache.Ignite.Core.Binary.IBinaryReader)">
            <summary>
            Reads this object from the given reader.
            </summary> 
            <param name="reader">Reader.</param>
            <exception cref="T:System.IO.IOException">If read failed.</exception>
        </member>
        <member name="T:Apache.Ignite.Core.Binary.BinaryConfiguration">
            <summary>
            Binary type configuration.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Binary.BinaryConfiguration.DefaultCompactFooter">
            <summary>
            Default <see cref="P:Apache.Ignite.Core.Binary.BinaryConfiguration.CompactFooter"/> setting.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Binary.BinaryConfiguration.DefaultKeepDeserialized">
            <summary>
            Default <see cref="P:Apache.Ignite.Core.Binary.BinaryConfiguration.KeepDeserialized"/> setting.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Binary.BinaryConfiguration._compactFooter">
            Footer setting. 
        </member>
        <member name="M:Apache.Ignite.Core.Binary.BinaryConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Binary.BinaryConfiguration"/> class.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.BinaryConfiguration.#ctor(Apache.Ignite.Core.Binary.BinaryConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Binary.BinaryConfiguration"/> class.
            </summary>
            <param name="cfg">The binary configuration to copy.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.BinaryConfiguration.CopyLocalProperties(Apache.Ignite.Core.Binary.BinaryConfiguration)">
            <summary>
            Copies the local properties.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.BinaryConfiguration.#ctor(System.Type[])">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Binary.BinaryConfiguration"/> class.
            </summary>
            <param name="binaryTypes">Binary types to register.</param>
        </member>
        <member name="P:Apache.Ignite.Core.Binary.BinaryConfiguration.TypeConfigurations">
            <summary>
            Type configurations.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Binary.BinaryConfiguration.Types">
            <summary>
            Gets or sets a collection of assembly-qualified type names 
            (the result of <see cref="P:System.Type.AssemblyQualifiedName"/>) for binarizable types.
            <para/>
            Shorthand for creating <see cref="T:Apache.Ignite.Core.Binary.BinaryTypeConfiguration"/>.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Binary.BinaryConfiguration.NameMapper">
            <summary>
            Default name mapper.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Binary.BinaryConfiguration.IdMapper">
            <summary>
            Default ID mapper.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Binary.BinaryConfiguration.Serializer">
            <summary>
            Default serializer.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Binary.BinaryConfiguration.KeepDeserialized">
            <summary>
            Default keep deserialized flag.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Binary.BinaryConfiguration.CompactFooter">
            <summary>
            Gets or sets a value indicating whether to write footers in compact form.
            When enabled, Ignite will not write fields metadata when serializing objects, 
            because internally metadata is distributed inside cluster.
            This increases serialization performance.
            <para/>
            <b>WARNING!</b> This mode should be disabled when already serialized data can be taken from some external
            sources (e.g.cache store which stores data in binary form, data center replication, etc.). 
            Otherwise binary objects without any associated metadata could could not be deserialized.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Binary.BinaryConfiguration.CompactFooterInternal">
            <summary>
            Gets the compact footer internal nullable value.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Binary.BinaryObjectException">
            <summary>
            Indicates an error during binarization.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.BinaryObjectException.#ctor">
            <summary>
            Constructs an exception. 
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.BinaryObjectException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Binary.BinaryObjectException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.BinaryObjectException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Binary.BinaryObjectException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="cause">The cause.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.BinaryObjectException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs an exception.
            </summary>
            <param name="info">Serialization info.</param>
            <param name="ctx">Streaming context.</param>
        </member>
        <member name="T:Apache.Ignite.Core.Binary.BinaryTypeConfiguration">
            <summary>
            Binary type configuration.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.BinaryTypeConfiguration.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.BinaryTypeConfiguration.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="typeName">Type name.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.BinaryTypeConfiguration.#ctor(System.Type)">
            <summary>
            Constructor.
            </summary>
            <param name="type">Type.</param> 
        </member>
        <member name="M:Apache.Ignite.Core.Binary.BinaryTypeConfiguration.#ctor(Apache.Ignite.Core.Binary.BinaryTypeConfiguration)">
            <summary>
            Copying constructor.
            </summary>
            <param name="cfg">Configuration to copy.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Binary.BinaryTypeConfiguration.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
        </member>
        <member name="P:Apache.Ignite.Core.Binary.BinaryTypeConfiguration.TypeName">
            <summary>
            Fully qualified type name. 
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Binary.BinaryTypeConfiguration.NameMapper">
            <summary>
            Name mapper for the given type. 
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Binary.BinaryTypeConfiguration.IdMapper">
            <summary>
            ID mapper for the given type. When it is necessary to resolve class (field) ID, then 
            this property will be checked first. 
            Otherwise, ID will be hash code of the class (field) simple name in lower case. 
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Binary.BinaryTypeConfiguration.Serializer">
            <summary>
            Serializer for the given type. If not provided and class implements <see cref="T:Apache.Ignite.Core.Binary.IBinarizable"/>
            then its custom logic will be used. If not provided and class doesn't implement <see cref="T:Apache.Ignite.Core.Binary.IBinarizable"/>
            then all fields of the class except of those with [NotSerialized] attribute will be serialized
            with help of reflection.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Binary.BinaryTypeConfiguration.AffinityKeyFieldName">
            <summary>
            Affinity key field name.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Binary.BinaryTypeConfiguration.KeepDeserialized">
            <summary>
            Keep deserialized flag. If set to non-null value, overrides default value set in 
            <see cref="T:Apache.Ignite.Core.Binary.BinaryTypeConfiguration"/>.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Binary.BinaryTypeConfiguration.IsEnum">
            <summary>
            Gets or sets a value indicating whether this instance describes an enum type.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Binary.BinaryTypeNames">
            <summary>
            Binary type name constants.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Binary.BinaryTypeNames.TypeNameBool">
            <summary> Type name: boolean. </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Binary.BinaryTypeNames.TypeNameByte">
            <summary> Type name: byte. </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Binary.BinaryTypeNames.TypeNameShort">
            <summary> Type name: short. </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Binary.BinaryTypeNames.TypeNameChar">
            <summary> Type name: char. </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Binary.BinaryTypeNames.TypeNameInt">
            <summary> Type name: int. </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Binary.BinaryTypeNames.TypeNameLong">
            <summary> Type name: long. </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Binary.BinaryTypeNames.TypeNameFloat">
            <summary> Type name: float. </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Binary.BinaryTypeNames.TypeNameDouble">
            <summary> Type name: double. </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Binary.BinaryTypeNames.TypeNameDecimal">
            <summary> Type name: decimal. </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Binary.BinaryTypeNames.TypeNameString">
            <summary> Type name: String. </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Binary.BinaryTypeNames.TypeNameGuid">
            <summary> Type name: UUID. </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Binary.BinaryTypeNames.TypeNameDate">
            <summary> Type name: date. </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Binary.BinaryTypeNames.TypeNameTimestamp">
            <summary> Type name: timestamp. </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Binary.BinaryTypeNames.TypeNameEnum">
            <summary> Type name: Enum. </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Binary.BinaryTypeNames.TypeNameObject">
            <summary> Type name: Object. </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Binary.BinaryTypeNames.TypeNameArrayBool">
            <summary> Type name: boolean array. </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Binary.BinaryTypeNames.TypeNameArrayByte">
            <summary> Type name: byte array. </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Binary.BinaryTypeNames.TypeNameArrayShort">
            <summary> Type name: short array. </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Binary.BinaryTypeNames.TypeNameArrayChar">
            <summary> Type name: char array. </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Binary.BinaryTypeNames.TypeNameArrayInt">
            <summary> Type name: int array. </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Binary.BinaryTypeNames.TypeNameArrayLong">
            <summary> Type name: long array. </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Binary.BinaryTypeNames.TypeNameArrayFloat">
            <summary> Type name: float array. </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Binary.BinaryTypeNames.TypeNameArrayDouble">
            <summary> Type name: double array. </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Binary.BinaryTypeNames.TypeNameArrayDecimal">
            <summary> Type name: decimal array. </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Binary.BinaryTypeNames.TypeNameArrayString">
            <summary> Type name: String array. </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Binary.BinaryTypeNames.TypeNameArrayGuid">
            <summary> Type name: UUID array. </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Binary.BinaryTypeNames.TypeNameArrayDate">
            <summary> Type name: timestamp array. </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Binary.BinaryTypeNames.TypeNameArrayTimestamp">
            <summary> Type name: timestamp array. </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Binary.BinaryTypeNames.TypeNameArrayEnum">
            <summary> Type name: Enum array. </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Binary.BinaryTypeNames.TypeNameArrayObject">
            <summary> Type name: Object array. </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Binary.BinaryTypeNames.TypeNameCollection">
            <summary> Type name: Collection. </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Binary.BinaryTypeNames.TypeNameMap">
            <summary> Type name: Map. </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Plugin.IPluginConfiguration">
            <summary>
            Plugin configuration interface.
            <para/>
            Implementations should be linked to corresponding <see cref="T:Apache.Ignite.Core.Plugin.IPluginProvider`1"/>
            via <see cref="T:Apache.Ignite.Core.Plugin.PluginProviderTypeAttribute"/>.
            <example>
            Example plugin implementation:
            <code>
            [PluginProviderType(typeof(MyPluginProvider))]
            class MyPluginConfig : IPluginConfiguration
            {
                int CustomProperty { get; set; }
            }
            
            class MyPluginProvider : IPluginProvider&lt;MyPluginConfig&gt;
            {
                ...
            }
            </code>
            </example>
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Plugin.IPluginConfiguration.WriteBinary(Apache.Ignite.Core.Binary.IBinaryRawWriter)">
            <summary>
            Writes this instance to a raw writer.
            This method will be called when <see cref="P:Apache.Ignite.Core.Plugin.IPluginConfiguration.PluginConfigurationClosureFactoryId"/> is not null to propagate
            configuration to the Java side.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="P:Apache.Ignite.Core.Plugin.IPluginConfiguration.PluginConfigurationClosureFactoryId">
            <summary>
            Gets the id to locate PlatformPluginConfigurationClosureFactory on Java side
            and read the data written by <see cref="M:Apache.Ignite.Core.Plugin.IPluginConfiguration.WriteBinary(Apache.Ignite.Core.Binary.IBinaryRawWriter)"/> method.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Plugin.IPluginProvider`1">
            <summary>
            Pluggable Ignite component. Should have parameterless constructor.
            <para/>
            Ignite plugins are loaded according to <see cref="P:Apache.Ignite.Core.IgniteConfiguration.PluginConfigurations"/>.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Plugin.IPluginProvider`1.GetPlugin``1">
            <summary>
            Gets the plugin instance.
            </summary>
            <typeparam name="T">Plugin instance type.</typeparam>
            <returns>Plugin instance.</returns>
        </member>
        <member name="M:Apache.Ignite.Core.Plugin.IPluginProvider`1.Start(Apache.Ignite.Core.Plugin.IPluginContext{`0})">
            <summary>
            Starts the plugin provider.
            <para/>
            <see cref="P:Apache.Ignite.Core.Plugin.IPluginContext`1.Ignite"/> can be null until <see cref="M:Apache.Ignite.Core.Plugin.IPluginProvider`1.OnIgniteStart"/> is called.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Plugin.IPluginProvider`1.Stop(System.Boolean)">
            <summary>
            Stops the plugin provider.
            </summary>
            <param name="cancel">if set to <c>true</c>, all ongoing operations should be canceled.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Plugin.IPluginProvider`1.OnIgniteStart">
            <summary>
            Called when Ignite has been started and is fully functional.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Plugin.IPluginProvider`1.OnIgniteStop(System.Boolean)">
            <summary>
            Callback to notify that Ignite is about to stop.
            </summary>
            <param name="cancel">if set to <c>true</c>, all ongoing operations should be canceled.</param>
        </member>
        <member name="P:Apache.Ignite.Core.Plugin.IPluginProvider`1.Name">
            <summary>
            Gets the plugin name. Plugins can be retrieved by name via <see cref="M:Apache.Ignite.Core.IIgnite.GetPlugin``1(System.String)"/>.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Plugin.IPluginProvider`1.Copyright">
            <summary>
            Gets the copyright information.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Plugin.PluginCallback">
            <summary>
            Plugin callback delegate.
            </summary>
            <param name="input">Input reader. May be null.</param>
            <param name="output">Output writer. May be null.</param>
            <returns>Result code.</returns>
        </member>
        <member name="T:Apache.Ignite.Core.Plugin.PluginNotFoundException">
            <summary>
            Indicates missing Ignite plugin.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Plugin.PluginNotFoundException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Plugin.PluginNotFoundException"/> class.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Plugin.PluginNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Plugin.PluginNotFoundException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Plugin.PluginNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Plugin.PluginNotFoundException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, 
            or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Plugin.PluginNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Plugin.PluginNotFoundException"/> class.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Plugin.PluginProviderTypeAttribute">
            <summary>
            When applied to <see cref="T:Apache.Ignite.Core.Plugin.IPluginConfiguration"/>, defines the type of
            <see cref="T:Apache.Ignite.Core.Plugin.IPluginProvider`1"/> to instantiate.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Plugin.PluginProviderTypeAttribute._pluginProviderType">
            
        </member>
        <member name="M:Apache.Ignite.Core.Plugin.PluginProviderTypeAttribute.#ctor(System.Type)">
            <summary>
            Initializes new instance of <see cref="T:Apache.Ignite.Core.Plugin.PluginProviderTypeAttribute"/> class.
            </summary>
            <param name="pluginProviderType">Type of the plugin provider.</param>
        </member>
        <member name="P:Apache.Ignite.Core.Plugin.PluginProviderTypeAttribute.PluginProviderType">
            <summary>
            Gets the plugin provider type.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Plugin.Cache.ICachePluginConfiguration">
            <summary>
            Cache plugin configuration marker interface. Starting point to extend <see cref="T:Apache.Ignite.Core.Cache.Configuration.CacheConfiguration"/>
            and extend existing cache functionality.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Plugin.Cache.ICachePluginConfiguration.WriteBinary(Apache.Ignite.Core.Binary.IBinaryRawWriter)">
            <summary>
            Writes this instance to a raw writer.
            This method will be called when <see cref="P:Apache.Ignite.Core.Plugin.Cache.ICachePluginConfiguration.CachePluginConfigurationClosureFactoryId"/> 
            is not null to propagate configuration to the Java side.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="P:Apache.Ignite.Core.Plugin.Cache.ICachePluginConfiguration.CachePluginConfigurationClosureFactoryId">
            <summary>
            Gets the id to locate PlatformCachePluginConfigurationClosureFactory on Java side
            and read the data written by <see cref="M:Apache.Ignite.Core.Plugin.Cache.ICachePluginConfiguration.WriteBinary(Apache.Ignite.Core.Binary.IBinaryRawWriter)"/> method.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Resource.InstanceResourceAttribute">
            <summary>
            Attribute which injects <see cref="T:Apache.Ignite.Core.IIgnite"/> instance. Can be defined inside
            implementors of <see cref="T:Apache.Ignite.Core.Compute.IComputeTask`3"/> and <see cref="T:Apache.Ignite.Core.Compute.IComputeJob`1"/> interfaces.
            Can be applied to non-static fields, properties and methods returning <c>void</c> and 
            accepting a single parameter.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Resource.StoreSessionResourceAttribute">
            <summary>
            Annotates a field or a setter method for injection of current <see cref="T:Apache.Ignite.Core.Cache.Store.ICacheStoreSession"/>
            instance. It can be injected into <see cref="T:Apache.Ignite.Core.Cache.Store.ICacheStore"/>.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Services.IService">
            <summary>
            Represents Ignite-managed service.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Services.IService.Init(Apache.Ignite.Core.Services.IServiceContext)">
            <summary>
            Initializes this instance before execution.
            </summary>
            <param name="context">Service execution context.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Services.IService.Execute(Apache.Ignite.Core.Services.IServiceContext)">
            <summary>
            Starts execution of this service. This method is automatically invoked whenever an instance of the service
            is deployed on a Ignite node. Note that service is considered deployed even after it exits the Execute
            method and can be cancelled (or undeployed) only by calling any of the Cancel methods on 
            <see cref="T:Apache.Ignite.Core.Services.IServices"/> API. Also note that service is not required to exit from Execute method until
            Cancel method was called.
            </summary>
            <param name="context">Service execution context.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Services.IService.Cancel(Apache.Ignite.Core.Services.IServiceContext)">
            <summary>
            Cancels this instance.
            <para/>
            Note that Ignite cannot guarantee that the service exits from <see cref="M:Apache.Ignite.Core.Services.IService.Execute(Apache.Ignite.Core.Services.IServiceContext)"/>
            method whenever <see cref="M:Apache.Ignite.Core.Services.IService.Cancel(Apache.Ignite.Core.Services.IServiceContext)"/> is called. It is up to the user to
            make sure that the service code properly reacts to cancellations.
            </summary>
            <param name="context">Service execution context.</param>
        </member>
        <member name="T:Apache.Ignite.Core.Services.ServiceConfiguration">
            <summary>
            Service configuration.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Services.ServiceConfiguration.Name">
            <summary>
            Gets or sets the service name.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Services.ServiceConfiguration.Service">
            <summary>
            Gets or sets the service instance.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Services.ServiceConfiguration.TotalCount">
            <summary>
            Gets or sets the total number of deployed service instances in the cluster, 0 for unlimited.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Services.ServiceConfiguration.MaxPerNodeCount">
            <summary>
            Gets or sets maximum number of deployed service instances on each node, 0 for unlimited.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Services.ServiceConfiguration.CacheName">
            <summary>
            Gets or sets cache name used for key-to-node affinity calculation.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Services.ServiceConfiguration.AffinityKey">
            <summary>
            Gets or sets affinity key used for key-to-node affinity calculation.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Services.ServiceConfiguration.NodeFilter">
            <summary>
            Gets or sets node filter used to filter nodes on which the service will be deployed.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Services.ServiceDeploymentException">
            <summary>
            Indicates an error during Grid Services deployment.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Services.ServiceDeploymentException.KeyBinaryCause">
            Serializer key. 
        </member>
        <member name="F:Apache.Ignite.Core.Services.ServiceDeploymentException._binaryCause">
            Cause. 
        </member>
        <member name="M:Apache.Ignite.Core.Services.ServiceDeploymentException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Services.ServiceDeploymentException"/> class.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Services.ServiceDeploymentException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Services.ServiceDeploymentException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Services.ServiceDeploymentException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Services.ServiceDeploymentException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="cause">The cause.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Services.ServiceDeploymentException.#ctor(System.String,Apache.Ignite.Core.Binary.IBinaryObject)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Services.ServiceDeploymentException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="binaryCause">The binary cause.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Services.ServiceDeploymentException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Common.IgniteException"/> class.
            </summary>
            <param name="info">Serialization information.</param>
            <param name="ctx">Streaming context.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Services.ServiceDeploymentException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data
            about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information
            about the source or destination.</param>
        </member>
        <member name="P:Apache.Ignite.Core.Services.ServiceDeploymentException.BinaryCause">
            <summary>
            Gets the binary cause.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Services.ServiceInvocationException">
            <summary>
            Indicates an error during Grid Services invocation.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Services.ServiceInvocationException.KeyBinaryCause">
            Serializer key. 
        </member>
        <member name="F:Apache.Ignite.Core.Services.ServiceInvocationException._binaryCause">
            Cause. 
        </member>
        <member name="M:Apache.Ignite.Core.Services.ServiceInvocationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Services.ServiceInvocationException"/> class.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Services.ServiceInvocationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Services.ServiceInvocationException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Services.ServiceInvocationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Services.ServiceInvocationException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="cause">The cause.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Services.ServiceInvocationException.#ctor(System.String,Apache.Ignite.Core.Binary.IBinaryObject)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Services.ServiceInvocationException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="binaryCause">The binary cause.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Services.ServiceInvocationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Common.IgniteException"/> class.
            </summary>
            <param name="info">Serialization information.</param>
            <param name="ctx">Streaming context.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Services.ServiceInvocationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data
            about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information
            about the source or destination.</param>
        </member>
        <member name="P:Apache.Ignite.Core.Services.ServiceInvocationException.BinaryCause">
            <summary>
            Gets the binary cause.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Transactions.TransactionConcurrency">
            <summary>
            Transaction concurrency control. See <see cref="T:Apache.Ignite.Core.Transactions.ITransaction"/> for more 
            information on transaction concurrency controls.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Transactions.TransactionConcurrency.Optimistic">
            <summary>
            Optimistic concurrency control.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Transactions.TransactionConcurrency.Pessimistic">
            <summary>
            Pessimistic concurrency control.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Transactions.TransactionConfiguration">
            <summary>
            Transactions configuration.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Transactions.TransactionConfiguration.DefaultDefaultTransactionConcurrency">
            <summary> The default value for <see cref="P:Apache.Ignite.Core.Transactions.TransactionConfiguration.DefaultTransactionConcurrency"/> property. </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Transactions.TransactionConfiguration.DefaultDefaultTransactionIsolation">
            <summary> The default value for <see cref="P:Apache.Ignite.Core.Transactions.TransactionConfiguration.DefaultTransactionIsolation"/> property. </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Transactions.TransactionConfiguration.DefaultPessimisticTransactionLogSize">
            <summary> The default value for <see cref="P:Apache.Ignite.Core.Transactions.TransactionConfiguration.PessimisticTransactionLogSize"/> property. </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Transactions.TransactionConfiguration.DefaultDefaultTimeout">
            <summary> The default value for <see cref="P:Apache.Ignite.Core.Transactions.TransactionConfiguration.DefaultTransactionIsolation"/> property. </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Transactions.TransactionConfiguration.DefaultPessimisticTransactionLogLinger">
            <summary> The default value for <see cref="P:Apache.Ignite.Core.Transactions.TransactionConfiguration.PessimisticTransactionLogLinger"/> property. </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Transactions.TransactionConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Transactions.TransactionConfiguration"/> class.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Transactions.TransactionConfiguration.DefaultTransactionConcurrency">
            <summary>
            Gets or sets the cache transaction concurrency to use when one is not explicitly specified.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Transactions.TransactionConfiguration.DefaultTransactionIsolation">
            <summary>
            Gets or sets the cache transaction isolation to use when one is not explicitly specified.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Transactions.TransactionConfiguration.DefaultTimeout">
            <summary>
            Gets or sets the cache transaction timeout to use when one is not explicitly specified.
            <see cref="F:System.TimeSpan.Zero"/> for infinite timeout.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Transactions.TransactionConfiguration.PessimisticTransactionLogSize">
            <summary>
            Gets or sets the size of pessimistic transactions log stored on node in order to recover 
            transaction commit if originating node has left grid before it has sent all messages to transaction nodes.
            <code>0</code> for unlimited.
            </summary>
        </member>
        <member name="P:Apache.Ignite.Core.Transactions.TransactionConfiguration.PessimisticTransactionLogLinger">
            <summary>
            Gets or sets the delay after which pessimistic recovery entries will be cleaned up for failed node.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Transactions.TransactionDeadlockException">
            <summary>
            Indicates a deadlock within Ignite transaction.
            <para/>
            This exception can be thrown from any cache method that modifies or reads data within a transaction 
            with timeout (see 
            <see cref="M:Apache.Ignite.Core.Transactions.ITransactions.TxStart(Apache.Ignite.Core.Transactions.TransactionConcurrency,Apache.Ignite.Core.Transactions.TransactionIsolation,System.TimeSpan,System.Int32)"/> overload).
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Transactions.TransactionDeadlockException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Transactions.TransactionDeadlockException"/> class.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Transactions.TransactionDeadlockException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Transactions.TransactionDeadlockException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Transactions.TransactionDeadlockException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Transactions.TransactionDeadlockException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="cause">The cause.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Transactions.TransactionDeadlockException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Transactions.TransactionDeadlockException"/> class.
            </summary>
            <param name="info">Serialization information.</param>
            <param name="ctx">Streaming context.</param>
        </member>
        <member name="T:Apache.Ignite.Core.Transactions.TransactionHeuristicException">
            <summary> 
            Exception thrown whenever Ignite transaction enters an unknown state.
            This exception is usually thrown whenever commit partially succeeds.
            Cache will still resolve this situation automatically to ensure data
            integrity, by invalidating all values participating in this transaction
            on remote nodes.  
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Transactions.TransactionHeuristicException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Transactions.TransactionHeuristicException"/> class.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Transactions.TransactionHeuristicException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Transactions.TransactionHeuristicException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Transactions.TransactionHeuristicException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Transactions.TransactionHeuristicException"/> class.
            </summary>
            <param name="info">Serialization information.</param>
            <param name="ctx">Streaming context.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Transactions.TransactionHeuristicException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Transactions.TransactionHeuristicException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="cause">The cause.</param>
        </member>
        <member name="T:Apache.Ignite.Core.Transactions.TransactionIsolation">
            <summary>
            Defines different cache transaction isolation levels. See <see cref="T:Apache.Ignite.Core.Transactions.ITransaction"/>
            documentation for more information about cache transaction isolation levels.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Transactions.TransactionIsolation.ReadCommitted">
            <summary>
            Read committed isolation level.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Transactions.TransactionIsolation.RepeatableRead">
            <summary>
            Repeatable read isolation level.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Transactions.TransactionIsolation.Serializable">
            <summary>
            Serializable isolation level.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Transactions.TransactionOptimisticException">
            <summary> 
            Exception thrown whenever Ignite transactions fail optimistically.  
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Transactions.TransactionOptimisticException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Transactions.TransactionOptimisticException"/> class.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Transactions.TransactionOptimisticException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Transactions.TransactionOptimisticException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Transactions.TransactionOptimisticException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Transactions.TransactionOptimisticException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="cause">The cause.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Transactions.TransactionOptimisticException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Transactions.TransactionOptimisticException"/> class.
            </summary>
            <param name="info">Serialization information.</param>
            <param name="ctx">Streaming context.</param>
        </member>
        <member name="T:Apache.Ignite.Core.Transactions.TransactionRollbackException">
            <summary>
            Exception thrown whenever Ignite transactions has been automatically rolled back.  
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Transactions.TransactionRollbackException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Transactions.TransactionRollbackException"/> class.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Transactions.TransactionRollbackException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Transactions.TransactionRollbackException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Transactions.TransactionRollbackException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Transactions.TransactionRollbackException"/> class.
            </summary>
            <param name="info">Serialization information.</param>
            <param name="ctx">Streaming context.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Transactions.TransactionRollbackException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Transactions.TransactionRollbackException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="cause">The cause.</param>
        </member>
        <member name="T:Apache.Ignite.Core.Transactions.TransactionState">
            <summary>
            Cache transaction state.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Transactions.TransactionState.Active">
            <summary>
            Transaction started.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Transactions.TransactionState.Preparing">
            <summary>
            Transaction validating.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Transactions.TransactionState.Prepared">
            <summary>
            Transaction validation succeeded.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Transactions.TransactionState.MarkedRollback">
            <summary>
            Transaction is marked for rollback.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Transactions.TransactionState.Committing">
            <summary>
            Transaction commit started (validating finished).
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Transactions.TransactionState.Committed">
            <summary>
            Transaction commit succeeded.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Transactions.TransactionState.RollingBack">
            <summary>
            Transaction rollback started (validation failed).
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Transactions.TransactionState.RolledBack">
            <summary>
            Transaction rollback succeeded.
            </summary>
        </member>
        <member name="F:Apache.Ignite.Core.Transactions.TransactionState.Unknown">
            <summary>
            Transaction rollback failed or is otherwise unknown state.
            </summary>
        </member>
        <member name="T:Apache.Ignite.Core.Transactions.TransactionTimeoutException">
            <summary>
            Exception thrown whenever Ignite transactions time out.  
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Transactions.TransactionTimeoutException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Transactions.TransactionTimeoutException"/> class.
            </summary>
        </member>
        <member name="M:Apache.Ignite.Core.Transactions.TransactionTimeoutException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Transactions.TransactionTimeoutException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Transactions.TransactionTimeoutException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Transactions.TransactionTimeoutException"/> class.
            </summary>
            <param name="info">Serialization information.</param>
            <param name="ctx">Streaming context.</param>
        </member>
        <member name="M:Apache.Ignite.Core.Transactions.TransactionTimeoutException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Apache.Ignite.Core.Transactions.TransactionTimeoutException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="cause">The cause.</param>
        </member>
    </members>
</doc>
